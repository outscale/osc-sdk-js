/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of this API is also available for download: <button>[GitHub repository](https://github.com/outscale/osc-api)</button><br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.35.5
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AddUserToUserGroupRequest, AddUserToUserGroupResponse, CreateUserGroupRequest, CreateUserGroupResponse, DeleteUserGroupRequest, DeleteUserGroupResponse, ReadUserGroupRequest, ReadUserGroupResponse, ReadUserGroupsPerUserRequest, ReadUserGroupsPerUserResponse, ReadUserGroupsRequest, ReadUserGroupsResponse, RemoveUserFromUserGroupRequest, RemoveUserFromUserGroupResponse, UpdateUserGroupRequest, UpdateUserGroupResponse } from '../models';
export interface AddUserToUserGroupOperationRequest {
    addUserToUserGroupRequest?: AddUserToUserGroupRequest;
}
export interface CreateUserGroupOperationRequest {
    createUserGroupRequest?: CreateUserGroupRequest;
}
export interface DeleteUserGroupOperationRequest {
    deleteUserGroupRequest?: DeleteUserGroupRequest;
}
export interface ReadUserGroupOperationRequest {
    readUserGroupRequest?: ReadUserGroupRequest;
}
export interface ReadUserGroupsOperationRequest {
    readUserGroupsRequest?: ReadUserGroupsRequest;
}
export interface ReadUserGroupsPerUserOperationRequest {
    readUserGroupsPerUserRequest?: ReadUserGroupsPerUserRequest;
}
export interface RemoveUserFromUserGroupOperationRequest {
    removeUserFromUserGroupRequest?: RemoveUserFromUserGroupRequest;
}
export interface UpdateUserGroupOperationRequest {
    updateUserGroupRequest?: UpdateUserGroupRequest;
}
/**
 * UserGroupApi - interface
 *
 * @export
 * @interface UserGroupApiInterface
 */
export interface UserGroupApiInterface {
    /**
     * Adds a user to a specified group.
     * @param {AddUserToUserGroupRequest} [addUserToUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApiInterface
     */
    addUserToUserGroupRaw(requestParameters: AddUserToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AddUserToUserGroupResponse>>;
    /**
     * Adds a user to a specified group.
     */
    addUserToUserGroup(requestParameters: AddUserToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AddUserToUserGroupResponse>;
    /**
     * Creates a group to which you can add users.<br /> You can also add an inline policy or link a managed policy to the group, which is applied to all its users.
     * @param {CreateUserGroupRequest} [createUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApiInterface
     */
    createUserGroupRaw(requestParameters: CreateUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateUserGroupResponse>>;
    /**
     * Creates a group to which you can add users.<br /> You can also add an inline policy or link a managed policy to the group, which is applied to all its users.
     */
    createUserGroup(requestParameters: CreateUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateUserGroupResponse>;
    /**
     * Deletes a specified user group.<br />  **[WARNING]**<br /> The user group must be empty of any user and must not have any linked policy. Otherwise, you need to force the deletion.<br /> If you force the deletion, all inline policies will be deleted with the user group.<br />
     * @param {DeleteUserGroupRequest} [deleteUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApiInterface
     */
    deleteUserGroupRaw(requestParameters: DeleteUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteUserGroupResponse>>;
    /**
     * Deletes a specified user group.<br />  **[WARNING]**<br /> The user group must be empty of any user and must not have any linked policy. Otherwise, you need to force the deletion.<br /> If you force the deletion, all inline policies will be deleted with the user group.<br />
     */
    deleteUserGroup(requestParameters: DeleteUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteUserGroupResponse>;
    /**
     * Lists information about a specified user group, including its users.
     * @param {ReadUserGroupRequest} [readUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApiInterface
     */
    readUserGroupRaw(requestParameters: ReadUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupResponse>>;
    /**
     * Lists information about a specified user group, including its users.
     */
    readUserGroup(requestParameters: ReadUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupResponse>;
    /**
     * Lists all the user groups of the account.<br /> The response can be filtered using either the PathPrefix or the UserGroupIds.
     * @param {ReadUserGroupsRequest} [readUserGroupsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApiInterface
     */
    readUserGroupsRaw(requestParameters: ReadUserGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupsResponse>>;
    /**
     * Lists all the user groups of the account.<br /> The response can be filtered using either the PathPrefix or the UserGroupIds.
     */
    readUserGroups(requestParameters: ReadUserGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupsResponse>;
    /**
     * Lists the groups a specified user belongs to.
     * @param {ReadUserGroupsPerUserRequest} [readUserGroupsPerUserRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApiInterface
     */
    readUserGroupsPerUserRaw(requestParameters: ReadUserGroupsPerUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupsPerUserResponse>>;
    /**
     * Lists the groups a specified user belongs to.
     */
    readUserGroupsPerUser(requestParameters: ReadUserGroupsPerUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupsPerUserResponse>;
    /**
     * Removes a specified user from a specified group.
     * @param {RemoveUserFromUserGroupRequest} [removeUserFromUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApiInterface
     */
    removeUserFromUserGroupRaw(requestParameters: RemoveUserFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RemoveUserFromUserGroupResponse>>;
    /**
     * Removes a specified user from a specified group.
     */
    removeUserFromUserGroup(requestParameters: RemoveUserFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RemoveUserFromUserGroupResponse>;
    /**
     * Modifies the name and/or the path of a specified group.
     * @param {UpdateUserGroupRequest} [updateUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserGroupApiInterface
     */
    updateUserGroupRaw(requestParameters: UpdateUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateUserGroupResponse>>;
    /**
     * Modifies the name and/or the path of a specified group.
     */
    updateUserGroup(requestParameters: UpdateUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateUserGroupResponse>;
}
/**
 *
 */
export declare class UserGroupApi extends runtime.BaseAPI implements UserGroupApiInterface {
    /**
     * Adds a user to a specified group.
     */
    addUserToUserGroupRaw(requestParameters: AddUserToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AddUserToUserGroupResponse>>;
    /**
     * Adds a user to a specified group.
     */
    addUserToUserGroup(requestParameters?: AddUserToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AddUserToUserGroupResponse>;
    /**
     * Creates a group to which you can add users.<br /> You can also add an inline policy or link a managed policy to the group, which is applied to all its users.
     */
    createUserGroupRaw(requestParameters: CreateUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateUserGroupResponse>>;
    /**
     * Creates a group to which you can add users.<br /> You can also add an inline policy or link a managed policy to the group, which is applied to all its users.
     */
    createUserGroup(requestParameters?: CreateUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateUserGroupResponse>;
    /**
     * Deletes a specified user group.<br />  **[WARNING]**<br /> The user group must be empty of any user and must not have any linked policy. Otherwise, you need to force the deletion.<br /> If you force the deletion, all inline policies will be deleted with the user group.<br />
     */
    deleteUserGroupRaw(requestParameters: DeleteUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteUserGroupResponse>>;
    /**
     * Deletes a specified user group.<br />  **[WARNING]**<br /> The user group must be empty of any user and must not have any linked policy. Otherwise, you need to force the deletion.<br /> If you force the deletion, all inline policies will be deleted with the user group.<br />
     */
    deleteUserGroup(requestParameters?: DeleteUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteUserGroupResponse>;
    /**
     * Lists information about a specified user group, including its users.
     */
    readUserGroupRaw(requestParameters: ReadUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupResponse>>;
    /**
     * Lists information about a specified user group, including its users.
     */
    readUserGroup(requestParameters?: ReadUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupResponse>;
    /**
     * Lists all the user groups of the account.<br /> The response can be filtered using either the PathPrefix or the UserGroupIds.
     */
    readUserGroupsRaw(requestParameters: ReadUserGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupsResponse>>;
    /**
     * Lists all the user groups of the account.<br /> The response can be filtered using either the PathPrefix or the UserGroupIds.
     */
    readUserGroups(requestParameters?: ReadUserGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupsResponse>;
    /**
     * Lists the groups a specified user belongs to.
     */
    readUserGroupsPerUserRaw(requestParameters: ReadUserGroupsPerUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupsPerUserResponse>>;
    /**
     * Lists the groups a specified user belongs to.
     */
    readUserGroupsPerUser(requestParameters?: ReadUserGroupsPerUserOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupsPerUserResponse>;
    /**
     * Removes a specified user from a specified group.
     */
    removeUserFromUserGroupRaw(requestParameters: RemoveUserFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RemoveUserFromUserGroupResponse>>;
    /**
     * Removes a specified user from a specified group.
     */
    removeUserFromUserGroup(requestParameters?: RemoveUserFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RemoveUserFromUserGroupResponse>;
    /**
     * Modifies the name and/or the path of a specified group.
     */
    updateUserGroupRaw(requestParameters: UpdateUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateUserGroupResponse>>;
    /**
     * Modifies the name and/or the path of a specified group.
     */
    updateUserGroup(requestParameters?: UpdateUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateUserGroupResponse>;
}
