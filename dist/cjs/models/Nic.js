"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NicToJSON = exports.NicFromJSONTyped = exports.NicFromJSON = void 0;
const runtime_1 = require("../runtime");
const LinkNic_1 = require("./LinkNic");
const LinkPublicIp_1 = require("./LinkPublicIp");
const PrivateIp_1 = require("./PrivateIp");
const ResourceTag_1 = require("./ResourceTag");
const SecurityGroupLight_1 = require("./SecurityGroupLight");
function NicFromJSON(json) {
    return NicFromJSONTyped(json, false);
}
exports.NicFromJSON = NicFromJSON;
function NicFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accountId': !runtime_1.exists(json, 'AccountId') ? undefined : json['AccountId'],
        'description': !runtime_1.exists(json, 'Description') ? undefined : json['Description'],
        'isSourceDestChecked': !runtime_1.exists(json, 'IsSourceDestChecked') ? undefined : json['IsSourceDestChecked'],
        'linkNic': !runtime_1.exists(json, 'LinkNic') ? undefined : LinkNic_1.LinkNicFromJSON(json['LinkNic']),
        'linkPublicIp': !runtime_1.exists(json, 'LinkPublicIp') ? undefined : LinkPublicIp_1.LinkPublicIpFromJSON(json['LinkPublicIp']),
        'macAddress': !runtime_1.exists(json, 'MacAddress') ? undefined : json['MacAddress'],
        'netId': !runtime_1.exists(json, 'NetId') ? undefined : json['NetId'],
        'nicId': !runtime_1.exists(json, 'NicId') ? undefined : json['NicId'],
        'privateDnsName': !runtime_1.exists(json, 'PrivateDnsName') ? undefined : json['PrivateDnsName'],
        'privateIps': !runtime_1.exists(json, 'PrivateIps') ? undefined : (json['PrivateIps'].map(PrivateIp_1.PrivateIpFromJSON)),
        'securityGroups': !runtime_1.exists(json, 'SecurityGroups') ? undefined : (json['SecurityGroups'].map(SecurityGroupLight_1.SecurityGroupLightFromJSON)),
        'state': !runtime_1.exists(json, 'State') ? undefined : json['State'],
        'subnetId': !runtime_1.exists(json, 'SubnetId') ? undefined : json['SubnetId'],
        'subregionName': !runtime_1.exists(json, 'SubregionName') ? undefined : json['SubregionName'],
        'tags': !runtime_1.exists(json, 'Tags') ? undefined : (json['Tags'].map(ResourceTag_1.ResourceTagFromJSON)),
    };
}
exports.NicFromJSONTyped = NicFromJSONTyped;
function NicToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'AccountId': value.accountId,
        'Description': value.description,
        'IsSourceDestChecked': value.isSourceDestChecked,
        'LinkNic': LinkNic_1.LinkNicToJSON(value.linkNic),
        'LinkPublicIp': LinkPublicIp_1.LinkPublicIpToJSON(value.linkPublicIp),
        'MacAddress': value.macAddress,
        'NetId': value.netId,
        'NicId': value.nicId,
        'PrivateDnsName': value.privateDnsName,
        'PrivateIps': value.privateIps === undefined ? undefined : (value.privateIps.map(PrivateIp_1.PrivateIpToJSON)),
        'SecurityGroups': value.securityGroups === undefined ? undefined : (value.securityGroups.map(SecurityGroupLight_1.SecurityGroupLightToJSON)),
        'State': value.state,
        'SubnetId': value.subnetId,
        'SubregionName': value.subregionName,
        'Tags': value.tags === undefined ? undefined : (value.tags.map(ResourceTag_1.ResourceTagToJSON)),
    };
}
exports.NicToJSON = NicToJSON;
