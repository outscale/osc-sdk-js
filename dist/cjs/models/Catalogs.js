"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.27
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CatalogsToJSON = exports.CatalogsFromJSONTyped = exports.CatalogsFromJSON = exports.CatalogsStateEnum = void 0;
const runtime_1 = require("../runtime");
const CatalogEntry_1 = require("./CatalogEntry");
/**
 * @export
 */
exports.CatalogsStateEnum = {
    Current: 'CURRENT',
    Obsolete: 'OBSOLETE'
};
function CatalogsFromJSON(json) {
    return CatalogsFromJSONTyped(json, false);
}
exports.CatalogsFromJSON = CatalogsFromJSON;
function CatalogsFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'entries': !(0, runtime_1.exists)(json, 'Entries') ? undefined : (json['Entries'].map(CatalogEntry_1.CatalogEntryFromJSON)),
        'fromDate': !(0, runtime_1.exists)(json, 'FromDate') ? undefined : (new Date(json['FromDate'])),
        'state': !(0, runtime_1.exists)(json, 'State') ? undefined : json['State'],
        'toDate': !(0, runtime_1.exists)(json, 'ToDate') ? undefined : (new Date(json['ToDate'])),
    };
}
exports.CatalogsFromJSONTyped = CatalogsFromJSONTyped;
function CatalogsToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'Entries': value.entries === undefined ? undefined : (value.entries.map(CatalogEntry_1.CatalogEntryToJSON)),
        'FromDate': value.fromDate === undefined ? undefined : (value.fromDate.toISOString()),
        'State': value.state,
        'ToDate': value.toDate === undefined ? undefined : (value.toDate.toISOString()),
    };
}
exports.CatalogsToJSON = CatalogsToJSON;
