/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ResourceTag } from './ResourceTag';
/**
 * Information about the VM group.
 * @export
 * @interface VmGroup
 */
export interface VmGroup {
    /**
     * The date and time of creation of the VM group.
     * @type {string}
     * @memberof VmGroup
     */
    creationDate?: string;
    /**
     * The description of the VM group.
     * @type {string}
     * @memberof VmGroup
     */
    description?: string;
    /**
     * The positioning strategy of the VMs on hypervisors. By default, or if set to `no-strategy`, TINA determines the most adequate position for the VMs. If set to `attract`, the VMs are deployed on the same hypervisor, which improves network performance. If set to `repulse`, the VMs are deployed on a different hypervisor, which improves fault tolerance.
     * @type {string}
     * @memberof VmGroup
     */
    positioningStrategy?: VmGroupPositioningStrategyEnum;
    /**
     * One or more IDs of security groups for the VM group.
     * @type {Array<string>}
     * @memberof VmGroup
     */
    securityGroupIds?: Array<string>;
    /**
     * The state of the VM group (`pending` \| `available` \| `scaling up` \| `scaling down` \| `deleting` \| `deleted`).
     * @type {string}
     * @memberof VmGroup
     */
    state?: VmGroupStateEnum;
    /**
     * The ID of the Subnet for the VM group.
     * @type {string}
     * @memberof VmGroup
     */
    subnetId?: string;
    /**
     * One or more tags associated with the VM group.
     * @type {Array<ResourceTag>}
     * @memberof VmGroup
     */
    tags?: Array<ResourceTag>;
    /**
     * The number of VMs in the VM group.
     * @type {number}
     * @memberof VmGroup
     */
    vmCount?: number;
    /**
     * The ID of the VM group.
     * @type {string}
     * @memberof VmGroup
     */
    vmGroupId?: string;
    /**
     * The name of the VM group.
     * @type {string}
     * @memberof VmGroup
     */
    vmGroupName?: string;
    /**
     * The IDs of the VMs in the VM group.
     * @type {Array<string>}
     * @memberof VmGroup
     */
    vmIds?: Array<string>;
    /**
     * The ID of the VM template used by the VM group.
     * @type {string}
     * @memberof VmGroup
     */
    vmTemplateId?: string;
}
/**
 * @export
 */
export declare const VmGroupPositioningStrategyEnum: {
    readonly Attract: "attract";
    readonly NoStrategy: "no-strategy";
    readonly Repulse: "repulse";
};
export declare type VmGroupPositioningStrategyEnum = typeof VmGroupPositioningStrategyEnum[keyof typeof VmGroupPositioningStrategyEnum];
/**
 * @export
 */
export declare const VmGroupStateEnum: {
    readonly Available: "available";
    readonly Deleted: "deleted";
    readonly Deleting: "deleting";
    readonly Pending: "pending";
    readonly ScalingDown: "scaling down";
    readonly ScalingUp: "scaling up";
};
export declare type VmGroupStateEnum = typeof VmGroupStateEnum[keyof typeof VmGroupStateEnum];
export declare function VmGroupFromJSON(json: any): VmGroup;
export declare function VmGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): VmGroup;
export declare function VmGroupToJSON(value?: VmGroup | null): any;
