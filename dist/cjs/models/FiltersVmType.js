"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.25
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FiltersVmTypeToJSON = exports.FiltersVmTypeFromJSONTyped = exports.FiltersVmTypeFromJSON = void 0;
const runtime_1 = require("../runtime");
function FiltersVmTypeFromJSON(json) {
    return FiltersVmTypeFromJSONTyped(json, false);
}
exports.FiltersVmTypeFromJSON = FiltersVmTypeFromJSON;
function FiltersVmTypeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'bsuOptimized': !(0, runtime_1.exists)(json, 'BsuOptimized') ? undefined : json['BsuOptimized'],
        'memorySizes': !(0, runtime_1.exists)(json, 'MemorySizes') ? undefined : json['MemorySizes'],
        'vcoreCounts': !(0, runtime_1.exists)(json, 'VcoreCounts') ? undefined : json['VcoreCounts'],
        'vmTypeNames': !(0, runtime_1.exists)(json, 'VmTypeNames') ? undefined : json['VmTypeNames'],
        'volumeCounts': !(0, runtime_1.exists)(json, 'VolumeCounts') ? undefined : json['VolumeCounts'],
        'volumeSizes': !(0, runtime_1.exists)(json, 'VolumeSizes') ? undefined : json['VolumeSizes'],
    };
}
exports.FiltersVmTypeFromJSONTyped = FiltersVmTypeFromJSONTyped;
function FiltersVmTypeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'BsuOptimized': value.bsuOptimized,
        'MemorySizes': value.memorySizes,
        'VcoreCounts': value.vcoreCounts,
        'VmTypeNames': value.vmTypeNames,
        'VolumeCounts': value.volumeCounts,
        'VolumeSizes': value.volumeSizes,
    };
}
exports.FiltersVmTypeToJSON = FiltersVmTypeToJSON;
