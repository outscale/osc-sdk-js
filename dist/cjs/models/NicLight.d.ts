/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LinkNicLight } from './LinkNicLight';
import { LinkPublicIpLightForVm } from './LinkPublicIpLightForVm';
import { PrivateIpLightForVm } from './PrivateIpLightForVm';
import { SecurityGroupLight } from './SecurityGroupLight';
/**
 * Information about the network interface card (NIC).
 * @export
 * @interface NicLight
 */
export interface NicLight {
    /**
     * The account ID of the owner of the NIC.
     * @type {string}
     * @memberof NicLight
     */
    accountId?: string;
    /**
     * The description of the NIC.
     * @type {string}
     * @memberof NicLight
     */
    description?: string;
    /**
     * (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * @type {boolean}
     * @memberof NicLight
     */
    isSourceDestChecked?: boolean;
    /**
     *
     * @type {LinkNicLight}
     * @memberof NicLight
     */
    linkNic?: LinkNicLight;
    /**
     *
     * @type {LinkPublicIpLightForVm}
     * @memberof NicLight
     */
    linkPublicIp?: LinkPublicIpLightForVm;
    /**
     * The Media Access Control (MAC) address of the NIC.
     * @type {string}
     * @memberof NicLight
     */
    macAddress?: string;
    /**
     * The ID of the Net for the NIC.
     * @type {string}
     * @memberof NicLight
     */
    netId?: string;
    /**
     * The ID of the NIC.
     * @type {string}
     * @memberof NicLight
     */
    nicId?: string;
    /**
     * The name of the private DNS.
     * @type {string}
     * @memberof NicLight
     */
    privateDnsName?: string;
    /**
     * The private IP or IPs of the NIC.
     * @type {Array<PrivateIpLightForVm>}
     * @memberof NicLight
     */
    privateIps?: Array<PrivateIpLightForVm>;
    /**
     * One or more IDs of security groups for the NIC.
     * @type {Array<SecurityGroupLight>}
     * @memberof NicLight
     */
    securityGroups?: Array<SecurityGroupLight>;
    /**
     * The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
     * @type {string}
     * @memberof NicLight
     */
    state?: string;
    /**
     * The ID of the Subnet for the NIC.
     * @type {string}
     * @memberof NicLight
     */
    subnetId?: string;
}
export declare function NicLightFromJSON(json: any): NicLight;
export declare function NicLightFromJSONTyped(json: any, ignoreDiscriminator: boolean): NicLight;
export declare function NicLightToJSON(value?: NicLight | null): any;
