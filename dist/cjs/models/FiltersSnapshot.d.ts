/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * One or more filters.
 * @export
 * @interface FiltersSnapshot
 */
export interface FiltersSnapshot {
    /**
     * The account aliases of the owners of the snapshots.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    accountAliases?: Array<string>;
    /**
     * The account IDs of the owners of the snapshots.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    accountIds?: Array<string>;
    /**
     * The descriptions of the snapshots.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    descriptions?: Array<string>;
    /**
     * The account IDs of one or more users who have permissions to create volumes.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    permissionsToCreateVolumeAccountIds?: Array<string>;
    /**
     * If true, lists all public volumes. If false, lists all private volumes.
     * @type {boolean}
     * @memberof FiltersSnapshot
     */
    permissionsToCreateVolumeGlobalPermission?: boolean;
    /**
     * The progresses of the snapshots, as a percentage.
     * @type {Array<number>}
     * @memberof FiltersSnapshot
     */
    progresses?: Array<number>;
    /**
     * The IDs of the snapshots.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    snapshotIds?: Array<string>;
    /**
     * The states of the snapshots (`in-queue` \| `completed` \| `error`).
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    states?: Array<string>;
    /**
     * The keys of the tags associated with the snapshots.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    tagKeys?: Array<string>;
    /**
     * The values of the tags associated with the snapshots.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    tagValues?: Array<string>;
    /**
     * The key/value combination of the tags associated with the snapshots, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    tags?: Array<string>;
    /**
     * The IDs of the volumes used to create the snapshots.
     * @type {Array<string>}
     * @memberof FiltersSnapshot
     */
    volumeIds?: Array<string>;
    /**
     * The sizes of the volumes used to create the snapshots, in gibibytes (GiB).
     * @type {Array<number>}
     * @memberof FiltersSnapshot
     */
    volumeSizes?: Array<number>;
}
export declare function FiltersSnapshotFromJSON(json: any): FiltersSnapshot;
export declare function FiltersSnapshotFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiltersSnapshot;
export declare function FiltersSnapshotToJSON(value?: FiltersSnapshot | null): any;
