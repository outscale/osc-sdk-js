"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VolumeToJSON = exports.VolumeFromJSONTyped = exports.VolumeFromJSON = void 0;
const runtime_1 = require("../runtime");
const LinkedVolume_1 = require("./LinkedVolume");
const ResourceTag_1 = require("./ResourceTag");
function VolumeFromJSON(json) {
    return VolumeFromJSONTyped(json, false);
}
exports.VolumeFromJSON = VolumeFromJSON;
function VolumeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'creationDate': !runtime_1.exists(json, 'CreationDate') ? undefined : json['CreationDate'],
        'iops': !runtime_1.exists(json, 'Iops') ? undefined : json['Iops'],
        'linkedVolumes': !runtime_1.exists(json, 'LinkedVolumes') ? undefined : (json['LinkedVolumes'].map(LinkedVolume_1.LinkedVolumeFromJSON)),
        'size': !runtime_1.exists(json, 'Size') ? undefined : json['Size'],
        'snapshotId': !runtime_1.exists(json, 'SnapshotId') ? undefined : json['SnapshotId'],
        'state': !runtime_1.exists(json, 'State') ? undefined : json['State'],
        'subregionName': !runtime_1.exists(json, 'SubregionName') ? undefined : json['SubregionName'],
        'tags': !runtime_1.exists(json, 'Tags') ? undefined : (json['Tags'].map(ResourceTag_1.ResourceTagFromJSON)),
        'volumeId': !runtime_1.exists(json, 'VolumeId') ? undefined : json['VolumeId'],
        'volumeType': !runtime_1.exists(json, 'VolumeType') ? undefined : json['VolumeType'],
    };
}
exports.VolumeFromJSONTyped = VolumeFromJSONTyped;
function VolumeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'CreationDate': value.creationDate,
        'Iops': value.iops,
        'LinkedVolumes': value.linkedVolumes === undefined ? undefined : (value.linkedVolumes.map(LinkedVolume_1.LinkedVolumeToJSON)),
        'Size': value.size,
        'SnapshotId': value.snapshotId,
        'State': value.state,
        'SubregionName': value.subregionName,
        'Tags': value.tags === undefined ? undefined : (value.tags.map(ResourceTag_1.ResourceTagToJSON)),
        'VolumeId': value.volumeId,
        'VolumeType': value.volumeType,
    };
}
exports.VolumeToJSON = VolumeToJSON;
