"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.24
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetPeeringToJSON = exports.NetPeeringFromJSONTyped = exports.NetPeeringFromJSON = void 0;
const runtime_1 = require("../runtime");
const AccepterNet_1 = require("./AccepterNet");
const NetPeeringState_1 = require("./NetPeeringState");
const ResourceTag_1 = require("./ResourceTag");
const SourceNet_1 = require("./SourceNet");
function NetPeeringFromJSON(json) {
    return NetPeeringFromJSONTyped(json, false);
}
exports.NetPeeringFromJSON = NetPeeringFromJSON;
function NetPeeringFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accepterNet': !(0, runtime_1.exists)(json, 'AccepterNet') ? undefined : (0, AccepterNet_1.AccepterNetFromJSON)(json['AccepterNet']),
        'netPeeringId': !(0, runtime_1.exists)(json, 'NetPeeringId') ? undefined : json['NetPeeringId'],
        'sourceNet': !(0, runtime_1.exists)(json, 'SourceNet') ? undefined : (0, SourceNet_1.SourceNetFromJSON)(json['SourceNet']),
        'state': !(0, runtime_1.exists)(json, 'State') ? undefined : (0, NetPeeringState_1.NetPeeringStateFromJSON)(json['State']),
        'tags': !(0, runtime_1.exists)(json, 'Tags') ? undefined : (json['Tags'].map(ResourceTag_1.ResourceTagFromJSON)),
    };
}
exports.NetPeeringFromJSONTyped = NetPeeringFromJSONTyped;
function NetPeeringToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'AccepterNet': (0, AccepterNet_1.AccepterNetToJSON)(value.accepterNet),
        'NetPeeringId': value.netPeeringId,
        'SourceNet': (0, SourceNet_1.SourceNetToJSON)(value.sourceNet),
        'State': (0, NetPeeringState_1.NetPeeringStateToJSON)(value.state),
        'Tags': value.tags === undefined ? undefined : (value.tags.map(ResourceTag_1.ResourceTagToJSON)),
    };
}
exports.NetPeeringToJSON = NetPeeringToJSON;
