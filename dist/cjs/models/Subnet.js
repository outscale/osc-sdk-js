"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.27
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubnetToJSON = exports.SubnetFromJSONTyped = exports.SubnetFromJSON = void 0;
const runtime_1 = require("../runtime");
const ResourceTag_1 = require("./ResourceTag");
function SubnetFromJSON(json) {
    return SubnetFromJSONTyped(json, false);
}
exports.SubnetFromJSON = SubnetFromJSON;
function SubnetFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'availableIpsCount': !(0, runtime_1.exists)(json, 'AvailableIpsCount') ? undefined : json['AvailableIpsCount'],
        'ipRange': !(0, runtime_1.exists)(json, 'IpRange') ? undefined : json['IpRange'],
        'mapPublicIpOnLaunch': !(0, runtime_1.exists)(json, 'MapPublicIpOnLaunch') ? undefined : json['MapPublicIpOnLaunch'],
        'netId': !(0, runtime_1.exists)(json, 'NetId') ? undefined : json['NetId'],
        'state': !(0, runtime_1.exists)(json, 'State') ? undefined : json['State'],
        'subnetId': !(0, runtime_1.exists)(json, 'SubnetId') ? undefined : json['SubnetId'],
        'subregionName': !(0, runtime_1.exists)(json, 'SubregionName') ? undefined : json['SubregionName'],
        'tags': !(0, runtime_1.exists)(json, 'Tags') ? undefined : (json['Tags'].map(ResourceTag_1.ResourceTagFromJSON)),
    };
}
exports.SubnetFromJSONTyped = SubnetFromJSONTyped;
function SubnetToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'AvailableIpsCount': value.availableIpsCount,
        'IpRange': value.ipRange,
        'MapPublicIpOnLaunch': value.mapPublicIpOnLaunch,
        'NetId': value.netId,
        'State': value.state,
        'SubnetId': value.subnetId,
        'SubregionName': value.subregionName,
        'Tags': value.tags === undefined ? undefined : (value.tags.map(ResourceTag_1.ResourceTagToJSON)),
    };
}
exports.SubnetToJSON = SubnetToJSON;
