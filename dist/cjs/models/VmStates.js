"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VmStatesToJSON = exports.VmStatesFromJSONTyped = exports.VmStatesFromJSON = void 0;
const runtime_1 = require("../runtime");
const MaintenanceEvent_1 = require("./MaintenanceEvent");
function VmStatesFromJSON(json) {
    return VmStatesFromJSONTyped(json, false);
}
exports.VmStatesFromJSON = VmStatesFromJSON;
function VmStatesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'maintenanceEvents': !runtime_1.exists(json, 'MaintenanceEvents') ? undefined : (json['MaintenanceEvents'].map(MaintenanceEvent_1.MaintenanceEventFromJSON)),
        'subregionName': !runtime_1.exists(json, 'SubregionName') ? undefined : json['SubregionName'],
        'vmId': !runtime_1.exists(json, 'VmId') ? undefined : json['VmId'],
        'vmState': !runtime_1.exists(json, 'VmState') ? undefined : json['VmState'],
    };
}
exports.VmStatesFromJSONTyped = VmStatesFromJSONTyped;
function VmStatesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'MaintenanceEvents': value.maintenanceEvents === undefined ? undefined : (value.maintenanceEvents.map(MaintenanceEvent_1.MaintenanceEventToJSON)),
        'SubregionName': value.subregionName,
        'VmId': value.vmId,
        'VmState': value.vmState,
    };
}
exports.VmStatesToJSON = VmStatesToJSON;
