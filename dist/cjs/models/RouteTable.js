"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RouteTableToJSON = exports.RouteTableFromJSONTyped = exports.RouteTableFromJSON = void 0;
const runtime_1 = require("../runtime");
const LinkRouteTable_1 = require("./LinkRouteTable");
const ResourceTag_1 = require("./ResourceTag");
const Route_1 = require("./Route");
const RoutePropagatingVirtualGateway_1 = require("./RoutePropagatingVirtualGateway");
function RouteTableFromJSON(json) {
    return RouteTableFromJSONTyped(json, false);
}
exports.RouteTableFromJSON = RouteTableFromJSON;
function RouteTableFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'linkRouteTables': !runtime_1.exists(json, 'LinkRouteTables') ? undefined : (json['LinkRouteTables'].map(LinkRouteTable_1.LinkRouteTableFromJSON)),
        'netId': !runtime_1.exists(json, 'NetId') ? undefined : json['NetId'],
        'routePropagatingVirtualGateways': !runtime_1.exists(json, 'RoutePropagatingVirtualGateways') ? undefined : (json['RoutePropagatingVirtualGateways'].map(RoutePropagatingVirtualGateway_1.RoutePropagatingVirtualGatewayFromJSON)),
        'routeTableId': !runtime_1.exists(json, 'RouteTableId') ? undefined : json['RouteTableId'],
        'routes': !runtime_1.exists(json, 'Routes') ? undefined : (json['Routes'].map(Route_1.RouteFromJSON)),
        'tags': !runtime_1.exists(json, 'Tags') ? undefined : (json['Tags'].map(ResourceTag_1.ResourceTagFromJSON)),
    };
}
exports.RouteTableFromJSONTyped = RouteTableFromJSONTyped;
function RouteTableToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'LinkRouteTables': value.linkRouteTables === undefined ? undefined : (value.linkRouteTables.map(LinkRouteTable_1.LinkRouteTableToJSON)),
        'NetId': value.netId,
        'RoutePropagatingVirtualGateways': value.routePropagatingVirtualGateways === undefined ? undefined : (value.routePropagatingVirtualGateways.map(RoutePropagatingVirtualGateway_1.RoutePropagatingVirtualGatewayToJSON)),
        'RouteTableId': value.routeTableId,
        'Routes': value.routes === undefined ? undefined : (value.routes.map(Route_1.RouteToJSON)),
        'Tags': value.tags === undefined ? undefined : (value.tags.map(ResourceTag_1.ResourceTagToJSON)),
    };
}
exports.RouteTableToJSON = RouteTableToJSON;
