/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { AccepterNetFromJSON, AccepterNetToJSON, } from './AccepterNet';
import { NetPeeringStateFromJSON, NetPeeringStateToJSON, } from './NetPeeringState';
import { ResourceTagFromJSON, ResourceTagToJSON, } from './ResourceTag';
import { SourceNetFromJSON, SourceNetToJSON, } from './SourceNet';
export function NetPeeringFromJSON(json) {
    return NetPeeringFromJSONTyped(json, false);
}
export function NetPeeringFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'accepterNet': !exists(json, 'AccepterNet') ? undefined : AccepterNetFromJSON(json['AccepterNet']),
        'netPeeringId': !exists(json, 'NetPeeringId') ? undefined : json['NetPeeringId'],
        'sourceNet': !exists(json, 'SourceNet') ? undefined : SourceNetFromJSON(json['SourceNet']),
        'state': !exists(json, 'State') ? undefined : NetPeeringStateFromJSON(json['State']),
        'tags': !exists(json, 'Tags') ? undefined : (json['Tags'].map(ResourceTagFromJSON)),
    };
}
export function NetPeeringToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'AccepterNet': AccepterNetToJSON(value.accepterNet),
        'NetPeeringId': value.netPeeringId,
        'SourceNet': SourceNetToJSON(value.sourceNet),
        'State': NetPeeringStateToJSON(value.state),
        'Tags': value.tags === undefined ? undefined : (value.tags.map(ResourceTagToJSON)),
    };
}
