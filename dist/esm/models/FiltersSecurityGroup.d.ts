/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of this API is also available for download: <button>[GitHub repository](https://github.com/outscale/osc-api)</button><br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.35.5
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * One or more filters.
 * @export
 * @interface FiltersSecurityGroup
 */
export interface FiltersSecurityGroup {
    /**
     * The descriptions of the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    descriptions?: Array<string>;
    /**
     * The account IDs that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleAccountIds?: Array<string>;
    /**
     * The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
     * @type {Array<number>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleFromPortRanges?: Array<number>;
    /**
     * The IP ranges that have been granted permissions, in CIDR notation (for example, `10.0.0.0/24`).
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleIpRanges?: Array<string>;
    /**
     * The IP protocols for the permissions (`tcp` \| `udp` \| `icmp`, or a protocol number, or `-1` for all protocols).
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleProtocols?: Array<string>;
    /**
     * The IDs of the security groups that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleSecurityGroupIds?: Array<string>;
    /**
     * The names of the security groups that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleSecurityGroupNames?: Array<string>;
    /**
     * The ends of the port ranges for the TCP and UDP protocols, or the ICMP code numbers.
     * @type {Array<number>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleToPortRanges?: Array<number>;
    /**
     * The IDs of the Nets specified when the security groups were created.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    netIds?: Array<string>;
    /**
     * The account IDs that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleAccountIds?: Array<string>;
    /**
     * The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
     * @type {Array<number>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleFromPortRanges?: Array<number>;
    /**
     * The IP ranges that have been granted permissions, in CIDR notation (for example, `10.0.0.0/24`).
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleIpRanges?: Array<string>;
    /**
     * The IP protocols for the permissions (`tcp` \| `udp` \| `icmp`, or a protocol number, or `-1` for all protocols).
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleProtocols?: Array<string>;
    /**
     * The IDs of the security groups that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleSecurityGroupIds?: Array<string>;
    /**
     * The names of the security groups that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleSecurityGroupNames?: Array<string>;
    /**
     * The ends of the port ranges for the TCP and UDP protocols, or the ICMP code numbers.
     * @type {Array<number>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleToPortRanges?: Array<number>;
    /**
     * The IDs of the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    securityGroupIds?: Array<string>;
    /**
     * The names of the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    securityGroupNames?: Array<string>;
    /**
     * The keys of the tags associated with the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    tagKeys?: Array<string>;
    /**
     * The values of the tags associated with the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    tagValues?: Array<string>;
    /**
     * The key/value combination of the tags associated with the security groups, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    tags?: Array<string>;
}
export declare function FiltersSecurityGroupFromJSON(json: any): FiltersSecurityGroup;
export declare function FiltersSecurityGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiltersSecurityGroup;
export declare function FiltersSecurityGroupToJSON(value?: FiltersSecurityGroup | null): any;
