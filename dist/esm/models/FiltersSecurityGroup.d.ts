/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * One or more filters.
 * @export
 * @interface FiltersSecurityGroup
 */
export interface FiltersSecurityGroup {
    /**
     * The account IDs of the owners of the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    accountIds?: Array<string>;
    /**
     * The descriptions of the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    descriptions?: Array<string>;
    /**
     * The account IDs that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleAccountIds?: Array<string>;
    /**
     * The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
     * @type {Array<number>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleFromPortRanges?: Array<number>;
    /**
     * The IP ranges that have been granted permissions, in CIDR notation (for example, 10.0.0.0/24).
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleIpRanges?: Array<string>;
    /**
     * The IP protocols for the permissions (`tcp` \| `udp` \| `icmp`, or a protocol number, or `-1` for all protocols).
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleProtocols?: Array<string>;
    /**
     * The IDs of the security groups that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleSecurityGroupIds?: Array<string>;
    /**
     * The names of the security groups that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleSecurityGroupNames?: Array<string>;
    /**
     * The ends of the port ranges for the TCP and UDP protocols, or the ICMP codes.
     * @type {Array<number>}
     * @memberof FiltersSecurityGroup
     */
    inboundRuleToPortRanges?: Array<number>;
    /**
     * The IDs of the Nets specified when the security groups were created.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    netIds?: Array<string>;
    /**
     * The account IDs that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleAccountIds?: Array<string>;
    /**
     * The beginnings of the port ranges for the TCP and UDP protocols, or the ICMP type numbers.
     * @type {Array<number>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleFromPortRanges?: Array<number>;
    /**
     * The IP ranges that have been granted permissions, in CIDR notation (for example, 10.0.0.0/24).
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleIpRanges?: Array<string>;
    /**
     * The IP protocols for the permissions (`tcp` \| `udp` \| `icmp`, or a protocol number, or `-1` for all protocols).
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleProtocols?: Array<string>;
    /**
     * The IDs of the security groups that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleSecurityGroupIds?: Array<string>;
    /**
     * The names of the security groups that have been granted permissions.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleSecurityGroupNames?: Array<string>;
    /**
     * The ends of the port ranges for the TCP and UDP protocols, or the ICMP codes.
     * @type {Array<number>}
     * @memberof FiltersSecurityGroup
     */
    outboundRuleToPortRanges?: Array<number>;
    /**
     * The IDs of the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    securityGroupIds?: Array<string>;
    /**
     * The names of the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    securityGroupNames?: Array<string>;
    /**
     * The keys of the tags associated with the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    tagKeys?: Array<string>;
    /**
     * The values of the tags associated with the security groups.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    tagValues?: Array<string>;
    /**
     * The key/value combination of the tags associated with the security groups, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
     * @type {Array<string>}
     * @memberof FiltersSecurityGroup
     */
    tags?: Array<string>;
}
export declare function FiltersSecurityGroupFromJSON(json: any): FiltersSecurityGroup;
export declare function FiltersSecurityGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiltersSecurityGroup;
export declare function FiltersSecurityGroupToJSON(value?: FiltersSecurityGroup | null): any;
