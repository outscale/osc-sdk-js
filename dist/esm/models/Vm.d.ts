/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { BlockDeviceMappingCreated } from './BlockDeviceMappingCreated';
import { NicLight } from './NicLight';
import { Placement } from './Placement';
import { ResourceTag } from './ResourceTag';
import { SecurityGroupLight } from './SecurityGroupLight';
/**
 * Information about the VM.
 * @export
 * @interface Vm
 */
export interface Vm {
    /**
     * The architecture of the VM (`i386` \| `x86_64`).
     * @type {string}
     * @memberof Vm
     */
    architecture?: string;
    /**
     * The block device mapping of the VM.
     * @type {Array<BlockDeviceMappingCreated>}
     * @memberof Vm
     */
    blockDeviceMappings?: Array<BlockDeviceMappingCreated>;
    /**
     * This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
     * @type {boolean}
     * @memberof Vm
     */
    bsuOptimized?: boolean;
    /**
     * The idempotency token provided when launching the VM.
     * @type {string}
     * @memberof Vm
     */
    clientToken?: string;
    /**
     * The date and time at which the VM was created.
     * @type {string}
     * @memberof Vm
     */
    creationDate?: string;
    /**
     * If true, you cannot terminate the VM using Cockpit, the CLI or the API. If false, you can.
     * @type {boolean}
     * @memberof Vm
     */
    deletionProtection?: boolean;
    /**
     * The hypervisor type of the VMs (`ovm` \| `xen`).
     * @type {string}
     * @memberof Vm
     */
    hypervisor?: string;
    /**
     * The ID of the OMI used to create the VM.
     * @type {string}
     * @memberof Vm
     */
    imageId?: string;
    /**
     * (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * @type {boolean}
     * @memberof Vm
     */
    isSourceDestChecked?: boolean;
    /**
     * The name of the keypair used when launching the VM.
     * @type {string}
     * @memberof Vm
     */
    keypairName?: string;
    /**
     * The number for the VM when launching a group of several VMs (for example, 0, 1, 2, and so on).
     * @type {number}
     * @memberof Vm
     */
    launchNumber?: number;
    /**
     * The ID of the Net in which the VM is running.
     * @type {string}
     * @memberof Vm
     */
    netId?: string;
    /**
     * (Net only) The network interface cards (NICs) the VMs are attached to.
     * @type {Array<NicLight>}
     * @memberof Vm
     */
    nics?: Array<NicLight>;
    /**
     * Indicates the operating system (OS) of the VM.
     * @type {string}
     * @memberof Vm
     */
    osFamily?: string;
    /**
     * The performance of the VM (`medium` \| `high` \|  `highest`).
     * @type {string}
     * @memberof Vm
     */
    performance?: string;
    /**
     *
     * @type {Placement}
     * @memberof Vm
     */
    placement?: Placement;
    /**
     * The name of the private DNS.
     * @type {string}
     * @memberof Vm
     */
    privateDnsName?: string;
    /**
     * The primary private IP of the VM.
     * @type {string}
     * @memberof Vm
     */
    privateIp?: string;
    /**
     * The product code associated with the OMI used to create the VM (`0001` Linux/Unix \| `0002` Windows \| `0004` Linux/Oracle \| `0005` Windows 10).
     * @type {Array<string>}
     * @memberof Vm
     */
    productCodes?: Array<string>;
    /**
     * The name of the public DNS.
     * @type {string}
     * @memberof Vm
     */
    publicDnsName?: string;
    /**
     * The public IP of the VM.
     * @type {string}
     * @memberof Vm
     */
    publicIp?: string;
    /**
     * The reservation ID of the VM.
     * @type {string}
     * @memberof Vm
     */
    reservationId?: string;
    /**
     * The name of the root device for the VM (for example, `/dev/vda1`).
     * @type {string}
     * @memberof Vm
     */
    rootDeviceName?: string;
    /**
     * The type of root device used by the VM (always `bsu`).
     * @type {string}
     * @memberof Vm
     */
    rootDeviceType?: string;
    /**
     * One or more security groups associated with the VM.
     * @type {Array<SecurityGroupLight>}
     * @memberof Vm
     */
    securityGroups?: Array<SecurityGroupLight>;
    /**
     * The state of the VM (`pending` \| `running` \| `stopping` \| `stopped` \| `shutting-down` \| `terminated` \| `quarantine`).
     * @type {string}
     * @memberof Vm
     */
    state?: string;
    /**
     * The reason explaining the current state of the VM.
     * @type {string}
     * @memberof Vm
     */
    stateReason?: string;
    /**
     * The ID of the Subnet for the VM.
     * @type {string}
     * @memberof Vm
     */
    subnetId?: string;
    /**
     * One or more tags associated with the VM.
     * @type {Array<ResourceTag>}
     * @memberof Vm
     */
    tags?: Array<ResourceTag>;
    /**
     * The Base64-encoded MIME user data.
     * @type {string}
     * @memberof Vm
     */
    userData?: string;
    /**
     * The ID of the VM.
     * @type {string}
     * @memberof Vm
     */
    vmId?: string;
    /**
     * The VM behavior when you stop it. If set to `stop`, the VM stops. If set to `restart`, the VM stops then automatically restarts. If set to `terminate`, the VM stops and is deleted.
     * @type {string}
     * @memberof Vm
     */
    vmInitiatedShutdownBehavior?: string;
    /**
     * The type of VM. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
     * @type {string}
     * @memberof Vm
     */
    vmType?: string;
}
export declare function VmFromJSON(json: any): Vm;
export declare function VmFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vm;
export declare function VmToJSON(value?: Vm | null): any;
