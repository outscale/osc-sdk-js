/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.27
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
export function ServerCertificateFromJSON(json) {
    return ServerCertificateFromJSONTyped(json, false);
}
export function ServerCertificateFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'expirationDate': !exists(json, 'ExpirationDate') ? undefined : (new Date(json['ExpirationDate'])),
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'orn': !exists(json, 'Orn') ? undefined : json['Orn'],
        'path': !exists(json, 'Path') ? undefined : json['Path'],
        'uploadDate': !exists(json, 'UploadDate') ? undefined : (new Date(json['UploadDate'])),
    };
}
export function ServerCertificateToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'ExpirationDate': value.expirationDate === undefined ? undefined : (value.expirationDate.toISOString().substr(0, 10)),
        'Id': value.id,
        'Name': value.name,
        'Orn': value.orn,
        'Path': value.path,
        'UploadDate': value.uploadDate === undefined ? undefined : (value.uploadDate.toISOString().substr(0, 10)),
    };
}
