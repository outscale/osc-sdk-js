/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.23
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * One or more filters.
 * @export
 * @interface FiltersRouteTable
 */
export interface FiltersRouteTable {
    /**
     * The IDs of the route tables involved in the associations.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    linkRouteTableIds?: Array<string>;
    /**
     * The IDs of the associations between the route tables and the Subnets.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    linkRouteTableLinkRouteTableIds?: Array<string>;
    /**
     * If true, the route tables are the main ones for their Nets.
     * @type {boolean}
     * @memberof FiltersRouteTable
     */
    linkRouteTableMain?: boolean;
    /**
     * The IDs of the Subnets involved in the associations.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    linkSubnetIds?: Array<string>;
    /**
     * The IDs of the Nets for the route tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    netIds?: Array<string>;
    /**
     * The methods used to create a route.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeCreationMethods?: Array<string>;
    /**
     * The IP ranges specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeDestinationIpRanges?: Array<string>;
    /**
     * The service IDs specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeDestinationServiceIds?: Array<string>;
    /**
     * The IDs of the gateways specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeGatewayIds?: Array<string>;
    /**
     * The IDs of the NAT services specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeNatServiceIds?: Array<string>;
    /**
     * The IDs of the Net peerings specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeNetPeeringIds?: Array<string>;
    /**
     * The states of routes in the route tables (always `active`).
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeStates?: Array<string>;
    /**
     * The IDs of the route tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeTableIds?: Array<string>;
    /**
     * The IDs of the VMs specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeVmIds?: Array<string>;
    /**
     * The keys of the tags associated with the route tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    tagKeys?: Array<string>;
    /**
     * The values of the tags associated with the route tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    tagValues?: Array<string>;
    /**
     * The key/value combination of the tags associated with the route tables, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    tags?: Array<string>;
}
export declare function FiltersRouteTableFromJSON(json: any): FiltersRouteTable;
export declare function FiltersRouteTableFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiltersRouteTable;
export declare function FiltersRouteTableToJSON(value?: FiltersRouteTable | null): any;
