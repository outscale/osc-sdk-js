/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * One or more filters.
 * @export
 * @interface FiltersVmType
 */
export interface FiltersVmType {
    /**
     * This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
     * @type {boolean}
     * @memberof FiltersVmType
     */
    bsuOptimized?: boolean;
    /**
     * The amounts of memory, in gibibytes (GiB).
     * @type {Array<number>}
     * @memberof FiltersVmType
     */
    memorySizes?: Array<number>;
    /**
     * The numbers of vCores.
     * @type {Array<number>}
     * @memberof FiltersVmType
     */
    vcoreCounts?: Array<number>;
    /**
     * The names of the VM types. For more information, see [Instance Types](https://docs.outscale.com/en/userguide/Instance-Types.html).
     * @type {Array<string>}
     * @memberof FiltersVmType
     */
    vmTypeNames?: Array<string>;
    /**
     * The maximum number of ephemeral storage disks.
     * @type {Array<number>}
     * @memberof FiltersVmType
     */
    volumeCounts?: Array<number>;
    /**
     * The size of one ephemeral storage disk, in gibibytes (GiB).
     * @type {Array<number>}
     * @memberof FiltersVmType
     */
    volumeSizes?: Array<number>;
}
export declare function FiltersVmTypeFromJSON(json: any): FiltersVmType;
export declare function FiltersVmTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiltersVmType;
export declare function FiltersVmTypeToJSON(value?: FiltersVmType | null): any;
