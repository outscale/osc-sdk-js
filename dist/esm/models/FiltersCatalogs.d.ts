/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.27
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * One or more filters.
 * @export
 * @interface FiltersCatalogs
 */
export interface FiltersCatalogs {
    /**
     * By default or if set to true, only returns the current catalog. If false, returns the current catalog and past catalogs.
     * @type {boolean}
     * @memberof FiltersCatalogs
     */
    currentCatalogOnly?: boolean;
    /**
     * The beginning of the time period, in ISO 8601 date format (for example, `2020-06-14`). This date cannot be older than 3 years. You must specify the parameters `FromDate` and `ToDate` together.
     * @type {Date}
     * @memberof FiltersCatalogs
     */
    fromDate?: Date;
    /**
     * The end of the time period, in ISO 8601 date format (for example, `2020-06-30`). You must specify the parameters `FromDate` and `ToDate` together.
     * @type {Date}
     * @memberof FiltersCatalogs
     */
    toDate?: Date;
}
export declare function FiltersCatalogsFromJSON(json: any): FiltersCatalogs;
export declare function FiltersCatalogsFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiltersCatalogs;
export declare function FiltersCatalogsToJSON(value?: FiltersCatalogs | null): any;
