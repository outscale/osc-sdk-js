/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of this API is also available for download: <button>[GitHub repository](https://github.com/outscale/osc-api)</button><br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.35.5
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreateLoadBalancerRequest, CreateLoadBalancerResponse, CreateLoadBalancerTagsRequest, CreateLoadBalancerTagsResponse, DeleteLoadBalancerRequest, DeleteLoadBalancerResponse, DeleteLoadBalancerTagsRequest, DeleteLoadBalancerTagsResponse, DeregisterVmsInLoadBalancerRequest, DeregisterVmsInLoadBalancerResponse, LinkLoadBalancerBackendMachinesRequest, LinkLoadBalancerBackendMachinesResponse, ReadLoadBalancerTagsRequest, ReadLoadBalancerTagsResponse, ReadLoadBalancersRequest, ReadLoadBalancersResponse, ReadVmsHealthRequest, ReadVmsHealthResponse, RegisterVmsInLoadBalancerRequest, RegisterVmsInLoadBalancerResponse, UnlinkLoadBalancerBackendMachinesRequest, UnlinkLoadBalancerBackendMachinesResponse, UpdateLoadBalancerRequest, UpdateLoadBalancerResponse } from '../models';
export interface CreateLoadBalancerOperationRequest {
    createLoadBalancerRequest?: CreateLoadBalancerRequest;
}
export interface CreateLoadBalancerTagsOperationRequest {
    createLoadBalancerTagsRequest?: CreateLoadBalancerTagsRequest;
}
export interface DeleteLoadBalancerOperationRequest {
    deleteLoadBalancerRequest?: DeleteLoadBalancerRequest;
}
export interface DeleteLoadBalancerTagsOperationRequest {
    deleteLoadBalancerTagsRequest?: DeleteLoadBalancerTagsRequest;
}
export interface DeregisterVmsInLoadBalancerOperationRequest {
    deregisterVmsInLoadBalancerRequest?: DeregisterVmsInLoadBalancerRequest;
}
export interface LinkLoadBalancerBackendMachinesOperationRequest {
    linkLoadBalancerBackendMachinesRequest?: LinkLoadBalancerBackendMachinesRequest;
}
export interface ReadLoadBalancerTagsOperationRequest {
    readLoadBalancerTagsRequest?: ReadLoadBalancerTagsRequest;
}
export interface ReadLoadBalancersOperationRequest {
    readLoadBalancersRequest?: ReadLoadBalancersRequest;
}
export interface ReadVmsHealthOperationRequest {
    readVmsHealthRequest?: ReadVmsHealthRequest;
}
export interface RegisterVmsInLoadBalancerOperationRequest {
    registerVmsInLoadBalancerRequest?: RegisterVmsInLoadBalancerRequest;
}
export interface UnlinkLoadBalancerBackendMachinesOperationRequest {
    unlinkLoadBalancerBackendMachinesRequest?: UnlinkLoadBalancerBackendMachinesRequest;
}
export interface UpdateLoadBalancerOperationRequest {
    updateLoadBalancerRequest?: UpdateLoadBalancerRequest;
}
/**
 * LoadBalancerApi - interface
 *
 * @export
 * @interface LoadBalancerApiInterface
 */
export interface LoadBalancerApiInterface {
    /**
     * Creates a load balancer.<br /> The load balancer is created with a unique Domain Name Service (DNS) name. It receives the incoming traffic and routes it to its registered virtual machines (VMs).<br /> By default, this action creates an Internet-facing load balancer, resolving to public IPs. To create an internal load balancer in a Net, resolving to private IPs, use the `LoadBalancerType` parameter.<br /> You must specify either the `Subnets` or the `SubregionNames` parameters.<br /><br /> For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
     * @param {CreateLoadBalancerRequest} [createLoadBalancerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    createLoadBalancerRaw(requestParameters: CreateLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateLoadBalancerResponse>>;
    /**
     * Creates a load balancer.<br /> The load balancer is created with a unique Domain Name Service (DNS) name. It receives the incoming traffic and routes it to its registered virtual machines (VMs).<br /> By default, this action creates an Internet-facing load balancer, resolving to public IPs. To create an internal load balancer in a Net, resolving to private IPs, use the `LoadBalancerType` parameter.<br /> You must specify either the `Subnets` or the `SubregionNames` parameters.<br /><br /> For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
     */
    createLoadBalancer(requestParameters: CreateLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateLoadBalancerResponse>;
    /**
     * Adds one or more tags to the specified load balancers.<br /> If a tag with the same key already exists for the load balancer, the tag value is replaced.<br /><br /> For more information, see [About Tags](https://docs.outscale.com/en/userguide/About-Tags.html).
     * @param {CreateLoadBalancerTagsRequest} [createLoadBalancerTagsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    createLoadBalancerTagsRaw(requestParameters: CreateLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateLoadBalancerTagsResponse>>;
    /**
     * Adds one or more tags to the specified load balancers.<br /> If a tag with the same key already exists for the load balancer, the tag value is replaced.<br /><br /> For more information, see [About Tags](https://docs.outscale.com/en/userguide/About-Tags.html).
     */
    createLoadBalancerTags(requestParameters: CreateLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateLoadBalancerTagsResponse>;
    /**
     * Deletes a specified load balancer.
     * @param {DeleteLoadBalancerRequest} [deleteLoadBalancerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    deleteLoadBalancerRaw(requestParameters: DeleteLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteLoadBalancerResponse>>;
    /**
     * Deletes a specified load balancer.
     */
    deleteLoadBalancer(requestParameters: DeleteLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteLoadBalancerResponse>;
    /**
     * Deletes one or more tags from the specified load balancers.
     * @param {DeleteLoadBalancerTagsRequest} [deleteLoadBalancerTagsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    deleteLoadBalancerTagsRaw(requestParameters: DeleteLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteLoadBalancerTagsResponse>>;
    /**
     * Deletes one or more tags from the specified load balancers.
     */
    deleteLoadBalancerTags(requestParameters: DeleteLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteLoadBalancerTagsResponse>;
    /**
     * > [WARNING]<br /> > Deprecated: This call is deprecated and will be removed.<br />  Deregisters a specified virtual machine (VM) from a load balancer.
     * @param {DeregisterVmsInLoadBalancerRequest} [deregisterVmsInLoadBalancerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    deregisterVmsInLoadBalancerRaw(requestParameters: DeregisterVmsInLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeregisterVmsInLoadBalancerResponse>>;
    /**
     * > [WARNING]<br /> > Deprecated: This call is deprecated and will be removed.<br />  Deregisters a specified virtual machine (VM) from a load balancer.
     */
    deregisterVmsInLoadBalancer(requestParameters: DeregisterVmsInLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeregisterVmsInLoadBalancerResponse>;
    /**
     * Attaches one or more virtual machines (VMs) to a specified load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.<br /> The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
     * @param {LinkLoadBalancerBackendMachinesRequest} [linkLoadBalancerBackendMachinesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    linkLoadBalancerBackendMachinesRaw(requestParameters: LinkLoadBalancerBackendMachinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkLoadBalancerBackendMachinesResponse>>;
    /**
     * Attaches one or more virtual machines (VMs) to a specified load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.<br /> The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
     */
    linkLoadBalancerBackendMachines(requestParameters: LinkLoadBalancerBackendMachinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkLoadBalancerBackendMachinesResponse>;
    /**
     * Lists the tags associated with one or more specified load balancers.
     * @param {ReadLoadBalancerTagsRequest} [readLoadBalancerTagsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    readLoadBalancerTagsRaw(requestParameters: ReadLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadLoadBalancerTagsResponse>>;
    /**
     * Lists the tags associated with one or more specified load balancers.
     */
    readLoadBalancerTags(requestParameters: ReadLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadLoadBalancerTagsResponse>;
    /**
     * Lists one or more load balancers and their attributes.
     * @param {ReadLoadBalancersRequest} [readLoadBalancersRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    readLoadBalancersRaw(requestParameters: ReadLoadBalancersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadLoadBalancersResponse>>;
    /**
     * Lists one or more load balancers and their attributes.
     */
    readLoadBalancers(requestParameters: ReadLoadBalancersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadLoadBalancersResponse>;
    /**
     * Lists the state of one or more backend virtual machines (VMs) registered with a specified load balancer.
     * @param {ReadVmsHealthRequest} [readVmsHealthRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    readVmsHealthRaw(requestParameters: ReadVmsHealthOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVmsHealthResponse>>;
    /**
     * Lists the state of one or more backend virtual machines (VMs) registered with a specified load balancer.
     */
    readVmsHealth(requestParameters: ReadVmsHealthOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVmsHealthResponse>;
    /**
     * > [WARNING]<br /> > Deprecated: This call is deprecated and will be removed.<br />  Registers one or more virtual machines (VMs) with a specified load balancer.<br /> The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
     * @param {RegisterVmsInLoadBalancerRequest} [registerVmsInLoadBalancerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    registerVmsInLoadBalancerRaw(requestParameters: RegisterVmsInLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterVmsInLoadBalancerResponse>>;
    /**
     * > [WARNING]<br /> > Deprecated: This call is deprecated and will be removed.<br />  Registers one or more virtual machines (VMs) with a specified load balancer.<br /> The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
     */
    registerVmsInLoadBalancer(requestParameters: RegisterVmsInLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterVmsInLoadBalancerResponse>;
    /**
     * Detaches one or more backend virtual machines (VMs) from a load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.
     * @param {UnlinkLoadBalancerBackendMachinesRequest} [unlinkLoadBalancerBackendMachinesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    unlinkLoadBalancerBackendMachinesRaw(requestParameters: UnlinkLoadBalancerBackendMachinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkLoadBalancerBackendMachinesResponse>>;
    /**
     * Detaches one or more backend virtual machines (VMs) from a load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.
     */
    unlinkLoadBalancerBackendMachines(requestParameters: UnlinkLoadBalancerBackendMachinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkLoadBalancerBackendMachinesResponse>;
    /**
     * Modifies the specified attribute of a load balancer. You can specify only one attribute at a time.<br /><br />  You can set a new SSL certificate to an SSL or HTTPS listener of a load balancer.<br /> This certificate replaces any certificate used on the same load balancer and port.<br /><br />  You can also replace the currently enabled policy for the load balancer with another one.<br /> If the `PolicyNames` parameter is empty, the currently enabled policy is disabled.
     * @param {UpdateLoadBalancerRequest} [updateLoadBalancerRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LoadBalancerApiInterface
     */
    updateLoadBalancerRaw(requestParameters: UpdateLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateLoadBalancerResponse>>;
    /**
     * Modifies the specified attribute of a load balancer. You can specify only one attribute at a time.<br /><br />  You can set a new SSL certificate to an SSL or HTTPS listener of a load balancer.<br /> This certificate replaces any certificate used on the same load balancer and port.<br /><br />  You can also replace the currently enabled policy for the load balancer with another one.<br /> If the `PolicyNames` parameter is empty, the currently enabled policy is disabled.
     */
    updateLoadBalancer(requestParameters: UpdateLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateLoadBalancerResponse>;
}
/**
 *
 */
export declare class LoadBalancerApi extends runtime.BaseAPI implements LoadBalancerApiInterface {
    /**
     * Creates a load balancer.<br /> The load balancer is created with a unique Domain Name Service (DNS) name. It receives the incoming traffic and routes it to its registered virtual machines (VMs).<br /> By default, this action creates an Internet-facing load balancer, resolving to public IPs. To create an internal load balancer in a Net, resolving to private IPs, use the `LoadBalancerType` parameter.<br /> You must specify either the `Subnets` or the `SubregionNames` parameters.<br /><br /> For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
     */
    createLoadBalancerRaw(requestParameters: CreateLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateLoadBalancerResponse>>;
    /**
     * Creates a load balancer.<br /> The load balancer is created with a unique Domain Name Service (DNS) name. It receives the incoming traffic and routes it to its registered virtual machines (VMs).<br /> By default, this action creates an Internet-facing load balancer, resolving to public IPs. To create an internal load balancer in a Net, resolving to private IPs, use the `LoadBalancerType` parameter.<br /> You must specify either the `Subnets` or the `SubregionNames` parameters.<br /><br /> For more information, see [About Load Balancers](https://docs.outscale.com/en/userguide/About-Load-Balancers.html).
     */
    createLoadBalancer(requestParameters?: CreateLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateLoadBalancerResponse>;
    /**
     * Adds one or more tags to the specified load balancers.<br /> If a tag with the same key already exists for the load balancer, the tag value is replaced.<br /><br /> For more information, see [About Tags](https://docs.outscale.com/en/userguide/About-Tags.html).
     */
    createLoadBalancerTagsRaw(requestParameters: CreateLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateLoadBalancerTagsResponse>>;
    /**
     * Adds one or more tags to the specified load balancers.<br /> If a tag with the same key already exists for the load balancer, the tag value is replaced.<br /><br /> For more information, see [About Tags](https://docs.outscale.com/en/userguide/About-Tags.html).
     */
    createLoadBalancerTags(requestParameters?: CreateLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateLoadBalancerTagsResponse>;
    /**
     * Deletes a specified load balancer.
     */
    deleteLoadBalancerRaw(requestParameters: DeleteLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteLoadBalancerResponse>>;
    /**
     * Deletes a specified load balancer.
     */
    deleteLoadBalancer(requestParameters?: DeleteLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteLoadBalancerResponse>;
    /**
     * Deletes one or more tags from the specified load balancers.
     */
    deleteLoadBalancerTagsRaw(requestParameters: DeleteLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteLoadBalancerTagsResponse>>;
    /**
     * Deletes one or more tags from the specified load balancers.
     */
    deleteLoadBalancerTags(requestParameters?: DeleteLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteLoadBalancerTagsResponse>;
    /**
     * > [WARNING]<br /> > Deprecated: This call is deprecated and will be removed.<br />  Deregisters a specified virtual machine (VM) from a load balancer.
     */
    deregisterVmsInLoadBalancerRaw(requestParameters: DeregisterVmsInLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeregisterVmsInLoadBalancerResponse>>;
    /**
     * > [WARNING]<br /> > Deprecated: This call is deprecated and will be removed.<br />  Deregisters a specified virtual machine (VM) from a load balancer.
     */
    deregisterVmsInLoadBalancer(requestParameters?: DeregisterVmsInLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeregisterVmsInLoadBalancerResponse>;
    /**
     * Attaches one or more virtual machines (VMs) to a specified load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.<br /> The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
     */
    linkLoadBalancerBackendMachinesRaw(requestParameters: LinkLoadBalancerBackendMachinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkLoadBalancerBackendMachinesResponse>>;
    /**
     * Attaches one or more virtual machines (VMs) to a specified load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.<br /> The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
     */
    linkLoadBalancerBackendMachines(requestParameters?: LinkLoadBalancerBackendMachinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkLoadBalancerBackendMachinesResponse>;
    /**
     * Lists the tags associated with one or more specified load balancers.
     */
    readLoadBalancerTagsRaw(requestParameters: ReadLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadLoadBalancerTagsResponse>>;
    /**
     * Lists the tags associated with one or more specified load balancers.
     */
    readLoadBalancerTags(requestParameters?: ReadLoadBalancerTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadLoadBalancerTagsResponse>;
    /**
     * Lists one or more load balancers and their attributes.
     */
    readLoadBalancersRaw(requestParameters: ReadLoadBalancersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadLoadBalancersResponse>>;
    /**
     * Lists one or more load balancers and their attributes.
     */
    readLoadBalancers(requestParameters?: ReadLoadBalancersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadLoadBalancersResponse>;
    /**
     * Lists the state of one or more backend virtual machines (VMs) registered with a specified load balancer.
     */
    readVmsHealthRaw(requestParameters: ReadVmsHealthOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVmsHealthResponse>>;
    /**
     * Lists the state of one or more backend virtual machines (VMs) registered with a specified load balancer.
     */
    readVmsHealth(requestParameters?: ReadVmsHealthOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVmsHealthResponse>;
    /**
     * > [WARNING]<br /> > Deprecated: This call is deprecated and will be removed.<br />  Registers one or more virtual machines (VMs) with a specified load balancer.<br /> The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
     */
    registerVmsInLoadBalancerRaw(requestParameters: RegisterVmsInLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RegisterVmsInLoadBalancerResponse>>;
    /**
     * > [WARNING]<br /> > Deprecated: This call is deprecated and will be removed.<br />  Registers one or more virtual machines (VMs) with a specified load balancer.<br /> The VMs can be in different Subnets and different Subregions than the load balancer, as long as the VMs and load balancers are all in the public Cloud or all in the same Net. It may take a little time for a VM to be registered with the load balancer. Once the VM is registered with a load balancer, it receives traffic and requests from this load balancer and is called a backend VM.
     */
    registerVmsInLoadBalancer(requestParameters?: RegisterVmsInLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RegisterVmsInLoadBalancerResponse>;
    /**
     * Detaches one or more backend virtual machines (VMs) from a load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.
     */
    unlinkLoadBalancerBackendMachinesRaw(requestParameters: UnlinkLoadBalancerBackendMachinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkLoadBalancerBackendMachinesResponse>>;
    /**
     * Detaches one or more backend virtual machines (VMs) from a load balancer. You need to specify at least the `BackendIps` or the `BackendVmIds` parameter.
     */
    unlinkLoadBalancerBackendMachines(requestParameters?: UnlinkLoadBalancerBackendMachinesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkLoadBalancerBackendMachinesResponse>;
    /**
     * Modifies the specified attribute of a load balancer. You can specify only one attribute at a time.<br /><br />  You can set a new SSL certificate to an SSL or HTTPS listener of a load balancer.<br /> This certificate replaces any certificate used on the same load balancer and port.<br /><br />  You can also replace the currently enabled policy for the load balancer with another one.<br /> If the `PolicyNames` parameter is empty, the currently enabled policy is disabled.
     */
    updateLoadBalancerRaw(requestParameters: UpdateLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateLoadBalancerResponse>>;
    /**
     * Modifies the specified attribute of a load balancer. You can specify only one attribute at a time.<br /><br />  You can set a new SSL certificate to an SSL or HTTPS listener of a load balancer.<br /> This certificate replaces any certificate used on the same load balancer and port.<br /><br />  You can also replace the currently enabled policy for the load balancer with another one.<br /> If the `PolicyNames` parameter is empty, the currently enabled policy is disabled.
     */
    updateLoadBalancer(requestParameters?: UpdateLoadBalancerOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateLoadBalancerResponse>;
}
