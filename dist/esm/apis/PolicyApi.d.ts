/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of this API is also available for download: <button>[GitHub repository](https://github.com/outscale/osc-api)</button><br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.35.5
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { CreatePolicyRequest, CreatePolicyResponse, CreatePolicyVersionRequest, CreatePolicyVersionResponse, DeletePolicyRequest, DeletePolicyResponse, DeletePolicyVersionRequest, DeletePolicyVersionResponse, DeleteUserGroupPolicyRequest, DeleteUserGroupPolicyResponse, DeleteUserPolicyRequest, DeleteUserPolicyResponse, LinkManagedPolicyToUserGroupRequest, LinkManagedPolicyToUserGroupResponse, LinkPolicyRequest, LinkPolicyResponse, PutUserGroupPolicyRequest, PutUserGroupPolicyResponse, PutUserPolicyRequest, PutUserPolicyResponse, ReadEntitiesLinkedToPolicyRequest, ReadEntitiesLinkedToPolicyResponse, ReadLinkedPoliciesRequest, ReadLinkedPoliciesResponse, ReadManagedPoliciesLinkedToUserGroupRequest, ReadManagedPoliciesLinkedToUserGroupResponse, ReadPoliciesRequest, ReadPoliciesResponse, ReadPolicyRequest, ReadPolicyResponse, ReadPolicyVersionRequest, ReadPolicyVersionResponse, ReadPolicyVersionsRequest, ReadPolicyVersionsResponse, ReadUserGroupPoliciesRequest, ReadUserGroupPoliciesResponse, ReadUserGroupPolicyRequest, ReadUserGroupPolicyResponse, ReadUserPoliciesRequest, ReadUserPoliciesResponse, ReadUserPolicyRequest, ReadUserPolicyResponse, SetDefaultPolicyVersionRequest, SetDefaultPolicyVersionResponse, UnlinkManagedPolicyFromUserGroupRequest, UnlinkManagedPolicyFromUserGroupResponse, UnlinkPolicyRequest, UnlinkPolicyResponse } from '../models';
export interface CreatePolicyOperationRequest {
    createPolicyRequest?: CreatePolicyRequest;
}
export interface CreatePolicyVersionOperationRequest {
    createPolicyVersionRequest?: CreatePolicyVersionRequest;
}
export interface DeletePolicyOperationRequest {
    deletePolicyRequest?: DeletePolicyRequest;
}
export interface DeletePolicyVersionOperationRequest {
    deletePolicyVersionRequest?: DeletePolicyVersionRequest;
}
export interface DeleteUserGroupPolicyOperationRequest {
    deleteUserGroupPolicyRequest?: DeleteUserGroupPolicyRequest;
}
export interface DeleteUserPolicyOperationRequest {
    deleteUserPolicyRequest?: DeleteUserPolicyRequest;
}
export interface LinkManagedPolicyToUserGroupOperationRequest {
    linkManagedPolicyToUserGroupRequest?: LinkManagedPolicyToUserGroupRequest;
}
export interface LinkPolicyOperationRequest {
    linkPolicyRequest?: LinkPolicyRequest;
}
export interface PutUserGroupPolicyOperationRequest {
    putUserGroupPolicyRequest?: PutUserGroupPolicyRequest;
}
export interface PutUserPolicyOperationRequest {
    putUserPolicyRequest?: PutUserPolicyRequest;
}
export interface ReadEntitiesLinkedToPolicyOperationRequest {
    readEntitiesLinkedToPolicyRequest?: ReadEntitiesLinkedToPolicyRequest;
}
export interface ReadLinkedPoliciesOperationRequest {
    readLinkedPoliciesRequest?: ReadLinkedPoliciesRequest;
}
export interface ReadManagedPoliciesLinkedToUserGroupOperationRequest {
    readManagedPoliciesLinkedToUserGroupRequest?: ReadManagedPoliciesLinkedToUserGroupRequest;
}
export interface ReadPoliciesOperationRequest {
    readPoliciesRequest?: ReadPoliciesRequest;
}
export interface ReadPolicyOperationRequest {
    readPolicyRequest?: ReadPolicyRequest;
}
export interface ReadPolicyVersionOperationRequest {
    readPolicyVersionRequest?: ReadPolicyVersionRequest;
}
export interface ReadPolicyVersionsOperationRequest {
    readPolicyVersionsRequest?: ReadPolicyVersionsRequest;
}
export interface ReadUserGroupPoliciesOperationRequest {
    readUserGroupPoliciesRequest?: ReadUserGroupPoliciesRequest;
}
export interface ReadUserGroupPolicyOperationRequest {
    readUserGroupPolicyRequest?: ReadUserGroupPolicyRequest;
}
export interface ReadUserPoliciesOperationRequest {
    readUserPoliciesRequest?: ReadUserPoliciesRequest;
}
export interface ReadUserPolicyOperationRequest {
    readUserPolicyRequest?: ReadUserPolicyRequest;
}
export interface SetDefaultPolicyVersionOperationRequest {
    setDefaultPolicyVersionRequest?: SetDefaultPolicyVersionRequest;
}
export interface UnlinkManagedPolicyFromUserGroupOperationRequest {
    unlinkManagedPolicyFromUserGroupRequest?: UnlinkManagedPolicyFromUserGroupRequest;
}
export interface UnlinkPolicyOperationRequest {
    unlinkPolicyRequest?: UnlinkPolicyRequest;
}
/**
 * PolicyApi - interface
 *
 * @export
 * @interface PolicyApiInterface
 */
export interface PolicyApiInterface {
    /**
     * Creates a managed policy to apply to a user.<br /> This action creates a policy version and sets v1 as the default one.
     * @param {CreatePolicyRequest} [createPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    createPolicyRaw(requestParameters: CreatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePolicyResponse>>;
    /**
     * Creates a managed policy to apply to a user.<br /> This action creates a policy version and sets v1 as the default one.
     */
    createPolicy(requestParameters: CreatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePolicyResponse>;
    /**
     * Creates a version of a specified managed policy.<br /> A managed policy can have up to five versions.
     * @param {CreatePolicyVersionRequest} [createPolicyVersionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    createPolicyVersionRaw(requestParameters: CreatePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePolicyVersionResponse>>;
    /**
     * Creates a version of a specified managed policy.<br /> A managed policy can have up to five versions.
     */
    createPolicyVersion(requestParameters: CreatePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePolicyVersionResponse>;
    /**
     * Deletes a managed policy.<br /> Before deleting a managed policy, you must unlink all users linked to it and delete all the versions of the policy, except the default one, using the `DeletePolicyVersion` method.
     * @param {DeletePolicyRequest} [deletePolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    deletePolicyRaw(requestParameters: DeletePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePolicyResponse>>;
    /**
     * Deletes a managed policy.<br /> Before deleting a managed policy, you must unlink all users linked to it and delete all the versions of the policy, except the default one, using the `DeletePolicyVersion` method.
     */
    deletePolicy(requestParameters: DeletePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePolicyResponse>;
    /**
     * Deletes a specified version of a managed policy, if it is not set as the default one.
     * @param {DeletePolicyVersionRequest} [deletePolicyVersionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    deletePolicyVersionRaw(requestParameters: DeletePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePolicyVersionResponse>>;
    /**
     * Deletes a specified version of a managed policy, if it is not set as the default one.
     */
    deletePolicyVersion(requestParameters: DeletePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePolicyVersionResponse>;
    /**
     * Deletes a specified inline policy from a specific group.
     * @param {DeleteUserGroupPolicyRequest} [deleteUserGroupPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    deleteUserGroupPolicyRaw(requestParameters: DeleteUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteUserGroupPolicyResponse>>;
    /**
     * Deletes a specified inline policy from a specific group.
     */
    deleteUserGroupPolicy(requestParameters: DeleteUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteUserGroupPolicyResponse>;
    /**
     * Deletes a specified inline policy from a specific user.
     * @param {DeleteUserPolicyRequest} [deleteUserPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    deleteUserPolicyRaw(requestParameters: DeleteUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteUserPolicyResponse>>;
    /**
     * Deletes a specified inline policy from a specific user.
     */
    deleteUserPolicy(requestParameters: DeleteUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteUserPolicyResponse>;
    /**
     * Links a managed policy to a specific group. This policy applies to all the users contained in this group.
     * @param {LinkManagedPolicyToUserGroupRequest} [linkManagedPolicyToUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    linkManagedPolicyToUserGroupRaw(requestParameters: LinkManagedPolicyToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkManagedPolicyToUserGroupResponse>>;
    /**
     * Links a managed policy to a specific group. This policy applies to all the users contained in this group.
     */
    linkManagedPolicyToUserGroup(requestParameters: LinkManagedPolicyToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkManagedPolicyToUserGroupResponse>;
    /**
     * Links a managed policy to a specific user.
     * @param {LinkPolicyRequest} [linkPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    linkPolicyRaw(requestParameters: LinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkPolicyResponse>>;
    /**
     * Links a managed policy to a specific user.
     */
    linkPolicy(requestParameters: LinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkPolicyResponse>;
    /**
     * Creates or updates an inline policy included in a specified group.<br /> The policy is automatically applied to all the users of the group after its creation.
     * @param {PutUserGroupPolicyRequest} [putUserGroupPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    putUserGroupPolicyRaw(requestParameters: PutUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PutUserGroupPolicyResponse>>;
    /**
     * Creates or updates an inline policy included in a specified group.<br /> The policy is automatically applied to all the users of the group after its creation.
     */
    putUserGroupPolicy(requestParameters: PutUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PutUserGroupPolicyResponse>;
    /**
     * Creates or updates an inline policy included in a specified user.<br /> The policy is automatically applied to the user after its creation.
     * @param {PutUserPolicyRequest} [putUserPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    putUserPolicyRaw(requestParameters: PutUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PutUserPolicyResponse>>;
    /**
     * Creates or updates an inline policy included in a specified user.<br /> The policy is automatically applied to the user after its creation.
     */
    putUserPolicy(requestParameters: PutUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PutUserPolicyResponse>;
    /**
     * Lists all entities (account, users, or user groups) linked to a specific managed policy.
     * @param {ReadEntitiesLinkedToPolicyRequest} [readEntitiesLinkedToPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readEntitiesLinkedToPolicyRaw(requestParameters: ReadEntitiesLinkedToPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadEntitiesLinkedToPolicyResponse>>;
    /**
     * Lists all entities (account, users, or user groups) linked to a specific managed policy.
     */
    readEntitiesLinkedToPolicy(requestParameters: ReadEntitiesLinkedToPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadEntitiesLinkedToPolicyResponse>;
    /**
     * Lists the managed policies linked to a specified user.
     * @param {ReadLinkedPoliciesRequest} [readLinkedPoliciesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readLinkedPoliciesRaw(requestParameters: ReadLinkedPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadLinkedPoliciesResponse>>;
    /**
     * Lists the managed policies linked to a specified user.
     */
    readLinkedPolicies(requestParameters: ReadLinkedPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadLinkedPoliciesResponse>;
    /**
     * Lists the managed policies linked to a specified group.
     * @param {ReadManagedPoliciesLinkedToUserGroupRequest} [readManagedPoliciesLinkedToUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readManagedPoliciesLinkedToUserGroupRaw(requestParameters: ReadManagedPoliciesLinkedToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadManagedPoliciesLinkedToUserGroupResponse>>;
    /**
     * Lists the managed policies linked to a specified group.
     */
    readManagedPoliciesLinkedToUserGroup(requestParameters: ReadManagedPoliciesLinkedToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadManagedPoliciesLinkedToUserGroupResponse>;
    /**
     * Lists all the managed policies available for your account.
     * @param {ReadPoliciesRequest} [readPoliciesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readPoliciesRaw(requestParameters: ReadPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPoliciesResponse>>;
    /**
     * Lists all the managed policies available for your account.
     */
    readPolicies(requestParameters: ReadPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPoliciesResponse>;
    /**
     * Lists information about a specified managed policy.
     * @param {ReadPolicyRequest} [readPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readPolicyRaw(requestParameters: ReadPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyResponse>>;
    /**
     * Lists information about a specified managed policy.
     */
    readPolicy(requestParameters: ReadPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyResponse>;
    /**
     * Lists information about a specified version of a managed policy.
     * @param {ReadPolicyVersionRequest} [readPolicyVersionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readPolicyVersionRaw(requestParameters: ReadPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyVersionResponse>>;
    /**
     * Lists information about a specified version of a managed policy.
     */
    readPolicyVersion(requestParameters: ReadPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyVersionResponse>;
    /**
     * Lists information about all the policy versions of a specified managed policy.
     * @param {ReadPolicyVersionsRequest} [readPolicyVersionsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readPolicyVersionsRaw(requestParameters: ReadPolicyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyVersionsResponse>>;
    /**
     * Lists information about all the policy versions of a specified managed policy.
     */
    readPolicyVersions(requestParameters: ReadPolicyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyVersionsResponse>;
    /**
     * Lists the names of the inline policies embedded in a specific group.
     * @param {ReadUserGroupPoliciesRequest} [readUserGroupPoliciesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readUserGroupPoliciesRaw(requestParameters: ReadUserGroupPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupPoliciesResponse>>;
    /**
     * Lists the names of the inline policies embedded in a specific group.
     */
    readUserGroupPolicies(requestParameters: ReadUserGroupPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupPoliciesResponse>;
    /**
     * Returns information about an inline policy included in a specified group.
     * @param {ReadUserGroupPolicyRequest} [readUserGroupPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readUserGroupPolicyRaw(requestParameters: ReadUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupPolicyResponse>>;
    /**
     * Returns information about an inline policy included in a specified group.
     */
    readUserGroupPolicy(requestParameters: ReadUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupPolicyResponse>;
    /**
     * Lists the names of inline policies included in a specified user.
     * @param {ReadUserPoliciesRequest} [readUserPoliciesRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readUserPoliciesRaw(requestParameters: ReadUserPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserPoliciesResponse>>;
    /**
     * Lists the names of inline policies included in a specified user.
     */
    readUserPolicies(requestParameters: ReadUserPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserPoliciesResponse>;
    /**
     * Returns information about an inline policy included in a specified user.
     * @param {ReadUserPolicyRequest} [readUserPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readUserPolicyRaw(requestParameters: ReadUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserPolicyResponse>>;
    /**
     * Returns information about an inline policy included in a specified user.
     */
    readUserPolicy(requestParameters: ReadUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserPolicyResponse>;
    /**
     * Sets a specified version of a managed policy as the default (operative) one.<br /> You can modify the default version of a policy at any time.
     * @param {SetDefaultPolicyVersionRequest} [setDefaultPolicyVersionRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    setDefaultPolicyVersionRaw(requestParameters: SetDefaultPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SetDefaultPolicyVersionResponse>>;
    /**
     * Sets a specified version of a managed policy as the default (operative) one.<br /> You can modify the default version of a policy at any time.
     */
    setDefaultPolicyVersion(requestParameters: SetDefaultPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SetDefaultPolicyVersionResponse>;
    /**
     * Unlinks a managed policy from a specific group.
     * @param {UnlinkManagedPolicyFromUserGroupRequest} [unlinkManagedPolicyFromUserGroupRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    unlinkManagedPolicyFromUserGroupRaw(requestParameters: UnlinkManagedPolicyFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkManagedPolicyFromUserGroupResponse>>;
    /**
     * Unlinks a managed policy from a specific group.
     */
    unlinkManagedPolicyFromUserGroup(requestParameters: UnlinkManagedPolicyFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkManagedPolicyFromUserGroupResponse>;
    /**
     * Removes a managed policy from a specific user.
     * @param {UnlinkPolicyRequest} [unlinkPolicyRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    unlinkPolicyRaw(requestParameters: UnlinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkPolicyResponse>>;
    /**
     * Removes a managed policy from a specific user.
     */
    unlinkPolicy(requestParameters: UnlinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkPolicyResponse>;
}
/**
 *
 */
export declare class PolicyApi extends runtime.BaseAPI implements PolicyApiInterface {
    /**
     * Creates a managed policy to apply to a user.<br /> This action creates a policy version and sets v1 as the default one.
     */
    createPolicyRaw(requestParameters: CreatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePolicyResponse>>;
    /**
     * Creates a managed policy to apply to a user.<br /> This action creates a policy version and sets v1 as the default one.
     */
    createPolicy(requestParameters?: CreatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePolicyResponse>;
    /**
     * Creates a version of a specified managed policy.<br /> A managed policy can have up to five versions.
     */
    createPolicyVersionRaw(requestParameters: CreatePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePolicyVersionResponse>>;
    /**
     * Creates a version of a specified managed policy.<br /> A managed policy can have up to five versions.
     */
    createPolicyVersion(requestParameters?: CreatePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePolicyVersionResponse>;
    /**
     * Deletes a managed policy.<br /> Before deleting a managed policy, you must unlink all users linked to it and delete all the versions of the policy, except the default one, using the `DeletePolicyVersion` method.
     */
    deletePolicyRaw(requestParameters: DeletePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePolicyResponse>>;
    /**
     * Deletes a managed policy.<br /> Before deleting a managed policy, you must unlink all users linked to it and delete all the versions of the policy, except the default one, using the `DeletePolicyVersion` method.
     */
    deletePolicy(requestParameters?: DeletePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePolicyResponse>;
    /**
     * Deletes a specified version of a managed policy, if it is not set as the default one.
     */
    deletePolicyVersionRaw(requestParameters: DeletePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePolicyVersionResponse>>;
    /**
     * Deletes a specified version of a managed policy, if it is not set as the default one.
     */
    deletePolicyVersion(requestParameters?: DeletePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePolicyVersionResponse>;
    /**
     * Deletes a specified inline policy from a specific group.
     */
    deleteUserGroupPolicyRaw(requestParameters: DeleteUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteUserGroupPolicyResponse>>;
    /**
     * Deletes a specified inline policy from a specific group.
     */
    deleteUserGroupPolicy(requestParameters?: DeleteUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteUserGroupPolicyResponse>;
    /**
     * Deletes a specified inline policy from a specific user.
     */
    deleteUserPolicyRaw(requestParameters: DeleteUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteUserPolicyResponse>>;
    /**
     * Deletes a specified inline policy from a specific user.
     */
    deleteUserPolicy(requestParameters?: DeleteUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteUserPolicyResponse>;
    /**
     * Links a managed policy to a specific group. This policy applies to all the users contained in this group.
     */
    linkManagedPolicyToUserGroupRaw(requestParameters: LinkManagedPolicyToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkManagedPolicyToUserGroupResponse>>;
    /**
     * Links a managed policy to a specific group. This policy applies to all the users contained in this group.
     */
    linkManagedPolicyToUserGroup(requestParameters?: LinkManagedPolicyToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkManagedPolicyToUserGroupResponse>;
    /**
     * Links a managed policy to a specific user.
     */
    linkPolicyRaw(requestParameters: LinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkPolicyResponse>>;
    /**
     * Links a managed policy to a specific user.
     */
    linkPolicy(requestParameters?: LinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkPolicyResponse>;
    /**
     * Creates or updates an inline policy included in a specified group.<br /> The policy is automatically applied to all the users of the group after its creation.
     */
    putUserGroupPolicyRaw(requestParameters: PutUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PutUserGroupPolicyResponse>>;
    /**
     * Creates or updates an inline policy included in a specified group.<br /> The policy is automatically applied to all the users of the group after its creation.
     */
    putUserGroupPolicy(requestParameters?: PutUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PutUserGroupPolicyResponse>;
    /**
     * Creates or updates an inline policy included in a specified user.<br /> The policy is automatically applied to the user after its creation.
     */
    putUserPolicyRaw(requestParameters: PutUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PutUserPolicyResponse>>;
    /**
     * Creates or updates an inline policy included in a specified user.<br /> The policy is automatically applied to the user after its creation.
     */
    putUserPolicy(requestParameters?: PutUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PutUserPolicyResponse>;
    /**
     * Lists all entities (account, users, or user groups) linked to a specific managed policy.
     */
    readEntitiesLinkedToPolicyRaw(requestParameters: ReadEntitiesLinkedToPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadEntitiesLinkedToPolicyResponse>>;
    /**
     * Lists all entities (account, users, or user groups) linked to a specific managed policy.
     */
    readEntitiesLinkedToPolicy(requestParameters?: ReadEntitiesLinkedToPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadEntitiesLinkedToPolicyResponse>;
    /**
     * Lists the managed policies linked to a specified user.
     */
    readLinkedPoliciesRaw(requestParameters: ReadLinkedPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadLinkedPoliciesResponse>>;
    /**
     * Lists the managed policies linked to a specified user.
     */
    readLinkedPolicies(requestParameters?: ReadLinkedPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadLinkedPoliciesResponse>;
    /**
     * Lists the managed policies linked to a specified group.
     */
    readManagedPoliciesLinkedToUserGroupRaw(requestParameters: ReadManagedPoliciesLinkedToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadManagedPoliciesLinkedToUserGroupResponse>>;
    /**
     * Lists the managed policies linked to a specified group.
     */
    readManagedPoliciesLinkedToUserGroup(requestParameters?: ReadManagedPoliciesLinkedToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadManagedPoliciesLinkedToUserGroupResponse>;
    /**
     * Lists all the managed policies available for your account.
     */
    readPoliciesRaw(requestParameters: ReadPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPoliciesResponse>>;
    /**
     * Lists all the managed policies available for your account.
     */
    readPolicies(requestParameters?: ReadPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPoliciesResponse>;
    /**
     * Lists information about a specified managed policy.
     */
    readPolicyRaw(requestParameters: ReadPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyResponse>>;
    /**
     * Lists information about a specified managed policy.
     */
    readPolicy(requestParameters?: ReadPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyResponse>;
    /**
     * Lists information about a specified version of a managed policy.
     */
    readPolicyVersionRaw(requestParameters: ReadPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyVersionResponse>>;
    /**
     * Lists information about a specified version of a managed policy.
     */
    readPolicyVersion(requestParameters?: ReadPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyVersionResponse>;
    /**
     * Lists information about all the policy versions of a specified managed policy.
     */
    readPolicyVersionsRaw(requestParameters: ReadPolicyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyVersionsResponse>>;
    /**
     * Lists information about all the policy versions of a specified managed policy.
     */
    readPolicyVersions(requestParameters?: ReadPolicyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyVersionsResponse>;
    /**
     * Lists the names of the inline policies embedded in a specific group.
     */
    readUserGroupPoliciesRaw(requestParameters: ReadUserGroupPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupPoliciesResponse>>;
    /**
     * Lists the names of the inline policies embedded in a specific group.
     */
    readUserGroupPolicies(requestParameters?: ReadUserGroupPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupPoliciesResponse>;
    /**
     * Returns information about an inline policy included in a specified group.
     */
    readUserGroupPolicyRaw(requestParameters: ReadUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupPolicyResponse>>;
    /**
     * Returns information about an inline policy included in a specified group.
     */
    readUserGroupPolicy(requestParameters?: ReadUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupPolicyResponse>;
    /**
     * Lists the names of inline policies included in a specified user.
     */
    readUserPoliciesRaw(requestParameters: ReadUserPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserPoliciesResponse>>;
    /**
     * Lists the names of inline policies included in a specified user.
     */
    readUserPolicies(requestParameters?: ReadUserPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserPoliciesResponse>;
    /**
     * Returns information about an inline policy included in a specified user.
     */
    readUserPolicyRaw(requestParameters: ReadUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserPolicyResponse>>;
    /**
     * Returns information about an inline policy included in a specified user.
     */
    readUserPolicy(requestParameters?: ReadUserPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserPolicyResponse>;
    /**
     * Sets a specified version of a managed policy as the default (operative) one.<br /> You can modify the default version of a policy at any time.
     */
    setDefaultPolicyVersionRaw(requestParameters: SetDefaultPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SetDefaultPolicyVersionResponse>>;
    /**
     * Sets a specified version of a managed policy as the default (operative) one.<br /> You can modify the default version of a policy at any time.
     */
    setDefaultPolicyVersion(requestParameters?: SetDefaultPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SetDefaultPolicyVersionResponse>;
    /**
     * Unlinks a managed policy from a specific group.
     */
    unlinkManagedPolicyFromUserGroupRaw(requestParameters: UnlinkManagedPolicyFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkManagedPolicyFromUserGroupResponse>>;
    /**
     * Unlinks a managed policy from a specific group.
     */
    unlinkManagedPolicyFromUserGroup(requestParameters?: UnlinkManagedPolicyFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkManagedPolicyFromUserGroupResponse>;
    /**
     * Removes a managed policy from a specific user.
     */
    unlinkPolicyRaw(requestParameters: UnlinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkPolicyResponse>>;
    /**
     * Removes a managed policy from a specific user.
     */
    unlinkPolicy(requestParameters?: UnlinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkPolicyResponse>;
}
