/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of this API is also available for download: <button>[GitHub repository](https://github.com/outscale/osc-api)</button><br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.35.5
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { AcceptNetPeeringRequest, AcceptNetPeeringResponse, CreateNetPeeringRequest, CreateNetPeeringResponse, DeleteNetPeeringRequest, DeleteNetPeeringResponse, ReadNetPeeringsRequest, ReadNetPeeringsResponse, RejectNetPeeringRequest, RejectNetPeeringResponse } from '../models';
export interface AcceptNetPeeringOperationRequest {
    acceptNetPeeringRequest?: AcceptNetPeeringRequest;
}
export interface CreateNetPeeringOperationRequest {
    createNetPeeringRequest?: CreateNetPeeringRequest;
}
export interface DeleteNetPeeringOperationRequest {
    deleteNetPeeringRequest?: DeleteNetPeeringRequest;
}
export interface ReadNetPeeringsOperationRequest {
    readNetPeeringsRequest?: ReadNetPeeringsRequest;
}
export interface RejectNetPeeringOperationRequest {
    rejectNetPeeringRequest?: RejectNetPeeringRequest;
}
/**
 * NetPeeringApi - interface
 *
 * @export
 * @interface NetPeeringApiInterface
 */
export interface NetPeeringApiInterface {
    /**
     * Accepts a Net peering request.<br /> To accept this request, you must be the owner of the peer Net. If you do not accept the request within 7 days, the state of the Net peering becomes `expired`.<br /><br />  **[NOTE]**<br /> A peering connection between two Nets works both ways. Therefore, when an A-to-B peering connection is accepted, any pending B-to-A peering connection is automatically rejected as redundant.
     * @param {AcceptNetPeeringRequest} [acceptNetPeeringRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    acceptNetPeeringRaw(requestParameters: AcceptNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AcceptNetPeeringResponse>>;
    /**
     * Accepts a Net peering request.<br /> To accept this request, you must be the owner of the peer Net. If you do not accept the request within 7 days, the state of the Net peering becomes `expired`.<br /><br />  **[NOTE]**<br /> A peering connection between two Nets works both ways. Therefore, when an A-to-B peering connection is accepted, any pending B-to-A peering connection is automatically rejected as redundant.
     */
    acceptNetPeering(requestParameters: AcceptNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AcceptNetPeeringResponse>;
    /**
     * Requests a Net peering between a Net you own and a peer Net that belongs to you or another account.<br /> This action creates a Net peering that remains in the `pending-acceptance` state until it is accepted by the owner of the peer Net. If the owner of the peer Net does not accept the request within 7 days, the state of the Net peering becomes `expired`. For more information, see [AcceptNetPeering](#acceptnetpeering).<br /><br />  **[IMPORTANT]**<br /> * Peered Nets must contain at least one virtual machine (VM) each before the creation of the Net peering.<br /> * The two Nets must not have overlapping IP ranges. Otherwise, the Net peering is in the `failed` state.<br /> * A peering connection between two Nets works both ways. If an A-to-B connection is already created and accepted, creating a B-to-A connection is not necessary and would be automatically rejected.  For more information, see [About Net Peerings](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).
     * @param {CreateNetPeeringRequest} [createNetPeeringRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    createNetPeeringRaw(requestParameters: CreateNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateNetPeeringResponse>>;
    /**
     * Requests a Net peering between a Net you own and a peer Net that belongs to you or another account.<br /> This action creates a Net peering that remains in the `pending-acceptance` state until it is accepted by the owner of the peer Net. If the owner of the peer Net does not accept the request within 7 days, the state of the Net peering becomes `expired`. For more information, see [AcceptNetPeering](#acceptnetpeering).<br /><br />  **[IMPORTANT]**<br /> * Peered Nets must contain at least one virtual machine (VM) each before the creation of the Net peering.<br /> * The two Nets must not have overlapping IP ranges. Otherwise, the Net peering is in the `failed` state.<br /> * A peering connection between two Nets works both ways. If an A-to-B connection is already created and accepted, creating a B-to-A connection is not necessary and would be automatically rejected.  For more information, see [About Net Peerings](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).
     */
    createNetPeering(requestParameters: CreateNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateNetPeeringResponse>;
    /**
     * Deletes a Net peering.<br /> If the Net peering is in the `active` state, it can be deleted either by the owner of the requester Net or the owner of the peer Net.<br /> If it is in the `pending-acceptance` state, it can be deleted only by the owner of the requester Net.<br /> If it is in the `rejected`, `failed`, or `expired` states, it cannot be deleted.
     * @param {DeleteNetPeeringRequest} [deleteNetPeeringRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    deleteNetPeeringRaw(requestParameters: DeleteNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteNetPeeringResponse>>;
    /**
     * Deletes a Net peering.<br /> If the Net peering is in the `active` state, it can be deleted either by the owner of the requester Net or the owner of the peer Net.<br /> If it is in the `pending-acceptance` state, it can be deleted only by the owner of the requester Net.<br /> If it is in the `rejected`, `failed`, or `expired` states, it cannot be deleted.
     */
    deleteNetPeering(requestParameters: DeleteNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteNetPeeringResponse>;
    /**
     * Lists one or more peering connections between two Nets.
     * @param {ReadNetPeeringsRequest} [readNetPeeringsRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    readNetPeeringsRaw(requestParameters: ReadNetPeeringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadNetPeeringsResponse>>;
    /**
     * Lists one or more peering connections between two Nets.
     */
    readNetPeerings(requestParameters: ReadNetPeeringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadNetPeeringsResponse>;
    /**
     * Rejects a Net peering request.<br /> The Net peering must be in the `pending-acceptance` state to be rejected. The rejected Net peering is then in the `rejected` state.
     * @param {RejectNetPeeringRequest} [rejectNetPeeringRequest]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    rejectNetPeeringRaw(requestParameters: RejectNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RejectNetPeeringResponse>>;
    /**
     * Rejects a Net peering request.<br /> The Net peering must be in the `pending-acceptance` state to be rejected. The rejected Net peering is then in the `rejected` state.
     */
    rejectNetPeering(requestParameters: RejectNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RejectNetPeeringResponse>;
}
/**
 *
 */
export declare class NetPeeringApi extends runtime.BaseAPI implements NetPeeringApiInterface {
    /**
     * Accepts a Net peering request.<br /> To accept this request, you must be the owner of the peer Net. If you do not accept the request within 7 days, the state of the Net peering becomes `expired`.<br /><br />  **[NOTE]**<br /> A peering connection between two Nets works both ways. Therefore, when an A-to-B peering connection is accepted, any pending B-to-A peering connection is automatically rejected as redundant.
     */
    acceptNetPeeringRaw(requestParameters: AcceptNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AcceptNetPeeringResponse>>;
    /**
     * Accepts a Net peering request.<br /> To accept this request, you must be the owner of the peer Net. If you do not accept the request within 7 days, the state of the Net peering becomes `expired`.<br /><br />  **[NOTE]**<br /> A peering connection between two Nets works both ways. Therefore, when an A-to-B peering connection is accepted, any pending B-to-A peering connection is automatically rejected as redundant.
     */
    acceptNetPeering(requestParameters?: AcceptNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AcceptNetPeeringResponse>;
    /**
     * Requests a Net peering between a Net you own and a peer Net that belongs to you or another account.<br /> This action creates a Net peering that remains in the `pending-acceptance` state until it is accepted by the owner of the peer Net. If the owner of the peer Net does not accept the request within 7 days, the state of the Net peering becomes `expired`. For more information, see [AcceptNetPeering](#acceptnetpeering).<br /><br />  **[IMPORTANT]**<br /> * Peered Nets must contain at least one virtual machine (VM) each before the creation of the Net peering.<br /> * The two Nets must not have overlapping IP ranges. Otherwise, the Net peering is in the `failed` state.<br /> * A peering connection between two Nets works both ways. If an A-to-B connection is already created and accepted, creating a B-to-A connection is not necessary and would be automatically rejected.  For more information, see [About Net Peerings](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).
     */
    createNetPeeringRaw(requestParameters: CreateNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateNetPeeringResponse>>;
    /**
     * Requests a Net peering between a Net you own and a peer Net that belongs to you or another account.<br /> This action creates a Net peering that remains in the `pending-acceptance` state until it is accepted by the owner of the peer Net. If the owner of the peer Net does not accept the request within 7 days, the state of the Net peering becomes `expired`. For more information, see [AcceptNetPeering](#acceptnetpeering).<br /><br />  **[IMPORTANT]**<br /> * Peered Nets must contain at least one virtual machine (VM) each before the creation of the Net peering.<br /> * The two Nets must not have overlapping IP ranges. Otherwise, the Net peering is in the `failed` state.<br /> * A peering connection between two Nets works both ways. If an A-to-B connection is already created and accepted, creating a B-to-A connection is not necessary and would be automatically rejected.  For more information, see [About Net Peerings](https://docs.outscale.com/en/userguide/About-Net-Peerings.html).
     */
    createNetPeering(requestParameters?: CreateNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateNetPeeringResponse>;
    /**
     * Deletes a Net peering.<br /> If the Net peering is in the `active` state, it can be deleted either by the owner of the requester Net or the owner of the peer Net.<br /> If it is in the `pending-acceptance` state, it can be deleted only by the owner of the requester Net.<br /> If it is in the `rejected`, `failed`, or `expired` states, it cannot be deleted.
     */
    deleteNetPeeringRaw(requestParameters: DeleteNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteNetPeeringResponse>>;
    /**
     * Deletes a Net peering.<br /> If the Net peering is in the `active` state, it can be deleted either by the owner of the requester Net or the owner of the peer Net.<br /> If it is in the `pending-acceptance` state, it can be deleted only by the owner of the requester Net.<br /> If it is in the `rejected`, `failed`, or `expired` states, it cannot be deleted.
     */
    deleteNetPeering(requestParameters?: DeleteNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteNetPeeringResponse>;
    /**
     * Lists one or more peering connections between two Nets.
     */
    readNetPeeringsRaw(requestParameters: ReadNetPeeringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadNetPeeringsResponse>>;
    /**
     * Lists one or more peering connections between two Nets.
     */
    readNetPeerings(requestParameters?: ReadNetPeeringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadNetPeeringsResponse>;
    /**
     * Rejects a Net peering request.<br /> The Net peering must be in the `pending-acceptance` state to be rejected. The rejected Net peering is then in the `rejected` state.
     */
    rejectNetPeeringRaw(requestParameters: RejectNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RejectNetPeeringResponse>>;
    /**
     * Rejects a Net peering request.<br /> The Net peering must be in the `pending-acceptance` state to be rejected. The rejected Net peering is then in the `rejected` state.
     */
    rejectNetPeering(requestParameters?: RejectNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RejectNetPeeringResponse>;
}
