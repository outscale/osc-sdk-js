/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateVmsRequest,
    CreateVmsRequestFromJSON,
    CreateVmsRequestToJSON,
    CreateVmsResponse,
    CreateVmsResponseFromJSON,
    CreateVmsResponseToJSON,
    DeleteVmsRequest,
    DeleteVmsRequestFromJSON,
    DeleteVmsRequestToJSON,
    DeleteVmsResponse,
    DeleteVmsResponseFromJSON,
    DeleteVmsResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReadAdminPasswordRequest,
    ReadAdminPasswordRequestFromJSON,
    ReadAdminPasswordRequestToJSON,
    ReadAdminPasswordResponse,
    ReadAdminPasswordResponseFromJSON,
    ReadAdminPasswordResponseToJSON,
    ReadConsoleOutputRequest,
    ReadConsoleOutputRequestFromJSON,
    ReadConsoleOutputRequestToJSON,
    ReadConsoleOutputResponse,
    ReadConsoleOutputResponseFromJSON,
    ReadConsoleOutputResponseToJSON,
    ReadVmTypesRequest,
    ReadVmTypesRequestFromJSON,
    ReadVmTypesRequestToJSON,
    ReadVmTypesResponse,
    ReadVmTypesResponseFromJSON,
    ReadVmTypesResponseToJSON,
    ReadVmsRequest,
    ReadVmsRequestFromJSON,
    ReadVmsRequestToJSON,
    ReadVmsResponse,
    ReadVmsResponseFromJSON,
    ReadVmsResponseToJSON,
    ReadVmsStateRequest,
    ReadVmsStateRequestFromJSON,
    ReadVmsStateRequestToJSON,
    ReadVmsStateResponse,
    ReadVmsStateResponseFromJSON,
    ReadVmsStateResponseToJSON,
    RebootVmsRequest,
    RebootVmsRequestFromJSON,
    RebootVmsRequestToJSON,
    RebootVmsResponse,
    RebootVmsResponseFromJSON,
    RebootVmsResponseToJSON,
    StartVmsRequest,
    StartVmsRequestFromJSON,
    StartVmsRequestToJSON,
    StartVmsResponse,
    StartVmsResponseFromJSON,
    StartVmsResponseToJSON,
    StopVmsRequest,
    StopVmsRequestFromJSON,
    StopVmsRequestToJSON,
    StopVmsResponse,
    StopVmsResponseFromJSON,
    StopVmsResponseToJSON,
    UpdateVmRequest,
    UpdateVmRequestFromJSON,
    UpdateVmRequestToJSON,
    UpdateVmResponse,
    UpdateVmResponseFromJSON,
    UpdateVmResponseToJSON,
} from '../models';

export interface CreateVmsOperationRequest {
    createVmsRequest?: CreateVmsRequest;
}

export interface DeleteVmsOperationRequest {
    deleteVmsRequest?: DeleteVmsRequest;
}

export interface ReadAdminPasswordOperationRequest {
    readAdminPasswordRequest?: ReadAdminPasswordRequest;
}

export interface ReadConsoleOutputOperationRequest {
    readConsoleOutputRequest?: ReadConsoleOutputRequest;
}

export interface ReadVmTypesOperationRequest {
    readVmTypesRequest?: ReadVmTypesRequest;
}

export interface ReadVmsOperationRequest {
    readVmsRequest?: ReadVmsRequest;
}

export interface ReadVmsStateOperationRequest {
    readVmsStateRequest?: ReadVmsStateRequest;
}

export interface RebootVmsOperationRequest {
    rebootVmsRequest?: RebootVmsRequest;
}

export interface StartVmsOperationRequest {
    startVmsRequest?: StartVmsRequest;
}

export interface StopVmsOperationRequest {
    stopVmsRequest?: StopVmsRequest;
}

export interface UpdateVmOperationRequest {
    updateVmRequest?: UpdateVmRequest;
}

/**
 * VmApi - interface
 * 
 * @export
 * @interface VmApiInterface
 */
export interface VmApiInterface {
    /**
     * 
     * @param {CreateVmsRequest} [createVmsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    createVmsRaw(requestParameters: CreateVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateVmsResponse>>;

    /**
     */
    createVms(requestParameters: CreateVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateVmsResponse>;

    /**
     * 
     * @param {DeleteVmsRequest} [deleteVmsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    deleteVmsRaw(requestParameters: DeleteVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteVmsResponse>>;

    /**
     */
    deleteVms(requestParameters: DeleteVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteVmsResponse>;

    /**
     * 
     * @param {ReadAdminPasswordRequest} [readAdminPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    readAdminPasswordRaw(requestParameters: ReadAdminPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadAdminPasswordResponse>>;

    /**
     */
    readAdminPassword(requestParameters: ReadAdminPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadAdminPasswordResponse>;

    /**
     * 
     * @param {ReadConsoleOutputRequest} [readConsoleOutputRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    readConsoleOutputRaw(requestParameters: ReadConsoleOutputOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadConsoleOutputResponse>>;

    /**
     */
    readConsoleOutput(requestParameters: ReadConsoleOutputOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadConsoleOutputResponse>;

    /**
     * 
     * @param {ReadVmTypesRequest} [readVmTypesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    readVmTypesRaw(requestParameters: ReadVmTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVmTypesResponse>>;

    /**
     */
    readVmTypes(requestParameters: ReadVmTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVmTypesResponse>;

    /**
     * 
     * @param {ReadVmsRequest} [readVmsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    readVmsRaw(requestParameters: ReadVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVmsResponse>>;

    /**
     */
    readVms(requestParameters: ReadVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVmsResponse>;

    /**
     * 
     * @param {ReadVmsStateRequest} [readVmsStateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    readVmsStateRaw(requestParameters: ReadVmsStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVmsStateResponse>>;

    /**
     */
    readVmsState(requestParameters: ReadVmsStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVmsStateResponse>;

    /**
     * 
     * @param {RebootVmsRequest} [rebootVmsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    rebootVmsRaw(requestParameters: RebootVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RebootVmsResponse>>;

    /**
     */
    rebootVms(requestParameters: RebootVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RebootVmsResponse>;

    /**
     * 
     * @param {StartVmsRequest} [startVmsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    startVmsRaw(requestParameters: StartVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StartVmsResponse>>;

    /**
     */
    startVms(requestParameters: StartVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StartVmsResponse>;

    /**
     * 
     * @param {StopVmsRequest} [stopVmsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    stopVmsRaw(requestParameters: StopVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StopVmsResponse>>;

    /**
     */
    stopVms(requestParameters: StopVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StopVmsResponse>;

    /**
     * 
     * @param {UpdateVmRequest} [updateVmRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VmApiInterface
     */
    updateVmRaw(requestParameters: UpdateVmOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateVmResponse>>;

    /**
     */
    updateVm(requestParameters: UpdateVmOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateVmResponse>;

}

/**
 * 
 */
export class VmApi extends runtime.BaseAPI implements VmApiInterface {

    /**
     */
    async createVmsRaw(requestParameters: CreateVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateVmsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateVmsRequestToJSON(requestParameters.createVmsRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVmsResponseFromJSON(jsonValue));
    }

    /**
     */
    async createVms(requestParameters: CreateVmsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateVmsResponse> {
        const response = await this.createVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteVmsRaw(requestParameters: DeleteVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteVmsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteVmsRequestToJSON(requestParameters.deleteVmsRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVmsResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteVms(requestParameters: DeleteVmsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteVmsResponse> {
        const response = await this.deleteVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readAdminPasswordRaw(requestParameters: ReadAdminPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadAdminPasswordResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadAdminPasswordRequestToJSON(requestParameters.readAdminPasswordRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadAdminPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadAdminPasswordResponseFromJSON(jsonValue));
    }

    /**
     */
    async readAdminPassword(requestParameters: ReadAdminPasswordOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadAdminPasswordResponse> {
        const response = await this.readAdminPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readConsoleOutputRaw(requestParameters: ReadConsoleOutputOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadConsoleOutputResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadConsoleOutputRequestToJSON(requestParameters.readConsoleOutputRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadConsoleOutput`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadConsoleOutputResponseFromJSON(jsonValue));
    }

    /**
     */
    async readConsoleOutput(requestParameters: ReadConsoleOutputOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadConsoleOutputResponse> {
        const response = await this.readConsoleOutputRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readVmTypesRaw(requestParameters: ReadVmTypesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVmTypesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';



        const body: any = ReadVmTypesRequestToJSON(requestParameters.readVmTypesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadVmTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmTypesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readVmTypes(requestParameters: ReadVmTypesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVmTypesResponse> {
        const response = await this.readVmTypesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readVmsRaw(requestParameters: ReadVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVmsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadVmsRequestToJSON(requestParameters.readVmsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readVms(requestParameters: ReadVmsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVmsResponse> {
        const response = await this.readVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readVmsStateRaw(requestParameters: ReadVmsStateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVmsStateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadVmsStateRequestToJSON(requestParameters.readVmsStateRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadVmsState`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVmsStateResponseFromJSON(jsonValue));
    }

    /**
     */
    async readVmsState(requestParameters: ReadVmsStateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVmsStateResponse> {
        const response = await this.readVmsStateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async rebootVmsRaw(requestParameters: RebootVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RebootVmsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = RebootVmsRequestToJSON(requestParameters.rebootVmsRequest);

        const request: runtime.RequestOpts = {
            path: `/RebootVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RebootVmsResponseFromJSON(jsonValue));
    }

    /**
     */
    async rebootVms(requestParameters: RebootVmsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RebootVmsResponse> {
        const response = await this.rebootVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async startVmsRaw(requestParameters: StartVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StartVmsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = StartVmsRequestToJSON(requestParameters.startVmsRequest);

        const request: runtime.RequestOpts = {
            path: `/StartVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StartVmsResponseFromJSON(jsonValue));
    }

    /**
     */
    async startVms(requestParameters: StartVmsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StartVmsResponse> {
        const response = await this.startVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async stopVmsRaw(requestParameters: StopVmsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<StopVmsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = StopVmsRequestToJSON(requestParameters.stopVmsRequest);

        const request: runtime.RequestOpts = {
            path: `/StopVms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StopVmsResponseFromJSON(jsonValue));
    }

    /**
     */
    async stopVms(requestParameters: StopVmsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<StopVmsResponse> {
        const response = await this.stopVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateVmRaw(requestParameters: UpdateVmOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateVmResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UpdateVmRequestToJSON(requestParameters.updateVmRequest);

        const request: runtime.RequestOpts = {
            path: `/UpdateVm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateVmResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateVm(requestParameters: UpdateVmOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateVmResponse> {
        const response = await this.updateVmRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
