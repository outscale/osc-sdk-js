/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateNicRequest,
    CreateNicRequestFromJSON,
    CreateNicRequestToJSON,
    CreateNicResponse,
    CreateNicResponseFromJSON,
    CreateNicResponseToJSON,
    DeleteNicRequest,
    DeleteNicRequestFromJSON,
    DeleteNicRequestToJSON,
    DeleteNicResponse,
    DeleteNicResponseFromJSON,
    DeleteNicResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LinkNicRequest,
    LinkNicRequestFromJSON,
    LinkNicRequestToJSON,
    LinkNicResponse,
    LinkNicResponseFromJSON,
    LinkNicResponseToJSON,
    LinkPrivateIpsRequest,
    LinkPrivateIpsRequestFromJSON,
    LinkPrivateIpsRequestToJSON,
    LinkPrivateIpsResponse,
    LinkPrivateIpsResponseFromJSON,
    LinkPrivateIpsResponseToJSON,
    ReadNicsRequest,
    ReadNicsRequestFromJSON,
    ReadNicsRequestToJSON,
    ReadNicsResponse,
    ReadNicsResponseFromJSON,
    ReadNicsResponseToJSON,
    UnlinkNicRequest,
    UnlinkNicRequestFromJSON,
    UnlinkNicRequestToJSON,
    UnlinkNicResponse,
    UnlinkNicResponseFromJSON,
    UnlinkNicResponseToJSON,
    UnlinkPrivateIpsRequest,
    UnlinkPrivateIpsRequestFromJSON,
    UnlinkPrivateIpsRequestToJSON,
    UnlinkPrivateIpsResponse,
    UnlinkPrivateIpsResponseFromJSON,
    UnlinkPrivateIpsResponseToJSON,
    UpdateNicRequest,
    UpdateNicRequestFromJSON,
    UpdateNicRequestToJSON,
    UpdateNicResponse,
    UpdateNicResponseFromJSON,
    UpdateNicResponseToJSON,
} from '../models';

export interface CreateNicOperationRequest {
    createNicRequest?: CreateNicRequest;
}

export interface DeleteNicOperationRequest {
    deleteNicRequest?: DeleteNicRequest;
}

export interface LinkNicOperationRequest {
    linkNicRequest?: LinkNicRequest;
}

export interface LinkPrivateIpsOperationRequest {
    linkPrivateIpsRequest?: LinkPrivateIpsRequest;
}

export interface ReadNicsOperationRequest {
    readNicsRequest?: ReadNicsRequest;
}

export interface UnlinkNicOperationRequest {
    unlinkNicRequest?: UnlinkNicRequest;
}

export interface UnlinkPrivateIpsOperationRequest {
    unlinkPrivateIpsRequest?: UnlinkPrivateIpsRequest;
}

export interface UpdateNicOperationRequest {
    updateNicRequest?: UpdateNicRequest;
}

/**
 * NicApi - interface
 * 
 * @export
 * @interface NicApiInterface
 */
export interface NicApiInterface {
    /**
     * 
     * @param {CreateNicRequest} [createNicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NicApiInterface
     */
    createNicRaw(requestParameters: CreateNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateNicResponse>>;

    /**
     */
    createNic(requestParameters: CreateNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateNicResponse>;

    /**
     * 
     * @param {DeleteNicRequest} [deleteNicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NicApiInterface
     */
    deleteNicRaw(requestParameters: DeleteNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteNicResponse>>;

    /**
     */
    deleteNic(requestParameters: DeleteNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteNicResponse>;

    /**
     * 
     * @param {LinkNicRequest} [linkNicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NicApiInterface
     */
    linkNicRaw(requestParameters: LinkNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkNicResponse>>;

    /**
     */
    linkNic(requestParameters: LinkNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkNicResponse>;

    /**
     * 
     * @param {LinkPrivateIpsRequest} [linkPrivateIpsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NicApiInterface
     */
    linkPrivateIpsRaw(requestParameters: LinkPrivateIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkPrivateIpsResponse>>;

    /**
     */
    linkPrivateIps(requestParameters: LinkPrivateIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkPrivateIpsResponse>;

    /**
     * 
     * @param {ReadNicsRequest} [readNicsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NicApiInterface
     */
    readNicsRaw(requestParameters: ReadNicsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadNicsResponse>>;

    /**
     */
    readNics(requestParameters: ReadNicsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadNicsResponse>;

    /**
     * 
     * @param {UnlinkNicRequest} [unlinkNicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NicApiInterface
     */
    unlinkNicRaw(requestParameters: UnlinkNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkNicResponse>>;

    /**
     */
    unlinkNic(requestParameters: UnlinkNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkNicResponse>;

    /**
     * 
     * @param {UnlinkPrivateIpsRequest} [unlinkPrivateIpsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NicApiInterface
     */
    unlinkPrivateIpsRaw(requestParameters: UnlinkPrivateIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkPrivateIpsResponse>>;

    /**
     */
    unlinkPrivateIps(requestParameters: UnlinkPrivateIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkPrivateIpsResponse>;

    /**
     * 
     * @param {UpdateNicRequest} [updateNicRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NicApiInterface
     */
    updateNicRaw(requestParameters: UpdateNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateNicResponse>>;

    /**
     */
    updateNic(requestParameters: UpdateNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateNicResponse>;

}

/**
 * 
 */
export class NicApi extends runtime.BaseAPI implements NicApiInterface {

    /**
     */
    async createNicRaw(requestParameters: CreateNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateNicResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateNicRequestToJSON(requestParameters.createNicRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNicResponseFromJSON(jsonValue));
    }

    /**
     */
    async createNic(requestParameters: CreateNicOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateNicResponse> {
        const response = await this.createNicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteNicRaw(requestParameters: DeleteNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteNicResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteNicRequestToJSON(requestParameters.deleteNicRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNicResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteNic(requestParameters: DeleteNicOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteNicResponse> {
        const response = await this.deleteNicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkNicRaw(requestParameters: LinkNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkNicResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = LinkNicRequestToJSON(requestParameters.linkNicRequest);

        const request: runtime.RequestOpts = {
            path: `/LinkNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkNicResponseFromJSON(jsonValue));
    }

    /**
     */
    async linkNic(requestParameters: LinkNicOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkNicResponse> {
        const response = await this.linkNicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkPrivateIpsRaw(requestParameters: LinkPrivateIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkPrivateIpsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = LinkPrivateIpsRequestToJSON(requestParameters.linkPrivateIpsRequest);

        const request: runtime.RequestOpts = {
            path: `/LinkPrivateIps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkPrivateIpsResponseFromJSON(jsonValue));
    }

    /**
     */
    async linkPrivateIps(requestParameters: LinkPrivateIpsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkPrivateIpsResponse> {
        const response = await this.linkPrivateIpsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readNicsRaw(requestParameters: ReadNicsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadNicsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadNicsRequestToJSON(requestParameters.readNicsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadNics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadNicsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readNics(requestParameters: ReadNicsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadNicsResponse> {
        const response = await this.readNicsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlinkNicRaw(requestParameters: UnlinkNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkNicResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UnlinkNicRequestToJSON(requestParameters.unlinkNicRequest);

        const request: runtime.RequestOpts = {
            path: `/UnlinkNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkNicResponseFromJSON(jsonValue));
    }

    /**
     */
    async unlinkNic(requestParameters: UnlinkNicOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkNicResponse> {
        const response = await this.unlinkNicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlinkPrivateIpsRaw(requestParameters: UnlinkPrivateIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkPrivateIpsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UnlinkPrivateIpsRequestToJSON(requestParameters.unlinkPrivateIpsRequest);

        const request: runtime.RequestOpts = {
            path: `/UnlinkPrivateIps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkPrivateIpsResponseFromJSON(jsonValue));
    }

    /**
     */
    async unlinkPrivateIps(requestParameters: UnlinkPrivateIpsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkPrivateIpsResponse> {
        const response = await this.unlinkPrivateIpsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateNicRaw(requestParameters: UpdateNicOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateNicResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UpdateNicRequestToJSON(requestParameters.updateNicRequest);

        const request: runtime.RequestOpts = {
            path: `/UpdateNic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateNicResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateNic(requestParameters: UpdateNicOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateNicResponse> {
        const response = await this.updateNicRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
