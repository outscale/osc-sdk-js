/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.34.3
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateServerCertificateRequest,
    CreateServerCertificateRequestFromJSON,
    CreateServerCertificateRequestToJSON,
    CreateServerCertificateResponse,
    CreateServerCertificateResponseFromJSON,
    CreateServerCertificateResponseToJSON,
    DeleteServerCertificateRequest,
    DeleteServerCertificateRequestFromJSON,
    DeleteServerCertificateRequestToJSON,
    DeleteServerCertificateResponse,
    DeleteServerCertificateResponseFromJSON,
    DeleteServerCertificateResponseToJSON,
    ReadServerCertificatesRequest,
    ReadServerCertificatesRequestFromJSON,
    ReadServerCertificatesRequestToJSON,
    ReadServerCertificatesResponse,
    ReadServerCertificatesResponseFromJSON,
    ReadServerCertificatesResponseToJSON,
    UpdateServerCertificateRequest,
    UpdateServerCertificateRequestFromJSON,
    UpdateServerCertificateRequestToJSON,
    UpdateServerCertificateResponse,
    UpdateServerCertificateResponseFromJSON,
    UpdateServerCertificateResponseToJSON,
} from '../models';

export interface CreateServerCertificateOperationRequest {
    createServerCertificateRequest?: CreateServerCertificateRequest;
}

export interface DeleteServerCertificateOperationRequest {
    deleteServerCertificateRequest?: DeleteServerCertificateRequest;
}

export interface ReadServerCertificatesOperationRequest {
    readServerCertificatesRequest?: ReadServerCertificatesRequest;
}

export interface UpdateServerCertificateOperationRequest {
    updateServerCertificateRequest?: UpdateServerCertificateRequest;
}

/**
 * ServerCertificateApi - interface
 * 
 * @export
 * @interface ServerCertificateApiInterface
 */
export interface ServerCertificateApiInterface {
    /**
     * 
     * @param {CreateServerCertificateRequest} [createServerCertificateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerCertificateApiInterface
     */
    createServerCertificateRaw(requestParameters: CreateServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateServerCertificateResponse>>;

    /**
     */
    createServerCertificate(requestParameters: CreateServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateServerCertificateResponse>;

    /**
     * 
     * @param {DeleteServerCertificateRequest} [deleteServerCertificateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerCertificateApiInterface
     */
    deleteServerCertificateRaw(requestParameters: DeleteServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteServerCertificateResponse>>;

    /**
     */
    deleteServerCertificate(requestParameters: DeleteServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteServerCertificateResponse>;

    /**
     * 
     * @param {ReadServerCertificatesRequest} [readServerCertificatesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerCertificateApiInterface
     */
    readServerCertificatesRaw(requestParameters: ReadServerCertificatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadServerCertificatesResponse>>;

    /**
     */
    readServerCertificates(requestParameters: ReadServerCertificatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadServerCertificatesResponse>;

    /**
     * 
     * @param {UpdateServerCertificateRequest} [updateServerCertificateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServerCertificateApiInterface
     */
    updateServerCertificateRaw(requestParameters: UpdateServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateServerCertificateResponse>>;

    /**
     */
    updateServerCertificate(requestParameters: UpdateServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateServerCertificateResponse>;

}

/**
 * 
 */
export class ServerCertificateApi extends runtime.BaseAPI implements ServerCertificateApiInterface {

    /**
     */
    async createServerCertificateRaw(requestParameters: CreateServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateServerCertificateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateServerCertificateRequestToJSON(requestParameters.createServerCertificateRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateServerCertificate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateServerCertificateResponseFromJSON(jsonValue));
    }

    /**
     */
    async createServerCertificate(requestParameters: CreateServerCertificateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateServerCertificateResponse> {
        const response = await this.createServerCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteServerCertificateRaw(requestParameters: DeleteServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteServerCertificateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteServerCertificateRequestToJSON(requestParameters.deleteServerCertificateRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteServerCertificate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteServerCertificateResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteServerCertificate(requestParameters: DeleteServerCertificateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteServerCertificateResponse> {
        const response = await this.deleteServerCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readServerCertificatesRaw(requestParameters: ReadServerCertificatesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadServerCertificatesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadServerCertificatesRequestToJSON(requestParameters.readServerCertificatesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadServerCertificates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadServerCertificatesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readServerCertificates(requestParameters: ReadServerCertificatesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadServerCertificatesResponse> {
        const response = await this.readServerCertificatesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateServerCertificateRaw(requestParameters: UpdateServerCertificateOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateServerCertificateResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UpdateServerCertificateRequestToJSON(requestParameters.updateServerCertificateRequest);

        const request: runtime.RequestOpts = {
            path: `/UpdateServerCertificate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateServerCertificateResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateServerCertificate(requestParameters: UpdateServerCertificateOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateServerCertificateResponse> {
        const response = await this.updateServerCertificateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
