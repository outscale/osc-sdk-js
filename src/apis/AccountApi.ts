/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CheckAuthenticationRequest,
    CheckAuthenticationRequestFromJSON,
    CheckAuthenticationRequestToJSON,
    CheckAuthenticationResponse,
    CheckAuthenticationResponseFromJSON,
    CheckAuthenticationResponseToJSON,
    CreateAccountRequest,
    CreateAccountRequestFromJSON,
    CreateAccountRequestToJSON,
    CreateAccountResponse,
    CreateAccountResponseFromJSON,
    CreateAccountResponseToJSON,
    ReadAccountsRequest,
    ReadAccountsRequestFromJSON,
    ReadAccountsRequestToJSON,
    ReadAccountsResponse,
    ReadAccountsResponseFromJSON,
    ReadAccountsResponseToJSON,
    ReadConsumptionAccountRequest,
    ReadConsumptionAccountRequestFromJSON,
    ReadConsumptionAccountRequestToJSON,
    ReadConsumptionAccountResponse,
    ReadConsumptionAccountResponseFromJSON,
    ReadConsumptionAccountResponseToJSON,
    ResetAccountPasswordRequest,
    ResetAccountPasswordRequestFromJSON,
    ResetAccountPasswordRequestToJSON,
    ResetAccountPasswordResponse,
    ResetAccountPasswordResponseFromJSON,
    ResetAccountPasswordResponseToJSON,
    SendResetPasswordEmailRequest,
    SendResetPasswordEmailRequestFromJSON,
    SendResetPasswordEmailRequestToJSON,
    SendResetPasswordEmailResponse,
    SendResetPasswordEmailResponseFromJSON,
    SendResetPasswordEmailResponseToJSON,
    UpdateAccountRequest,
    UpdateAccountRequestFromJSON,
    UpdateAccountRequestToJSON,
    UpdateAccountResponse,
    UpdateAccountResponseFromJSON,
    UpdateAccountResponseToJSON,
} from '../models';

export interface CheckAuthenticationOperationRequest {
    checkAuthenticationRequest?: CheckAuthenticationRequest;
}

export interface CreateAccountOperationRequest {
    createAccountRequest?: CreateAccountRequest;
}

export interface ReadAccountsOperationRequest {
    readAccountsRequest?: ReadAccountsRequest;
}

export interface ReadConsumptionAccountOperationRequest {
    readConsumptionAccountRequest?: ReadConsumptionAccountRequest;
}

export interface ResetAccountPasswordOperationRequest {
    resetAccountPasswordRequest?: ResetAccountPasswordRequest;
}

export interface SendResetPasswordEmailOperationRequest {
    sendResetPasswordEmailRequest?: SendResetPasswordEmailRequest;
}

export interface UpdateAccountOperationRequest {
    updateAccountRequest?: UpdateAccountRequest;
}

/**
 * AccountApi - interface
 * 
 * @export
 * @interface AccountApiInterface
 */
export interface AccountApiInterface {
    /**
     * 
     * @param {CheckAuthenticationRequest} [checkAuthenticationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    checkAuthenticationRaw(requestParameters: CheckAuthenticationOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CheckAuthenticationResponse>>;

    /**
     */
    checkAuthentication(requestParameters: CheckAuthenticationOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CheckAuthenticationResponse>;

    /**
     * 
     * @param {CreateAccountRequest} [createAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateAccountResponse>>;

    /**
     */
    createAccount(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateAccountResponse>;

    /**
     * 
     * @param {ReadAccountsRequest} [readAccountsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    readAccountsRaw(requestParameters: ReadAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadAccountsResponse>>;

    /**
     */
    readAccounts(requestParameters: ReadAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadAccountsResponse>;

    /**
     * 
     * @param {ReadConsumptionAccountRequest} [readConsumptionAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    readConsumptionAccountRaw(requestParameters: ReadConsumptionAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadConsumptionAccountResponse>>;

    /**
     */
    readConsumptionAccount(requestParameters: ReadConsumptionAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadConsumptionAccountResponse>;

    /**
     * 
     * @param {ResetAccountPasswordRequest} [resetAccountPasswordRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    resetAccountPasswordRaw(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ResetAccountPasswordResponse>>;

    /**
     */
    resetAccountPassword(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ResetAccountPasswordResponse>;

    /**
     * 
     * @param {SendResetPasswordEmailRequest} [sendResetPasswordEmailRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    sendResetPasswordEmailRaw(requestParameters: SendResetPasswordEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SendResetPasswordEmailResponse>>;

    /**
     */
    sendResetPasswordEmail(requestParameters: SendResetPasswordEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SendResetPasswordEmailResponse>;

    /**
     * 
     * @param {UpdateAccountRequest} [updateAccountRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApiInterface
     */
    updateAccountRaw(requestParameters: UpdateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateAccountResponse>>;

    /**
     */
    updateAccount(requestParameters: UpdateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateAccountResponse>;

}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI implements AccountApiInterface {

    /**
     */
    async checkAuthenticationRaw(requestParameters: CheckAuthenticationOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CheckAuthenticationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CheckAuthenticationRequestToJSON(requestParameters.checkAuthenticationRequest);

        const request: runtime.RequestOpts = {
            path: `/CheckAuthentication`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CheckAuthenticationResponseFromJSON(jsonValue));
    }

    /**
     */
    async checkAuthentication(requestParameters: CheckAuthenticationOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CheckAuthenticationResponse> {
        const response = await this.checkAuthenticationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createAccountRaw(requestParameters: CreateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateAccountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateAccountRequestToJSON(requestParameters.createAccountRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateAccountResponseFromJSON(jsonValue));
    }

    /**
     */
    async createAccount(requestParameters: CreateAccountOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateAccountResponse> {
        const response = await this.createAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readAccountsRaw(requestParameters: ReadAccountsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadAccountsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadAccountsRequestToJSON(requestParameters.readAccountsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadAccounts`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadAccountsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readAccounts(requestParameters: ReadAccountsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadAccountsResponse> {
        const response = await this.readAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readConsumptionAccountRaw(requestParameters: ReadConsumptionAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadConsumptionAccountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadConsumptionAccountRequestToJSON(requestParameters.readConsumptionAccountRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadConsumptionAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadConsumptionAccountResponseFromJSON(jsonValue));
    }

    /**
     */
    async readConsumptionAccount(requestParameters: ReadConsumptionAccountOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadConsumptionAccountResponse> {
        const response = await this.readConsumptionAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async resetAccountPasswordRaw(requestParameters: ResetAccountPasswordOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ResetAccountPasswordResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';



        const body: any = ResetAccountPasswordRequestToJSON(requestParameters.resetAccountPasswordRequest);

        const request: runtime.RequestOpts = {
            path: `/ResetAccountPassword`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ResetAccountPasswordResponseFromJSON(jsonValue));
    }

    /**
     */
    async resetAccountPassword(requestParameters: ResetAccountPasswordOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ResetAccountPasswordResponse> {
        const response = await this.resetAccountPasswordRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async sendResetPasswordEmailRaw(requestParameters: SendResetPasswordEmailOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SendResetPasswordEmailResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';



        const body: any = SendResetPasswordEmailRequestToJSON(requestParameters.sendResetPasswordEmailRequest);

        const request: runtime.RequestOpts = {
            path: `/SendResetPasswordEmail`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SendResetPasswordEmailResponseFromJSON(jsonValue));
    }

    /**
     */
    async sendResetPasswordEmail(requestParameters: SendResetPasswordEmailOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SendResetPasswordEmailResponse> {
        const response = await this.sendResetPasswordEmailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAccountRaw(requestParameters: UpdateAccountOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateAccountResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UpdateAccountRequestToJSON(requestParameters.updateAccountRequest);

        const request: runtime.RequestOpts = {
            path: `/UpdateAccount`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateAccountResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateAccount(requestParameters: UpdateAccountOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateAccountResponse> {
        const response = await this.updateAccountRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
