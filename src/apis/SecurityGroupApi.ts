/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateSecurityGroupRequest,
    CreateSecurityGroupRequestFromJSON,
    CreateSecurityGroupRequestToJSON,
    CreateSecurityGroupResponse,
    CreateSecurityGroupResponseFromJSON,
    CreateSecurityGroupResponseToJSON,
    DeleteSecurityGroupRequest,
    DeleteSecurityGroupRequestFromJSON,
    DeleteSecurityGroupRequestToJSON,
    DeleteSecurityGroupResponse,
    DeleteSecurityGroupResponseFromJSON,
    DeleteSecurityGroupResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReadSecurityGroupsRequest,
    ReadSecurityGroupsRequestFromJSON,
    ReadSecurityGroupsRequestToJSON,
    ReadSecurityGroupsResponse,
    ReadSecurityGroupsResponseFromJSON,
    ReadSecurityGroupsResponseToJSON,
} from '../models';

export interface CreateSecurityGroupOperationRequest {
    createSecurityGroupRequest?: CreateSecurityGroupRequest;
}

export interface DeleteSecurityGroupOperationRequest {
    deleteSecurityGroupRequest?: DeleteSecurityGroupRequest;
}

export interface ReadSecurityGroupsOperationRequest {
    readSecurityGroupsRequest?: ReadSecurityGroupsRequest;
}

/**
 * SecurityGroupApi - interface
 * 
 * @export
 * @interface SecurityGroupApiInterface
 */
export interface SecurityGroupApiInterface {
    /**
     * 
     * @param {CreateSecurityGroupRequest} [createSecurityGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupApiInterface
     */
    createSecurityGroupRaw(requestParameters: CreateSecurityGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateSecurityGroupResponse>>;

    /**
     */
    createSecurityGroup(requestParameters: CreateSecurityGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateSecurityGroupResponse>;

    /**
     * 
     * @param {DeleteSecurityGroupRequest} [deleteSecurityGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupApiInterface
     */
    deleteSecurityGroupRaw(requestParameters: DeleteSecurityGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteSecurityGroupResponse>>;

    /**
     */
    deleteSecurityGroup(requestParameters: DeleteSecurityGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteSecurityGroupResponse>;

    /**
     * 
     * @param {ReadSecurityGroupsRequest} [readSecurityGroupsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityGroupApiInterface
     */
    readSecurityGroupsRaw(requestParameters: ReadSecurityGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadSecurityGroupsResponse>>;

    /**
     */
    readSecurityGroups(requestParameters: ReadSecurityGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadSecurityGroupsResponse>;

}

/**
 * 
 */
export class SecurityGroupApi extends runtime.BaseAPI implements SecurityGroupApiInterface {

    /**
     */
    async createSecurityGroupRaw(requestParameters: CreateSecurityGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateSecurityGroupResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateSecurityGroupRequestToJSON(requestParameters.createSecurityGroupRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateSecurityGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSecurityGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async createSecurityGroup(requestParameters: CreateSecurityGroupOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateSecurityGroupResponse> {
        const response = await this.createSecurityGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteSecurityGroupRaw(requestParameters: DeleteSecurityGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteSecurityGroupResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteSecurityGroupRequestToJSON(requestParameters.deleteSecurityGroupRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteSecurityGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteSecurityGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteSecurityGroup(requestParameters: DeleteSecurityGroupOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteSecurityGroupResponse> {
        const response = await this.deleteSecurityGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readSecurityGroupsRaw(requestParameters: ReadSecurityGroupsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadSecurityGroupsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadSecurityGroupsRequestToJSON(requestParameters.readSecurityGroupsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadSecurityGroups`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadSecurityGroupsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readSecurityGroups(requestParameters: ReadSecurityGroupsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadSecurityGroupsResponse> {
        const response = await this.readSecurityGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
