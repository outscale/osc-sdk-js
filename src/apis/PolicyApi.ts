/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).<br /> # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.29.3
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePolicyRequest,
    CreatePolicyRequestFromJSON,
    CreatePolicyRequestToJSON,
    CreatePolicyResponse,
    CreatePolicyResponseFromJSON,
    CreatePolicyResponseToJSON,
    CreatePolicyVersionRequest,
    CreatePolicyVersionRequestFromJSON,
    CreatePolicyVersionRequestToJSON,
    CreatePolicyVersionResponse,
    CreatePolicyVersionResponseFromJSON,
    CreatePolicyVersionResponseToJSON,
    DeletePolicyRequest,
    DeletePolicyRequestFromJSON,
    DeletePolicyRequestToJSON,
    DeletePolicyResponse,
    DeletePolicyResponseFromJSON,
    DeletePolicyResponseToJSON,
    DeletePolicyVersionRequest,
    DeletePolicyVersionRequestFromJSON,
    DeletePolicyVersionRequestToJSON,
    DeletePolicyVersionResponse,
    DeletePolicyVersionResponseFromJSON,
    DeletePolicyVersionResponseToJSON,
    DeleteUserGroupPolicyRequest,
    DeleteUserGroupPolicyRequestFromJSON,
    DeleteUserGroupPolicyRequestToJSON,
    DeleteUserGroupPolicyResponse,
    DeleteUserGroupPolicyResponseFromJSON,
    DeleteUserGroupPolicyResponseToJSON,
    LinkManagedPolicyToUserGroupRequest,
    LinkManagedPolicyToUserGroupRequestFromJSON,
    LinkManagedPolicyToUserGroupRequestToJSON,
    LinkManagedPolicyToUserGroupResponse,
    LinkManagedPolicyToUserGroupResponseFromJSON,
    LinkManagedPolicyToUserGroupResponseToJSON,
    LinkPolicyRequest,
    LinkPolicyRequestFromJSON,
    LinkPolicyRequestToJSON,
    LinkPolicyResponse,
    LinkPolicyResponseFromJSON,
    LinkPolicyResponseToJSON,
    PutUserGroupPolicyRequest,
    PutUserGroupPolicyRequestFromJSON,
    PutUserGroupPolicyRequestToJSON,
    PutUserGroupPolicyResponse,
    PutUserGroupPolicyResponseFromJSON,
    PutUserGroupPolicyResponseToJSON,
    ReadLinkedPoliciesRequest,
    ReadLinkedPoliciesRequestFromJSON,
    ReadLinkedPoliciesRequestToJSON,
    ReadLinkedPoliciesResponse,
    ReadLinkedPoliciesResponseFromJSON,
    ReadLinkedPoliciesResponseToJSON,
    ReadManagedPoliciesLinkedToUserGroupRequest,
    ReadManagedPoliciesLinkedToUserGroupRequestFromJSON,
    ReadManagedPoliciesLinkedToUserGroupRequestToJSON,
    ReadManagedPoliciesLinkedToUserGroupResponse,
    ReadManagedPoliciesLinkedToUserGroupResponseFromJSON,
    ReadManagedPoliciesLinkedToUserGroupResponseToJSON,
    ReadPoliciesRequest,
    ReadPoliciesRequestFromJSON,
    ReadPoliciesRequestToJSON,
    ReadPoliciesResponse,
    ReadPoliciesResponseFromJSON,
    ReadPoliciesResponseToJSON,
    ReadPolicyRequest,
    ReadPolicyRequestFromJSON,
    ReadPolicyRequestToJSON,
    ReadPolicyResponse,
    ReadPolicyResponseFromJSON,
    ReadPolicyResponseToJSON,
    ReadPolicyVersionRequest,
    ReadPolicyVersionRequestFromJSON,
    ReadPolicyVersionRequestToJSON,
    ReadPolicyVersionResponse,
    ReadPolicyVersionResponseFromJSON,
    ReadPolicyVersionResponseToJSON,
    ReadPolicyVersionsRequest,
    ReadPolicyVersionsRequestFromJSON,
    ReadPolicyVersionsRequestToJSON,
    ReadPolicyVersionsResponse,
    ReadPolicyVersionsResponseFromJSON,
    ReadPolicyVersionsResponseToJSON,
    ReadUserGroupPoliciesRequest,
    ReadUserGroupPoliciesRequestFromJSON,
    ReadUserGroupPoliciesRequestToJSON,
    ReadUserGroupPoliciesResponse,
    ReadUserGroupPoliciesResponseFromJSON,
    ReadUserGroupPoliciesResponseToJSON,
    ReadUserGroupPolicyRequest,
    ReadUserGroupPolicyRequestFromJSON,
    ReadUserGroupPolicyRequestToJSON,
    ReadUserGroupPolicyResponse,
    ReadUserGroupPolicyResponseFromJSON,
    ReadUserGroupPolicyResponseToJSON,
    SetDefaultPolicyVersionRequest,
    SetDefaultPolicyVersionRequestFromJSON,
    SetDefaultPolicyVersionRequestToJSON,
    SetDefaultPolicyVersionResponse,
    SetDefaultPolicyVersionResponseFromJSON,
    SetDefaultPolicyVersionResponseToJSON,
    UnlinkManagedPolicyFromUserGroupRequest,
    UnlinkManagedPolicyFromUserGroupRequestFromJSON,
    UnlinkManagedPolicyFromUserGroupRequestToJSON,
    UnlinkManagedPolicyFromUserGroupResponse,
    UnlinkManagedPolicyFromUserGroupResponseFromJSON,
    UnlinkManagedPolicyFromUserGroupResponseToJSON,
    UnlinkPolicyRequest,
    UnlinkPolicyRequestFromJSON,
    UnlinkPolicyRequestToJSON,
    UnlinkPolicyResponse,
    UnlinkPolicyResponseFromJSON,
    UnlinkPolicyResponseToJSON,
} from '../models';

export interface CreatePolicyOperationRequest {
    createPolicyRequest?: CreatePolicyRequest;
}

export interface CreatePolicyVersionOperationRequest {
    createPolicyVersionRequest?: CreatePolicyVersionRequest;
}

export interface DeletePolicyOperationRequest {
    deletePolicyRequest?: DeletePolicyRequest;
}

export interface DeletePolicyVersionOperationRequest {
    deletePolicyVersionRequest?: DeletePolicyVersionRequest;
}

export interface DeleteUserGroupPolicyOperationRequest {
    deleteUserGroupPolicyRequest?: DeleteUserGroupPolicyRequest;
}

export interface LinkManagedPolicyToUserGroupOperationRequest {
    linkManagedPolicyToUserGroupRequest?: LinkManagedPolicyToUserGroupRequest;
}

export interface LinkPolicyOperationRequest {
    linkPolicyRequest?: LinkPolicyRequest;
}

export interface PutUserGroupPolicyOperationRequest {
    putUserGroupPolicyRequest?: PutUserGroupPolicyRequest;
}

export interface ReadLinkedPoliciesOperationRequest {
    readLinkedPoliciesRequest?: ReadLinkedPoliciesRequest;
}

export interface ReadManagedPoliciesLinkedToUserGroupOperationRequest {
    readManagedPoliciesLinkedToUserGroupRequest?: ReadManagedPoliciesLinkedToUserGroupRequest;
}

export interface ReadPoliciesOperationRequest {
    readPoliciesRequest?: ReadPoliciesRequest;
}

export interface ReadPolicyOperationRequest {
    readPolicyRequest?: ReadPolicyRequest;
}

export interface ReadPolicyVersionOperationRequest {
    readPolicyVersionRequest?: ReadPolicyVersionRequest;
}

export interface ReadPolicyVersionsOperationRequest {
    readPolicyVersionsRequest?: ReadPolicyVersionsRequest;
}

export interface ReadUserGroupPoliciesOperationRequest {
    readUserGroupPoliciesRequest?: ReadUserGroupPoliciesRequest;
}

export interface ReadUserGroupPolicyOperationRequest {
    readUserGroupPolicyRequest?: ReadUserGroupPolicyRequest;
}

export interface SetDefaultPolicyVersionOperationRequest {
    setDefaultPolicyVersionRequest?: SetDefaultPolicyVersionRequest;
}

export interface UnlinkManagedPolicyFromUserGroupOperationRequest {
    unlinkManagedPolicyFromUserGroupRequest?: UnlinkManagedPolicyFromUserGroupRequest;
}

export interface UnlinkPolicyOperationRequest {
    unlinkPolicyRequest?: UnlinkPolicyRequest;
}

/**
 * PolicyApi - interface
 * 
 * @export
 * @interface PolicyApiInterface
 */
export interface PolicyApiInterface {
    /**
     * 
     * @param {CreatePolicyRequest} [createPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    createPolicyRaw(requestParameters: CreatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePolicyResponse>>;

    /**
     */
    createPolicy(requestParameters: CreatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePolicyResponse>;

    /**
     * 
     * @param {CreatePolicyVersionRequest} [createPolicyVersionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    createPolicyVersionRaw(requestParameters: CreatePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePolicyVersionResponse>>;

    /**
     */
    createPolicyVersion(requestParameters: CreatePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePolicyVersionResponse>;

    /**
     * 
     * @param {DeletePolicyRequest} [deletePolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    deletePolicyRaw(requestParameters: DeletePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePolicyResponse>>;

    /**
     */
    deletePolicy(requestParameters: DeletePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePolicyResponse>;

    /**
     * 
     * @param {DeletePolicyVersionRequest} [deletePolicyVersionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    deletePolicyVersionRaw(requestParameters: DeletePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePolicyVersionResponse>>;

    /**
     */
    deletePolicyVersion(requestParameters: DeletePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePolicyVersionResponse>;

    /**
     * 
     * @param {DeleteUserGroupPolicyRequest} [deleteUserGroupPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    deleteUserGroupPolicyRaw(requestParameters: DeleteUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteUserGroupPolicyResponse>>;

    /**
     */
    deleteUserGroupPolicy(requestParameters: DeleteUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteUserGroupPolicyResponse>;

    /**
     * 
     * @param {LinkManagedPolicyToUserGroupRequest} [linkManagedPolicyToUserGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    linkManagedPolicyToUserGroupRaw(requestParameters: LinkManagedPolicyToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkManagedPolicyToUserGroupResponse>>;

    /**
     */
    linkManagedPolicyToUserGroup(requestParameters: LinkManagedPolicyToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkManagedPolicyToUserGroupResponse>;

    /**
     * 
     * @param {LinkPolicyRequest} [linkPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    linkPolicyRaw(requestParameters: LinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkPolicyResponse>>;

    /**
     */
    linkPolicy(requestParameters: LinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkPolicyResponse>;

    /**
     * 
     * @param {PutUserGroupPolicyRequest} [putUserGroupPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    putUserGroupPolicyRaw(requestParameters: PutUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PutUserGroupPolicyResponse>>;

    /**
     */
    putUserGroupPolicy(requestParameters: PutUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PutUserGroupPolicyResponse>;

    /**
     * 
     * @param {ReadLinkedPoliciesRequest} [readLinkedPoliciesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readLinkedPoliciesRaw(requestParameters: ReadLinkedPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadLinkedPoliciesResponse>>;

    /**
     */
    readLinkedPolicies(requestParameters: ReadLinkedPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadLinkedPoliciesResponse>;

    /**
     * 
     * @param {ReadManagedPoliciesLinkedToUserGroupRequest} [readManagedPoliciesLinkedToUserGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readManagedPoliciesLinkedToUserGroupRaw(requestParameters: ReadManagedPoliciesLinkedToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadManagedPoliciesLinkedToUserGroupResponse>>;

    /**
     */
    readManagedPoliciesLinkedToUserGroup(requestParameters: ReadManagedPoliciesLinkedToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadManagedPoliciesLinkedToUserGroupResponse>;

    /**
     * 
     * @param {ReadPoliciesRequest} [readPoliciesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readPoliciesRaw(requestParameters: ReadPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPoliciesResponse>>;

    /**
     */
    readPolicies(requestParameters: ReadPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPoliciesResponse>;

    /**
     * 
     * @param {ReadPolicyRequest} [readPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readPolicyRaw(requestParameters: ReadPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyResponse>>;

    /**
     */
    readPolicy(requestParameters: ReadPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyResponse>;

    /**
     * 
     * @param {ReadPolicyVersionRequest} [readPolicyVersionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readPolicyVersionRaw(requestParameters: ReadPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyVersionResponse>>;

    /**
     */
    readPolicyVersion(requestParameters: ReadPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyVersionResponse>;

    /**
     * 
     * @param {ReadPolicyVersionsRequest} [readPolicyVersionsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readPolicyVersionsRaw(requestParameters: ReadPolicyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyVersionsResponse>>;

    /**
     */
    readPolicyVersions(requestParameters: ReadPolicyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyVersionsResponse>;

    /**
     * 
     * @param {ReadUserGroupPoliciesRequest} [readUserGroupPoliciesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readUserGroupPoliciesRaw(requestParameters: ReadUserGroupPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupPoliciesResponse>>;

    /**
     */
    readUserGroupPolicies(requestParameters: ReadUserGroupPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupPoliciesResponse>;

    /**
     * 
     * @param {ReadUserGroupPolicyRequest} [readUserGroupPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    readUserGroupPolicyRaw(requestParameters: ReadUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupPolicyResponse>>;

    /**
     */
    readUserGroupPolicy(requestParameters: ReadUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupPolicyResponse>;

    /**
     * 
     * @param {SetDefaultPolicyVersionRequest} [setDefaultPolicyVersionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    setDefaultPolicyVersionRaw(requestParameters: SetDefaultPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SetDefaultPolicyVersionResponse>>;

    /**
     */
    setDefaultPolicyVersion(requestParameters: SetDefaultPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SetDefaultPolicyVersionResponse>;

    /**
     * 
     * @param {UnlinkManagedPolicyFromUserGroupRequest} [unlinkManagedPolicyFromUserGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    unlinkManagedPolicyFromUserGroupRaw(requestParameters: UnlinkManagedPolicyFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkManagedPolicyFromUserGroupResponse>>;

    /**
     */
    unlinkManagedPolicyFromUserGroup(requestParameters: UnlinkManagedPolicyFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkManagedPolicyFromUserGroupResponse>;

    /**
     * 
     * @param {UnlinkPolicyRequest} [unlinkPolicyRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PolicyApiInterface
     */
    unlinkPolicyRaw(requestParameters: UnlinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkPolicyResponse>>;

    /**
     */
    unlinkPolicy(requestParameters: UnlinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkPolicyResponse>;

}

/**
 * 
 */
export class PolicyApi extends runtime.BaseAPI implements PolicyApiInterface {

    /**
     */
    async createPolicyRaw(requestParameters: CreatePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreatePolicyRequestToJSON(requestParameters.createPolicyRequest);

        const request: runtime.RequestOpts = {
            path: `/CreatePolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async createPolicy(requestParameters: CreatePolicyOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePolicyResponse> {
        const response = await this.createPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPolicyVersionRaw(requestParameters: CreatePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePolicyVersionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreatePolicyVersionRequestToJSON(requestParameters.createPolicyVersionRequest);

        const request: runtime.RequestOpts = {
            path: `/CreatePolicyVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePolicyVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async createPolicyVersion(requestParameters: CreatePolicyVersionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePolicyVersionResponse> {
        const response = await this.createPolicyVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePolicyRaw(requestParameters: DeletePolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeletePolicyRequestToJSON(requestParameters.deletePolicyRequest);

        const request: runtime.RequestOpts = {
            path: `/DeletePolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async deletePolicy(requestParameters: DeletePolicyOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePolicyResponse> {
        const response = await this.deletePolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePolicyVersionRaw(requestParameters: DeletePolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePolicyVersionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeletePolicyVersionRequestToJSON(requestParameters.deletePolicyVersionRequest);

        const request: runtime.RequestOpts = {
            path: `/DeletePolicyVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePolicyVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async deletePolicyVersion(requestParameters: DeletePolicyVersionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePolicyVersionResponse> {
        const response = await this.deletePolicyVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteUserGroupPolicyRaw(requestParameters: DeleteUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteUserGroupPolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteUserGroupPolicyRequestToJSON(requestParameters.deleteUserGroupPolicyRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteUserGroupPolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteUserGroupPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteUserGroupPolicy(requestParameters: DeleteUserGroupPolicyOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteUserGroupPolicyResponse> {
        const response = await this.deleteUserGroupPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkManagedPolicyToUserGroupRaw(requestParameters: LinkManagedPolicyToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkManagedPolicyToUserGroupResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = LinkManagedPolicyToUserGroupRequestToJSON(requestParameters.linkManagedPolicyToUserGroupRequest);

        const request: runtime.RequestOpts = {
            path: `/LinkManagedPolicyToUserGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkManagedPolicyToUserGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async linkManagedPolicyToUserGroup(requestParameters: LinkManagedPolicyToUserGroupOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkManagedPolicyToUserGroupResponse> {
        const response = await this.linkManagedPolicyToUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkPolicyRaw(requestParameters: LinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkPolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = LinkPolicyRequestToJSON(requestParameters.linkPolicyRequest);

        const request: runtime.RequestOpts = {
            path: `/LinkPolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async linkPolicy(requestParameters: LinkPolicyOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkPolicyResponse> {
        const response = await this.linkPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async putUserGroupPolicyRaw(requestParameters: PutUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PutUserGroupPolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = PutUserGroupPolicyRequestToJSON(requestParameters.putUserGroupPolicyRequest);

        const request: runtime.RequestOpts = {
            path: `/PutUserGroupPolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutUserGroupPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async putUserGroupPolicy(requestParameters: PutUserGroupPolicyOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PutUserGroupPolicyResponse> {
        const response = await this.putUserGroupPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readLinkedPoliciesRaw(requestParameters: ReadLinkedPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadLinkedPoliciesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadLinkedPoliciesRequestToJSON(requestParameters.readLinkedPoliciesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadLinkedPolicies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadLinkedPoliciesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readLinkedPolicies(requestParameters: ReadLinkedPoliciesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadLinkedPoliciesResponse> {
        const response = await this.readLinkedPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readManagedPoliciesLinkedToUserGroupRaw(requestParameters: ReadManagedPoliciesLinkedToUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadManagedPoliciesLinkedToUserGroupResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadManagedPoliciesLinkedToUserGroupRequestToJSON(requestParameters.readManagedPoliciesLinkedToUserGroupRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadManagedPoliciesLinkedToUserGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadManagedPoliciesLinkedToUserGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async readManagedPoliciesLinkedToUserGroup(requestParameters: ReadManagedPoliciesLinkedToUserGroupOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadManagedPoliciesLinkedToUserGroupResponse> {
        const response = await this.readManagedPoliciesLinkedToUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readPoliciesRaw(requestParameters: ReadPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPoliciesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadPoliciesRequestToJSON(requestParameters.readPoliciesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadPolicies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPoliciesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readPolicies(requestParameters: ReadPoliciesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPoliciesResponse> {
        const response = await this.readPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readPolicyRaw(requestParameters: ReadPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadPolicyRequestToJSON(requestParameters.readPolicyRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadPolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async readPolicy(requestParameters: ReadPolicyOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyResponse> {
        const response = await this.readPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readPolicyVersionRaw(requestParameters: ReadPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyVersionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadPolicyVersionRequestToJSON(requestParameters.readPolicyVersionRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadPolicyVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPolicyVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async readPolicyVersion(requestParameters: ReadPolicyVersionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyVersionResponse> {
        const response = await this.readPolicyVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readPolicyVersionsRaw(requestParameters: ReadPolicyVersionsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPolicyVersionsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadPolicyVersionsRequestToJSON(requestParameters.readPolicyVersionsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadPolicyVersions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPolicyVersionsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readPolicyVersions(requestParameters: ReadPolicyVersionsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPolicyVersionsResponse> {
        const response = await this.readPolicyVersionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readUserGroupPoliciesRaw(requestParameters: ReadUserGroupPoliciesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupPoliciesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadUserGroupPoliciesRequestToJSON(requestParameters.readUserGroupPoliciesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadUserGroupPolicies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadUserGroupPoliciesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readUserGroupPolicies(requestParameters: ReadUserGroupPoliciesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupPoliciesResponse> {
        const response = await this.readUserGroupPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readUserGroupPolicyRaw(requestParameters: ReadUserGroupPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadUserGroupPolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadUserGroupPolicyRequestToJSON(requestParameters.readUserGroupPolicyRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadUserGroupPolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadUserGroupPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async readUserGroupPolicy(requestParameters: ReadUserGroupPolicyOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadUserGroupPolicyResponse> {
        const response = await this.readUserGroupPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setDefaultPolicyVersionRaw(requestParameters: SetDefaultPolicyVersionOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<SetDefaultPolicyVersionResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = SetDefaultPolicyVersionRequestToJSON(requestParameters.setDefaultPolicyVersionRequest);

        const request: runtime.RequestOpts = {
            path: `/SetDefaultPolicyVersion`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetDefaultPolicyVersionResponseFromJSON(jsonValue));
    }

    /**
     */
    async setDefaultPolicyVersion(requestParameters: SetDefaultPolicyVersionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<SetDefaultPolicyVersionResponse> {
        const response = await this.setDefaultPolicyVersionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlinkManagedPolicyFromUserGroupRaw(requestParameters: UnlinkManagedPolicyFromUserGroupOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkManagedPolicyFromUserGroupResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UnlinkManagedPolicyFromUserGroupRequestToJSON(requestParameters.unlinkManagedPolicyFromUserGroupRequest);

        const request: runtime.RequestOpts = {
            path: `/UnlinkManagedPolicyFromUserGroup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkManagedPolicyFromUserGroupResponseFromJSON(jsonValue));
    }

    /**
     */
    async unlinkManagedPolicyFromUserGroup(requestParameters: UnlinkManagedPolicyFromUserGroupOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkManagedPolicyFromUserGroupResponse> {
        const response = await this.unlinkManagedPolicyFromUserGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlinkPolicyRaw(requestParameters: UnlinkPolicyOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkPolicyResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UnlinkPolicyRequestToJSON(requestParameters.unlinkPolicyRequest);

        const request: runtime.RequestOpts = {
            path: `/UnlinkPolicy`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkPolicyResponseFromJSON(jsonValue));
    }

    /**
     */
    async unlinkPolicy(requestParameters: UnlinkPolicyOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkPolicyResponse> {
        const response = await this.unlinkPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
