/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.33.1
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateApiAccessRuleRequest,
    CreateApiAccessRuleRequestFromJSON,
    CreateApiAccessRuleRequestToJSON,
    CreateApiAccessRuleResponse,
    CreateApiAccessRuleResponseFromJSON,
    CreateApiAccessRuleResponseToJSON,
    DeleteApiAccessRuleRequest,
    DeleteApiAccessRuleRequestFromJSON,
    DeleteApiAccessRuleRequestToJSON,
    DeleteApiAccessRuleResponse,
    DeleteApiAccessRuleResponseFromJSON,
    DeleteApiAccessRuleResponseToJSON,
    ReadApiAccessRulesRequest,
    ReadApiAccessRulesRequestFromJSON,
    ReadApiAccessRulesRequestToJSON,
    ReadApiAccessRulesResponse,
    ReadApiAccessRulesResponseFromJSON,
    ReadApiAccessRulesResponseToJSON,
    UpdateApiAccessRuleRequest,
    UpdateApiAccessRuleRequestFromJSON,
    UpdateApiAccessRuleRequestToJSON,
    UpdateApiAccessRuleResponse,
    UpdateApiAccessRuleResponseFromJSON,
    UpdateApiAccessRuleResponseToJSON,
} from '../models';

export interface CreateApiAccessRuleOperationRequest {
    createApiAccessRuleRequest?: CreateApiAccessRuleRequest;
}

export interface DeleteApiAccessRuleOperationRequest {
    deleteApiAccessRuleRequest?: DeleteApiAccessRuleRequest;
}

export interface ReadApiAccessRulesOperationRequest {
    readApiAccessRulesRequest?: ReadApiAccessRulesRequest;
}

export interface UpdateApiAccessRuleOperationRequest {
    updateApiAccessRuleRequest?: UpdateApiAccessRuleRequest;
}

/**
 * ApiAccessRuleApi - interface
 * 
 * @export
 * @interface ApiAccessRuleApiInterface
 */
export interface ApiAccessRuleApiInterface {
    /**
     * 
     * @param {CreateApiAccessRuleRequest} [createApiAccessRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiAccessRuleApiInterface
     */
    createApiAccessRuleRaw(requestParameters: CreateApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateApiAccessRuleResponse>>;

    /**
     */
    createApiAccessRule(requestParameters: CreateApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateApiAccessRuleResponse>;

    /**
     * 
     * @param {DeleteApiAccessRuleRequest} [deleteApiAccessRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiAccessRuleApiInterface
     */
    deleteApiAccessRuleRaw(requestParameters: DeleteApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteApiAccessRuleResponse>>;

    /**
     */
    deleteApiAccessRule(requestParameters: DeleteApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteApiAccessRuleResponse>;

    /**
     * 
     * @param {ReadApiAccessRulesRequest} [readApiAccessRulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiAccessRuleApiInterface
     */
    readApiAccessRulesRaw(requestParameters: ReadApiAccessRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadApiAccessRulesResponse>>;

    /**
     */
    readApiAccessRules(requestParameters: ReadApiAccessRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadApiAccessRulesResponse>;

    /**
     * 
     * @param {UpdateApiAccessRuleRequest} [updateApiAccessRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiAccessRuleApiInterface
     */
    updateApiAccessRuleRaw(requestParameters: UpdateApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateApiAccessRuleResponse>>;

    /**
     */
    updateApiAccessRule(requestParameters: UpdateApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateApiAccessRuleResponse>;

}

/**
 * 
 */
export class ApiAccessRuleApi extends runtime.BaseAPI implements ApiAccessRuleApiInterface {

    /**
     */
    async createApiAccessRuleRaw(requestParameters: CreateApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateApiAccessRuleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuthSec authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }


        const body: any = CreateApiAccessRuleRequestToJSON(requestParameters.createApiAccessRuleRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateApiAccessRule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateApiAccessRuleResponseFromJSON(jsonValue));
    }

    /**
     */
    async createApiAccessRule(requestParameters: CreateApiAccessRuleOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateApiAccessRuleResponse> {
        const response = await this.createApiAccessRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteApiAccessRuleRaw(requestParameters: DeleteApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteApiAccessRuleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuthSec authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }


        const body: any = DeleteApiAccessRuleRequestToJSON(requestParameters.deleteApiAccessRuleRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteApiAccessRule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteApiAccessRuleResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteApiAccessRule(requestParameters: DeleteApiAccessRuleOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteApiAccessRuleResponse> {
        const response = await this.deleteApiAccessRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readApiAccessRulesRaw(requestParameters: ReadApiAccessRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadApiAccessRulesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuthSec authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }


        const body: any = ReadApiAccessRulesRequestToJSON(requestParameters.readApiAccessRulesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadApiAccessRules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadApiAccessRulesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readApiAccessRules(requestParameters: ReadApiAccessRulesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadApiAccessRulesResponse> {
        const response = await this.readApiAccessRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateApiAccessRuleRaw(requestParameters: UpdateApiAccessRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateApiAccessRuleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuthSec authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }


        const body: any = UpdateApiAccessRuleRequestToJSON(requestParameters.updateApiAccessRuleRequest);

        const request: runtime.RequestOpts = {
            path: `/UpdateApiAccessRule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateApiAccessRuleResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateApiAccessRule(requestParameters: UpdateApiAccessRuleOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateApiAccessRuleResponse> {
        const response = await this.updateApiAccessRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
