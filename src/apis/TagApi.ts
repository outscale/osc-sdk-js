/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateTagsRequest,
    CreateTagsRequestFromJSON,
    CreateTagsRequestToJSON,
    CreateTagsResponse,
    CreateTagsResponseFromJSON,
    CreateTagsResponseToJSON,
    DeleteTagsRequest,
    DeleteTagsRequestFromJSON,
    DeleteTagsRequestToJSON,
    DeleteTagsResponse,
    DeleteTagsResponseFromJSON,
    DeleteTagsResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReadTagsRequest,
    ReadTagsRequestFromJSON,
    ReadTagsRequestToJSON,
    ReadTagsResponse,
    ReadTagsResponseFromJSON,
    ReadTagsResponseToJSON,
} from '../models';

export interface CreateTagsOperationRequest {
    createTagsRequest?: CreateTagsRequest;
}

export interface DeleteTagsOperationRequest {
    deleteTagsRequest?: DeleteTagsRequest;
}

export interface ReadTagsOperationRequest {
    readTagsRequest?: ReadTagsRequest;
}

/**
 * TagApi - interface
 * 
 * @export
 * @interface TagApiInterface
 */
export interface TagApiInterface {
    /**
     * 
     * @param {CreateTagsRequest} [createTagsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    createTagsRaw(requestParameters: CreateTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateTagsResponse>>;

    /**
     */
    createTags(requestParameters: CreateTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateTagsResponse>;

    /**
     * 
     * @param {DeleteTagsRequest} [deleteTagsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    deleteTagsRaw(requestParameters: DeleteTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteTagsResponse>>;

    /**
     */
    deleteTags(requestParameters: DeleteTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteTagsResponse>;

    /**
     * 
     * @param {ReadTagsRequest} [readTagsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApiInterface
     */
    readTagsRaw(requestParameters: ReadTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadTagsResponse>>;

    /**
     */
    readTags(requestParameters: ReadTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadTagsResponse>;

}

/**
 * 
 */
export class TagApi extends runtime.BaseAPI implements TagApiInterface {

    /**
     */
    async createTagsRaw(requestParameters: CreateTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateTagsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateTagsRequestToJSON(requestParameters.createTagsRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTagsResponseFromJSON(jsonValue));
    }

    /**
     */
    async createTags(requestParameters: CreateTagsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateTagsResponse> {
        const response = await this.createTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTagsRaw(requestParameters: DeleteTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteTagsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteTagsRequestToJSON(requestParameters.deleteTagsRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteTagsResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteTags(requestParameters: DeleteTagsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteTagsResponse> {
        const response = await this.deleteTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readTagsRaw(requestParameters: ReadTagsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadTagsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadTagsRequestToJSON(requestParameters.readTagsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadTags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadTagsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readTags(requestParameters: ReadTagsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadTagsResponse> {
        const response = await this.readTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
