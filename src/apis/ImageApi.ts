/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.35.4
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateImageExportTaskRequest,
    CreateImageExportTaskRequestFromJSON,
    CreateImageExportTaskRequestToJSON,
    CreateImageExportTaskResponse,
    CreateImageExportTaskResponseFromJSON,
    CreateImageExportTaskResponseToJSON,
    CreateImageRequest,
    CreateImageRequestFromJSON,
    CreateImageRequestToJSON,
    CreateImageResponse,
    CreateImageResponseFromJSON,
    CreateImageResponseToJSON,
    DeleteImageRequest,
    DeleteImageRequestFromJSON,
    DeleteImageRequestToJSON,
    DeleteImageResponse,
    DeleteImageResponseFromJSON,
    DeleteImageResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReadImageExportTasksRequest,
    ReadImageExportTasksRequestFromJSON,
    ReadImageExportTasksRequestToJSON,
    ReadImageExportTasksResponse,
    ReadImageExportTasksResponseFromJSON,
    ReadImageExportTasksResponseToJSON,
    ReadImagesRequest,
    ReadImagesRequestFromJSON,
    ReadImagesRequestToJSON,
    ReadImagesResponse,
    ReadImagesResponseFromJSON,
    ReadImagesResponseToJSON,
    UpdateImageRequest,
    UpdateImageRequestFromJSON,
    UpdateImageRequestToJSON,
    UpdateImageResponse,
    UpdateImageResponseFromJSON,
    UpdateImageResponseToJSON,
} from '../models';

export interface CreateImageOperationRequest {
    createImageRequest?: CreateImageRequest;
}

export interface CreateImageExportTaskOperationRequest {
    createImageExportTaskRequest?: CreateImageExportTaskRequest;
}

export interface DeleteImageOperationRequest {
    deleteImageRequest?: DeleteImageRequest;
}

export interface ReadImageExportTasksOperationRequest {
    readImageExportTasksRequest?: ReadImageExportTasksRequest;
}

export interface ReadImagesOperationRequest {
    readImagesRequest?: ReadImagesRequest;
}

export interface UpdateImageOperationRequest {
    updateImageRequest?: UpdateImageRequest;
}

/**
 * ImageApi - interface
 * 
 * @export
 * @interface ImageApiInterface
 */
export interface ImageApiInterface {
    /**
     * Creates an OUTSCALE machine image (OMI).<br /> You can use this method for different use cases: * **Creating from a VM**: You create an OMI from one of your virtual machines (VMs).<br> * **Copying an OMI**: You copy an existing OMI. The source OMI can be one of your own OMIs, or an OMI owned by another account that has granted you permission via the [UpdateImage](#updateimage) method.<br> * **Registering from a snapshot**: You register an OMI from an existing snapshot. The source snapshot can be one of your own snapshots, or a snapshot owned by another account that has granted you permission via the [UpdateSnapshot](#updatesnapshot) method.<br> * **Registering from a bucket by using a manifest file**: You register an OMI from the manifest file of an OMI that was exported to an OUTSCALE Object Storage (OOS) bucket. First, the owner of the source OMI must export it to the bucket by using the [CreateImageExportTask](#createimageexporttask) method. Then, they must grant you permission to read the manifest file via a pre-signed URL. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).  **[TIP]**<br /> Registering from a bucket enables you to copy an OMI across Regions.  For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
     * @param {CreateImageRequest} [createImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    createImageRaw(requestParameters: CreateImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateImageResponse>>;

    /**
     * Creates an OUTSCALE machine image (OMI).<br /> You can use this method for different use cases: * **Creating from a VM**: You create an OMI from one of your virtual machines (VMs).<br> * **Copying an OMI**: You copy an existing OMI. The source OMI can be one of your own OMIs, or an OMI owned by another account that has granted you permission via the [UpdateImage](#updateimage) method.<br> * **Registering from a snapshot**: You register an OMI from an existing snapshot. The source snapshot can be one of your own snapshots, or a snapshot owned by another account that has granted you permission via the [UpdateSnapshot](#updatesnapshot) method.<br> * **Registering from a bucket by using a manifest file**: You register an OMI from the manifest file of an OMI that was exported to an OUTSCALE Object Storage (OOS) bucket. First, the owner of the source OMI must export it to the bucket by using the [CreateImageExportTask](#createimageexporttask) method. Then, they must grant you permission to read the manifest file via a pre-signed URL. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).  **[TIP]**<br /> Registering from a bucket enables you to copy an OMI across Regions.  For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
     */
    createImage(requestParameters: CreateImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateImageResponse>;

    /**
     * Exports an OUTSCALE machine image (OMI) to an OUTSCALE Object Storage (OOS) bucket.<br /> This enables you to copy an OMI between accounts in different Regions.<br /><br /> This action creates the necessary snapshots and manifest file in the bucket. The OMI can then be imported to another account using a pre-signed URL of its manifest file. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).<br /><br /> To copy an OMI in the same Region, you can also use the [CreateImage](#createimage) method.<br />  **[IMPORTANT]**<br /> You cannot export a shared or public OMI, as they do not belong to you. To do so, you must first copy it to your account. The copy then belongs to you and you can export it.<br /><br /> For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
     * @param {CreateImageExportTaskRequest} [createImageExportTaskRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    createImageExportTaskRaw(requestParameters: CreateImageExportTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateImageExportTaskResponse>>;

    /**
     * Exports an OUTSCALE machine image (OMI) to an OUTSCALE Object Storage (OOS) bucket.<br /> This enables you to copy an OMI between accounts in different Regions.<br /><br /> This action creates the necessary snapshots and manifest file in the bucket. The OMI can then be imported to another account using a pre-signed URL of its manifest file. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).<br /><br /> To copy an OMI in the same Region, you can also use the [CreateImage](#createimage) method.<br />  **[IMPORTANT]**<br /> You cannot export a shared or public OMI, as they do not belong to you. To do so, you must first copy it to your account. The copy then belongs to you and you can export it.<br /><br /> For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
     */
    createImageExportTask(requestParameters: CreateImageExportTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateImageExportTaskResponse>;

    /**
     * Deletes an OUTSCALE machine image (OMI) so that you cannot use it anymore to launch virtual machines (VMs). However, you can still use VMs already launched from this OMI.
     * @param {DeleteImageRequest} [deleteImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    deleteImageRaw(requestParameters: DeleteImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteImageResponse>>;

    /**
     * Deletes an OUTSCALE machine image (OMI) so that you cannot use it anymore to launch virtual machines (VMs). However, you can still use VMs already launched from this OMI.
     */
    deleteImage(requestParameters: DeleteImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteImageResponse>;

    /**
     * Lists one or more image export tasks.
     * @param {ReadImageExportTasksRequest} [readImageExportTasksRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    readImageExportTasksRaw(requestParameters: ReadImageExportTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadImageExportTasksResponse>>;

    /**
     * Lists one or more image export tasks.
     */
    readImageExportTasks(requestParameters: ReadImageExportTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadImageExportTasksResponse>;

    /**
     * Lists one or more OUTSCALE machine images (OMIs) you can use.
     * @param {ReadImagesRequest} [readImagesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    readImagesRaw(requestParameters: ReadImagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadImagesResponse>>;

    /**
     * Lists one or more OUTSCALE machine images (OMIs) you can use.
     */
    readImages(requestParameters: ReadImagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadImagesResponse>;

    /**
     * Modifies the access permissions for an OUTSCALE machine image (OMI).<br /> You must specify either the `Additions` or the `Removals` parameter.<br /> After sharing an OMI with an account, the other account can create a copy of it that they own. For more information about copying OMIs, see [CreateImage](#createimage).
     * @param {UpdateImageRequest} [updateImageRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApiInterface
     */
    updateImageRaw(requestParameters: UpdateImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateImageResponse>>;

    /**
     * Modifies the access permissions for an OUTSCALE machine image (OMI).<br /> You must specify either the `Additions` or the `Removals` parameter.<br /> After sharing an OMI with an account, the other account can create a copy of it that they own. For more information about copying OMIs, see [CreateImage](#createimage).
     */
    updateImage(requestParameters: UpdateImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateImageResponse>;

}

/**
 * 
 */
export class ImageApi extends runtime.BaseAPI implements ImageApiInterface {

    /**
     * Creates an OUTSCALE machine image (OMI).<br /> You can use this method for different use cases: * **Creating from a VM**: You create an OMI from one of your virtual machines (VMs).<br> * **Copying an OMI**: You copy an existing OMI. The source OMI can be one of your own OMIs, or an OMI owned by another account that has granted you permission via the [UpdateImage](#updateimage) method.<br> * **Registering from a snapshot**: You register an OMI from an existing snapshot. The source snapshot can be one of your own snapshots, or a snapshot owned by another account that has granted you permission via the [UpdateSnapshot](#updatesnapshot) method.<br> * **Registering from a bucket by using a manifest file**: You register an OMI from the manifest file of an OMI that was exported to an OUTSCALE Object Storage (OOS) bucket. First, the owner of the source OMI must export it to the bucket by using the [CreateImageExportTask](#createimageexporttask) method. Then, they must grant you permission to read the manifest file via a pre-signed URL. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).  **[TIP]**<br /> Registering from a bucket enables you to copy an OMI across Regions.  For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
     */
    async createImageRaw(requestParameters: CreateImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateImageRequestToJSON(requestParameters.createImageRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateImageResponseFromJSON(jsonValue));
    }

    /**
     * Creates an OUTSCALE machine image (OMI).<br /> You can use this method for different use cases: * **Creating from a VM**: You create an OMI from one of your virtual machines (VMs).<br> * **Copying an OMI**: You copy an existing OMI. The source OMI can be one of your own OMIs, or an OMI owned by another account that has granted you permission via the [UpdateImage](#updateimage) method.<br> * **Registering from a snapshot**: You register an OMI from an existing snapshot. The source snapshot can be one of your own snapshots, or a snapshot owned by another account that has granted you permission via the [UpdateSnapshot](#updatesnapshot) method.<br> * **Registering from a bucket by using a manifest file**: You register an OMI from the manifest file of an OMI that was exported to an OUTSCALE Object Storage (OOS) bucket. First, the owner of the source OMI must export it to the bucket by using the [CreateImageExportTask](#createimageexporttask) method. Then, they must grant you permission to read the manifest file via a pre-signed URL. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).  **[TIP]**<br /> Registering from a bucket enables you to copy an OMI across Regions.  For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
     */
    async createImage(requestParameters: CreateImageOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateImageResponse> {
        const response = await this.createImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Exports an OUTSCALE machine image (OMI) to an OUTSCALE Object Storage (OOS) bucket.<br /> This enables you to copy an OMI between accounts in different Regions.<br /><br /> This action creates the necessary snapshots and manifest file in the bucket. The OMI can then be imported to another account using a pre-signed URL of its manifest file. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).<br /><br /> To copy an OMI in the same Region, you can also use the [CreateImage](#createimage) method.<br />  **[IMPORTANT]**<br /> You cannot export a shared or public OMI, as they do not belong to you. To do so, you must first copy it to your account. The copy then belongs to you and you can export it.<br /><br /> For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
     */
    async createImageExportTaskRaw(requestParameters: CreateImageExportTaskOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateImageExportTaskResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateImageExportTaskRequestToJSON(requestParameters.createImageExportTaskRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateImageExportTask`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateImageExportTaskResponseFromJSON(jsonValue));
    }

    /**
     * Exports an OUTSCALE machine image (OMI) to an OUTSCALE Object Storage (OOS) bucket.<br /> This enables you to copy an OMI between accounts in different Regions.<br /><br /> This action creates the necessary snapshots and manifest file in the bucket. The OMI can then be imported to another account using a pre-signed URL of its manifest file. For more information, see [Creating a Pre-Signed URL](https://docs.outscale.com/en/userguide/Creating-a-Pre-Signed-URL.html).<br /><br /> To copy an OMI in the same Region, you can also use the [CreateImage](#createimage) method.<br />  **[IMPORTANT]**<br /> You cannot export a shared or public OMI, as they do not belong to you. To do so, you must first copy it to your account. The copy then belongs to you and you can export it.<br /><br /> For more information, see [About OMIs](https://docs.outscale.com/en/userguide/About-OMIs.html).
     */
    async createImageExportTask(requestParameters: CreateImageExportTaskOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateImageExportTaskResponse> {
        const response = await this.createImageExportTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes an OUTSCALE machine image (OMI) so that you cannot use it anymore to launch virtual machines (VMs). However, you can still use VMs already launched from this OMI.
     */
    async deleteImageRaw(requestParameters: DeleteImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteImageRequestToJSON(requestParameters.deleteImageRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteImageResponseFromJSON(jsonValue));
    }

    /**
     * Deletes an OUTSCALE machine image (OMI) so that you cannot use it anymore to launch virtual machines (VMs). However, you can still use VMs already launched from this OMI.
     */
    async deleteImage(requestParameters: DeleteImageOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteImageResponse> {
        const response = await this.deleteImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists one or more image export tasks.
     */
    async readImageExportTasksRaw(requestParameters: ReadImageExportTasksOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadImageExportTasksResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadImageExportTasksRequestToJSON(requestParameters.readImageExportTasksRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadImageExportTasks`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImageExportTasksResponseFromJSON(jsonValue));
    }

    /**
     * Lists one or more image export tasks.
     */
    async readImageExportTasks(requestParameters: ReadImageExportTasksOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadImageExportTasksResponse> {
        const response = await this.readImageExportTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists one or more OUTSCALE machine images (OMIs) you can use.
     */
    async readImagesRaw(requestParameters: ReadImagesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadImagesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadImagesRequestToJSON(requestParameters.readImagesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadImages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadImagesResponseFromJSON(jsonValue));
    }

    /**
     * Lists one or more OUTSCALE machine images (OMIs) you can use.
     */
    async readImages(requestParameters: ReadImagesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadImagesResponse> {
        const response = await this.readImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modifies the access permissions for an OUTSCALE machine image (OMI).<br /> You must specify either the `Additions` or the `Removals` parameter.<br /> After sharing an OMI with an account, the other account can create a copy of it that they own. For more information about copying OMIs, see [CreateImage](#createimage).
     */
    async updateImageRaw(requestParameters: UpdateImageOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateImageResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UpdateImageRequestToJSON(requestParameters.updateImageRequest);

        const request: runtime.RequestOpts = {
            path: `/UpdateImage`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateImageResponseFromJSON(jsonValue));
    }

    /**
     * Modifies the access permissions for an OUTSCALE machine image (OMI).<br /> You must specify either the `Additions` or the `Removals` parameter.<br /> After sharing an OMI with an account, the other account can create a copy of it that they own. For more information about copying OMIs, see [CreateImage](#createimage).
     */
    async updateImage(requestParameters: UpdateImageOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateImageResponse> {
        const response = await this.updateImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
