/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateClientGatewayRequest,
    CreateClientGatewayRequestFromJSON,
    CreateClientGatewayRequestToJSON,
    CreateClientGatewayResponse,
    CreateClientGatewayResponseFromJSON,
    CreateClientGatewayResponseToJSON,
    DeleteClientGatewayRequest,
    DeleteClientGatewayRequestFromJSON,
    DeleteClientGatewayRequestToJSON,
    DeleteClientGatewayResponse,
    DeleteClientGatewayResponseFromJSON,
    DeleteClientGatewayResponseToJSON,
    ReadClientGatewaysRequest,
    ReadClientGatewaysRequestFromJSON,
    ReadClientGatewaysRequestToJSON,
    ReadClientGatewaysResponse,
    ReadClientGatewaysResponseFromJSON,
    ReadClientGatewaysResponseToJSON,
} from '../models';

export interface CreateClientGatewayOperationRequest {
    createClientGatewayRequest?: CreateClientGatewayRequest;
}

export interface DeleteClientGatewayOperationRequest {
    deleteClientGatewayRequest?: DeleteClientGatewayRequest;
}

export interface ReadClientGatewaysOperationRequest {
    readClientGatewaysRequest?: ReadClientGatewaysRequest;
}

/**
 * ClientGatewayApi - interface
 * 
 * @export
 * @interface ClientGatewayApiInterface
 */
export interface ClientGatewayApiInterface {
    /**
     * 
     * @param {CreateClientGatewayRequest} [createClientGatewayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientGatewayApiInterface
     */
    createClientGatewayRaw(requestParameters: CreateClientGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateClientGatewayResponse>>;

    /**
     */
    createClientGateway(requestParameters: CreateClientGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateClientGatewayResponse>;

    /**
     * 
     * @param {DeleteClientGatewayRequest} [deleteClientGatewayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientGatewayApiInterface
     */
    deleteClientGatewayRaw(requestParameters: DeleteClientGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteClientGatewayResponse>>;

    /**
     */
    deleteClientGateway(requestParameters: DeleteClientGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteClientGatewayResponse>;

    /**
     * 
     * @param {ReadClientGatewaysRequest} [readClientGatewaysRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientGatewayApiInterface
     */
    readClientGatewaysRaw(requestParameters: ReadClientGatewaysOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadClientGatewaysResponse>>;

    /**
     */
    readClientGateways(requestParameters: ReadClientGatewaysOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadClientGatewaysResponse>;

}

/**
 * 
 */
export class ClientGatewayApi extends runtime.BaseAPI implements ClientGatewayApiInterface {

    /**
     */
    async createClientGatewayRaw(requestParameters: CreateClientGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateClientGatewayResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateClientGatewayRequestToJSON(requestParameters.createClientGatewayRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateClientGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateClientGatewayResponseFromJSON(jsonValue));
    }

    /**
     */
    async createClientGateway(requestParameters: CreateClientGatewayOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateClientGatewayResponse> {
        const response = await this.createClientGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteClientGatewayRaw(requestParameters: DeleteClientGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteClientGatewayResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteClientGatewayRequestToJSON(requestParameters.deleteClientGatewayRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteClientGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteClientGatewayResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteClientGateway(requestParameters: DeleteClientGatewayOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteClientGatewayResponse> {
        const response = await this.deleteClientGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readClientGatewaysRaw(requestParameters: ReadClientGatewaysOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadClientGatewaysResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadClientGatewaysRequestToJSON(requestParameters.readClientGatewaysRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadClientGateways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadClientGatewaysResponseFromJSON(jsonValue));
    }

    /**
     */
    async readClientGateways(requestParameters: ReadClientGatewaysOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadClientGatewaysResponse> {
        const response = await this.readClientGatewaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
