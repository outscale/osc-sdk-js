/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.5
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AcceptNetPeeringRequest,
    AcceptNetPeeringRequestFromJSON,
    AcceptNetPeeringRequestToJSON,
    AcceptNetPeeringResponse,
    AcceptNetPeeringResponseFromJSON,
    AcceptNetPeeringResponseToJSON,
    CreateNetPeeringRequest,
    CreateNetPeeringRequestFromJSON,
    CreateNetPeeringRequestToJSON,
    CreateNetPeeringResponse,
    CreateNetPeeringResponseFromJSON,
    CreateNetPeeringResponseToJSON,
    DeleteNetPeeringRequest,
    DeleteNetPeeringRequestFromJSON,
    DeleteNetPeeringRequestToJSON,
    DeleteNetPeeringResponse,
    DeleteNetPeeringResponseFromJSON,
    DeleteNetPeeringResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReadNetPeeringsRequest,
    ReadNetPeeringsRequestFromJSON,
    ReadNetPeeringsRequestToJSON,
    ReadNetPeeringsResponse,
    ReadNetPeeringsResponseFromJSON,
    ReadNetPeeringsResponseToJSON,
    RejectNetPeeringRequest,
    RejectNetPeeringRequestFromJSON,
    RejectNetPeeringRequestToJSON,
    RejectNetPeeringResponse,
    RejectNetPeeringResponseFromJSON,
    RejectNetPeeringResponseToJSON,
} from '../models';

export interface AcceptNetPeeringOperationRequest {
    acceptNetPeeringRequest?: AcceptNetPeeringRequest;
}

export interface CreateNetPeeringOperationRequest {
    createNetPeeringRequest?: CreateNetPeeringRequest;
}

export interface DeleteNetPeeringOperationRequest {
    deleteNetPeeringRequest?: DeleteNetPeeringRequest;
}

export interface ReadNetPeeringsOperationRequest {
    readNetPeeringsRequest?: ReadNetPeeringsRequest;
}

export interface RejectNetPeeringOperationRequest {
    rejectNetPeeringRequest?: RejectNetPeeringRequest;
}

/**
 * NetPeeringApi - interface
 * 
 * @export
 * @interface NetPeeringApiInterface
 */
export interface NetPeeringApiInterface {
    /**
     * 
     * @param {AcceptNetPeeringRequest} [acceptNetPeeringRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    acceptNetPeeringRaw(requestParameters: AcceptNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AcceptNetPeeringResponse>>;

    /**
     */
    acceptNetPeering(requestParameters: AcceptNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AcceptNetPeeringResponse>;

    /**
     * 
     * @param {CreateNetPeeringRequest} [createNetPeeringRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    createNetPeeringRaw(requestParameters: CreateNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateNetPeeringResponse>>;

    /**
     */
    createNetPeering(requestParameters: CreateNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateNetPeeringResponse>;

    /**
     * 
     * @param {DeleteNetPeeringRequest} [deleteNetPeeringRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    deleteNetPeeringRaw(requestParameters: DeleteNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteNetPeeringResponse>>;

    /**
     */
    deleteNetPeering(requestParameters: DeleteNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteNetPeeringResponse>;

    /**
     * 
     * @param {ReadNetPeeringsRequest} [readNetPeeringsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    readNetPeeringsRaw(requestParameters: ReadNetPeeringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadNetPeeringsResponse>>;

    /**
     */
    readNetPeerings(requestParameters: ReadNetPeeringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadNetPeeringsResponse>;

    /**
     * 
     * @param {RejectNetPeeringRequest} [rejectNetPeeringRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetPeeringApiInterface
     */
    rejectNetPeeringRaw(requestParameters: RejectNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RejectNetPeeringResponse>>;

    /**
     */
    rejectNetPeering(requestParameters: RejectNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RejectNetPeeringResponse>;

}

/**
 * 
 */
export class NetPeeringApi extends runtime.BaseAPI implements NetPeeringApiInterface {

    /**
     */
    async acceptNetPeeringRaw(requestParameters: AcceptNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<AcceptNetPeeringResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = AcceptNetPeeringRequestToJSON(requestParameters.acceptNetPeeringRequest);

        const request: runtime.RequestOpts = {
            path: `/AcceptNetPeering`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AcceptNetPeeringResponseFromJSON(jsonValue));
    }

    /**
     */
    async acceptNetPeering(requestParameters: AcceptNetPeeringOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<AcceptNetPeeringResponse> {
        const response = await this.acceptNetPeeringRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createNetPeeringRaw(requestParameters: CreateNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateNetPeeringResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateNetPeeringRequestToJSON(requestParameters.createNetPeeringRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateNetPeering`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateNetPeeringResponseFromJSON(jsonValue));
    }

    /**
     */
    async createNetPeering(requestParameters: CreateNetPeeringOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateNetPeeringResponse> {
        const response = await this.createNetPeeringRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteNetPeeringRaw(requestParameters: DeleteNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteNetPeeringResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteNetPeeringRequestToJSON(requestParameters.deleteNetPeeringRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteNetPeering`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteNetPeeringResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteNetPeering(requestParameters: DeleteNetPeeringOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteNetPeeringResponse> {
        const response = await this.deleteNetPeeringRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readNetPeeringsRaw(requestParameters: ReadNetPeeringsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadNetPeeringsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadNetPeeringsRequestToJSON(requestParameters.readNetPeeringsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadNetPeerings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadNetPeeringsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readNetPeerings(requestParameters: ReadNetPeeringsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadNetPeeringsResponse> {
        const response = await this.readNetPeeringsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async rejectNetPeeringRaw(requestParameters: RejectNetPeeringOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<RejectNetPeeringResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = RejectNetPeeringRequestToJSON(requestParameters.rejectNetPeeringRequest);

        const request: runtime.RequestOpts = {
            path: `/RejectNetPeering`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RejectNetPeeringResponseFromJSON(jsonValue));
    }

    /**
     */
    async rejectNetPeering(requestParameters: RejectNetPeeringOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<RejectNetPeeringResponse> {
        const response = await this.rejectNetPeeringRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
