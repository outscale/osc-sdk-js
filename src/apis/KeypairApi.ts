/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of this API is also available for download: <button>[GitHub repository](https://github.com/outscale/osc-api)</button><br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * The version of the OpenAPI document: 1.36.3
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateKeypairRequest,
    CreateKeypairRequestFromJSON,
    CreateKeypairRequestToJSON,
    CreateKeypairResponse,
    CreateKeypairResponseFromJSON,
    CreateKeypairResponseToJSON,
    DeleteKeypairRequest,
    DeleteKeypairRequestFromJSON,
    DeleteKeypairRequestToJSON,
    DeleteKeypairResponse,
    DeleteKeypairResponseFromJSON,
    DeleteKeypairResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    ReadKeypairsRequest,
    ReadKeypairsRequestFromJSON,
    ReadKeypairsRequestToJSON,
    ReadKeypairsResponse,
    ReadKeypairsResponseFromJSON,
    ReadKeypairsResponseToJSON,
} from '../models';

export interface CreateKeypairOperationRequest {
    createKeypairRequest?: CreateKeypairRequest;
}

export interface DeleteKeypairOperationRequest {
    deleteKeypairRequest?: DeleteKeypairRequest;
}

export interface ReadKeypairsOperationRequest {
    readKeypairsRequest?: ReadKeypairsRequest;
}

/**
 * KeypairApi - interface
 * 
 * @export
 * @interface KeypairApiInterface
 */
export interface KeypairApiInterface {
    /**
     * Creates a keypair to use with your virtual machines (VMs).<br /> You can use this method in two different ways: * **Creating a keypair**: In that case, 3DS OUTSCALE creates a 2048-bit RSA keypair, stores its public key in your account, and returns its private key in the response of the call so that you can save it in a file.<br /> When you save the returned private key, make sure you replace the `\\n` escape sequences with real line breaks. * **Importing a keypair created locally**: If you already have a keypair that you have created locally with a third-party tool, you can import its public key in your account. The following types of key can be imported: RSA (2048 bits or preferably 4096 bits), Ed25519, and ECDSA (256 bits, 384 bits, or 521 bits). The following formats can be used: PEM, PKCS8, RFC4716, and OpenSSH.  For more information, see [About Keypairs](https://docs.outscale.com/en/userguide/About-Keypairs.html).
     * @param {CreateKeypairRequest} [createKeypairRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApiInterface
     */
    createKeypairRaw(requestParameters: CreateKeypairOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateKeypairResponse>>;

    /**
     * Creates a keypair to use with your virtual machines (VMs).<br /> You can use this method in two different ways: * **Creating a keypair**: In that case, 3DS OUTSCALE creates a 2048-bit RSA keypair, stores its public key in your account, and returns its private key in the response of the call so that you can save it in a file.<br /> When you save the returned private key, make sure you replace the `\\n` escape sequences with real line breaks. * **Importing a keypair created locally**: If you already have a keypair that you have created locally with a third-party tool, you can import its public key in your account. The following types of key can be imported: RSA (2048 bits or preferably 4096 bits), Ed25519, and ECDSA (256 bits, 384 bits, or 521 bits). The following formats can be used: PEM, PKCS8, RFC4716, and OpenSSH.  For more information, see [About Keypairs](https://docs.outscale.com/en/userguide/About-Keypairs.html).
     */
    createKeypair(requestParameters: CreateKeypairOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateKeypairResponse>;

    /**
     * Deletes the specified keypair.<br /> This action deletes the public key stored by 3DS OUTSCALE, thus deleting the keypair.
     * @param {DeleteKeypairRequest} [deleteKeypairRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApiInterface
     */
    deleteKeypairRaw(requestParameters: DeleteKeypairOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteKeypairResponse>>;

    /**
     * Deletes the specified keypair.<br /> This action deletes the public key stored by 3DS OUTSCALE, thus deleting the keypair.
     */
    deleteKeypair(requestParameters: DeleteKeypairOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteKeypairResponse>;

    /**
     * Lists one or more of your keypairs.
     * @param {ReadKeypairsRequest} [readKeypairsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof KeypairApiInterface
     */
    readKeypairsRaw(requestParameters: ReadKeypairsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadKeypairsResponse>>;

    /**
     * Lists one or more of your keypairs.
     */
    readKeypairs(requestParameters: ReadKeypairsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadKeypairsResponse>;

}

/**
 * 
 */
export class KeypairApi extends runtime.BaseAPI implements KeypairApiInterface {

    /**
     * Creates a keypair to use with your virtual machines (VMs).<br /> You can use this method in two different ways: * **Creating a keypair**: In that case, 3DS OUTSCALE creates a 2048-bit RSA keypair, stores its public key in your account, and returns its private key in the response of the call so that you can save it in a file.<br /> When you save the returned private key, make sure you replace the `\\n` escape sequences with real line breaks. * **Importing a keypair created locally**: If you already have a keypair that you have created locally with a third-party tool, you can import its public key in your account. The following types of key can be imported: RSA (2048 bits or preferably 4096 bits), Ed25519, and ECDSA (256 bits, 384 bits, or 521 bits). The following formats can be used: PEM, PKCS8, RFC4716, and OpenSSH.  For more information, see [About Keypairs](https://docs.outscale.com/en/userguide/About-Keypairs.html).
     */
    async createKeypairRaw(requestParameters: CreateKeypairOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateKeypairResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateKeypairRequestToJSON(requestParameters.createKeypairRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateKeypair`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateKeypairResponseFromJSON(jsonValue));
    }

    /**
     * Creates a keypair to use with your virtual machines (VMs).<br /> You can use this method in two different ways: * **Creating a keypair**: In that case, 3DS OUTSCALE creates a 2048-bit RSA keypair, stores its public key in your account, and returns its private key in the response of the call so that you can save it in a file.<br /> When you save the returned private key, make sure you replace the `\\n` escape sequences with real line breaks. * **Importing a keypair created locally**: If you already have a keypair that you have created locally with a third-party tool, you can import its public key in your account. The following types of key can be imported: RSA (2048 bits or preferably 4096 bits), Ed25519, and ECDSA (256 bits, 384 bits, or 521 bits). The following formats can be used: PEM, PKCS8, RFC4716, and OpenSSH.  For more information, see [About Keypairs](https://docs.outscale.com/en/userguide/About-Keypairs.html).
     */
    async createKeypair(requestParameters: CreateKeypairOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateKeypairResponse> {
        const response = await this.createKeypairRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes the specified keypair.<br /> This action deletes the public key stored by 3DS OUTSCALE, thus deleting the keypair.
     */
    async deleteKeypairRaw(requestParameters: DeleteKeypairOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteKeypairResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteKeypairRequestToJSON(requestParameters.deleteKeypairRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteKeypair`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteKeypairResponseFromJSON(jsonValue));
    }

    /**
     * Deletes the specified keypair.<br /> This action deletes the public key stored by 3DS OUTSCALE, thus deleting the keypair.
     */
    async deleteKeypair(requestParameters: DeleteKeypairOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteKeypairResponse> {
        const response = await this.deleteKeypairRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Lists one or more of your keypairs.
     */
    async readKeypairsRaw(requestParameters: ReadKeypairsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadKeypairsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadKeypairsRequestToJSON(requestParameters.readKeypairsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadKeypairs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadKeypairsResponseFromJSON(jsonValue));
    }

    /**
     * Lists one or more of your keypairs.
     */
    async readKeypairs(requestParameters: ReadKeypairsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadKeypairsResponse> {
        const response = await this.readKeypairsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
