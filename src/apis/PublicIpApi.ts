/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePublicIpRequest,
    CreatePublicIpRequestFromJSON,
    CreatePublicIpRequestToJSON,
    CreatePublicIpResponse,
    CreatePublicIpResponseFromJSON,
    CreatePublicIpResponseToJSON,
    DeletePublicIpRequest,
    DeletePublicIpRequestFromJSON,
    DeletePublicIpRequestToJSON,
    DeletePublicIpResponse,
    DeletePublicIpResponseFromJSON,
    DeletePublicIpResponseToJSON,
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    LinkPublicIpRequest,
    LinkPublicIpRequestFromJSON,
    LinkPublicIpRequestToJSON,
    LinkPublicIpResponse,
    LinkPublicIpResponseFromJSON,
    LinkPublicIpResponseToJSON,
    ReadPublicIpRangesRequest,
    ReadPublicIpRangesRequestFromJSON,
    ReadPublicIpRangesRequestToJSON,
    ReadPublicIpRangesResponse,
    ReadPublicIpRangesResponseFromJSON,
    ReadPublicIpRangesResponseToJSON,
    ReadPublicIpsRequest,
    ReadPublicIpsRequestFromJSON,
    ReadPublicIpsRequestToJSON,
    ReadPublicIpsResponse,
    ReadPublicIpsResponseFromJSON,
    ReadPublicIpsResponseToJSON,
    UnlinkPublicIpRequest,
    UnlinkPublicIpRequestFromJSON,
    UnlinkPublicIpRequestToJSON,
    UnlinkPublicIpResponse,
    UnlinkPublicIpResponseFromJSON,
    UnlinkPublicIpResponseToJSON,
} from '../models';

export interface CreatePublicIpOperationRequest {
    createPublicIpRequest?: CreatePublicIpRequest;
}

export interface DeletePublicIpOperationRequest {
    deletePublicIpRequest?: DeletePublicIpRequest;
}

export interface LinkPublicIpOperationRequest {
    linkPublicIpRequest?: LinkPublicIpRequest;
}

export interface ReadPublicIpRangesOperationRequest {
    readPublicIpRangesRequest?: ReadPublicIpRangesRequest;
}

export interface ReadPublicIpsOperationRequest {
    readPublicIpsRequest?: ReadPublicIpsRequest;
}

export interface UnlinkPublicIpOperationRequest {
    unlinkPublicIpRequest?: UnlinkPublicIpRequest;
}

/**
 * PublicIpApi - interface
 * 
 * @export
 * @interface PublicIpApiInterface
 */
export interface PublicIpApiInterface {
    /**
     * 
     * @param {CreatePublicIpRequest} [createPublicIpRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIpApiInterface
     */
    createPublicIpRaw(requestParameters: CreatePublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePublicIpResponse>>;

    /**
     */
    createPublicIp(requestParameters: CreatePublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePublicIpResponse>;

    /**
     * 
     * @param {DeletePublicIpRequest} [deletePublicIpRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIpApiInterface
     */
    deletePublicIpRaw(requestParameters: DeletePublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePublicIpResponse>>;

    /**
     */
    deletePublicIp(requestParameters: DeletePublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePublicIpResponse>;

    /**
     * 
     * @param {LinkPublicIpRequest} [linkPublicIpRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIpApiInterface
     */
    linkPublicIpRaw(requestParameters: LinkPublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkPublicIpResponse>>;

    /**
     */
    linkPublicIp(requestParameters: LinkPublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkPublicIpResponse>;

    /**
     * 
     * @param {ReadPublicIpRangesRequest} [readPublicIpRangesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIpApiInterface
     */
    readPublicIpRangesRaw(requestParameters: ReadPublicIpRangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPublicIpRangesResponse>>;

    /**
     */
    readPublicIpRanges(requestParameters: ReadPublicIpRangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPublicIpRangesResponse>;

    /**
     * 
     * @param {ReadPublicIpsRequest} [readPublicIpsRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIpApiInterface
     */
    readPublicIpsRaw(requestParameters: ReadPublicIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPublicIpsResponse>>;

    /**
     */
    readPublicIps(requestParameters: ReadPublicIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPublicIpsResponse>;

    /**
     * 
     * @param {UnlinkPublicIpRequest} [unlinkPublicIpRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicIpApiInterface
     */
    unlinkPublicIpRaw(requestParameters: UnlinkPublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkPublicIpResponse>>;

    /**
     */
    unlinkPublicIp(requestParameters: UnlinkPublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkPublicIpResponse>;

}

/**
 * 
 */
export class PublicIpApi extends runtime.BaseAPI implements PublicIpApiInterface {

    /**
     */
    async createPublicIpRaw(requestParameters: CreatePublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreatePublicIpResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreatePublicIpRequestToJSON(requestParameters.createPublicIpRequest);

        const request: runtime.RequestOpts = {
            path: `/CreatePublicIp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreatePublicIpResponseFromJSON(jsonValue));
    }

    /**
     */
    async createPublicIp(requestParameters: CreatePublicIpOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreatePublicIpResponse> {
        const response = await this.createPublicIpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePublicIpRaw(requestParameters: DeletePublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeletePublicIpResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeletePublicIpRequestToJSON(requestParameters.deletePublicIpRequest);

        const request: runtime.RequestOpts = {
            path: `/DeletePublicIp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeletePublicIpResponseFromJSON(jsonValue));
    }

    /**
     */
    async deletePublicIp(requestParameters: DeletePublicIpOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeletePublicIpResponse> {
        const response = await this.deletePublicIpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkPublicIpRaw(requestParameters: LinkPublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkPublicIpResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = LinkPublicIpRequestToJSON(requestParameters.linkPublicIpRequest);

        const request: runtime.RequestOpts = {
            path: `/LinkPublicIp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkPublicIpResponseFromJSON(jsonValue));
    }

    /**
     */
    async linkPublicIp(requestParameters: LinkPublicIpOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkPublicIpResponse> {
        const response = await this.linkPublicIpRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readPublicIpRangesRaw(requestParameters: ReadPublicIpRangesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPublicIpRangesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';



        const body: any = ReadPublicIpRangesRequestToJSON(requestParameters.readPublicIpRangesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadPublicIpRanges`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPublicIpRangesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readPublicIpRanges(requestParameters: ReadPublicIpRangesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPublicIpRangesResponse> {
        const response = await this.readPublicIpRangesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readPublicIpsRaw(requestParameters: ReadPublicIpsOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadPublicIpsResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadPublicIpsRequestToJSON(requestParameters.readPublicIpsRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadPublicIps`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadPublicIpsResponseFromJSON(jsonValue));
    }

    /**
     */
    async readPublicIps(requestParameters: ReadPublicIpsOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadPublicIpsResponse> {
        const response = await this.readPublicIpsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlinkPublicIpRaw(requestParameters: UnlinkPublicIpOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkPublicIpResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UnlinkPublicIpRequestToJSON(requestParameters.unlinkPublicIpRequest);

        const request: runtime.RequestOpts = {
            path: `/UnlinkPublicIp`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkPublicIpResponseFromJSON(jsonValue));
    }

    /**
     */
    async unlinkPublicIp(requestParameters: UnlinkPublicIpOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkPublicIpResponse> {
        const response = await this.unlinkPublicIpRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
