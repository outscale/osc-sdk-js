/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateListenerRuleRequest,
    CreateListenerRuleRequestFromJSON,
    CreateListenerRuleRequestToJSON,
    CreateListenerRuleResponse,
    CreateListenerRuleResponseFromJSON,
    CreateListenerRuleResponseToJSON,
    CreateLoadBalancerListenersRequest,
    CreateLoadBalancerListenersRequestFromJSON,
    CreateLoadBalancerListenersRequestToJSON,
    CreateLoadBalancerListenersResponse,
    CreateLoadBalancerListenersResponseFromJSON,
    CreateLoadBalancerListenersResponseToJSON,
    DeleteListenerRuleRequest,
    DeleteListenerRuleRequestFromJSON,
    DeleteListenerRuleRequestToJSON,
    DeleteListenerRuleResponse,
    DeleteListenerRuleResponseFromJSON,
    DeleteListenerRuleResponseToJSON,
    DeleteLoadBalancerListenersRequest,
    DeleteLoadBalancerListenersRequestFromJSON,
    DeleteLoadBalancerListenersRequestToJSON,
    DeleteLoadBalancerListenersResponse,
    DeleteLoadBalancerListenersResponseFromJSON,
    DeleteLoadBalancerListenersResponseToJSON,
    ReadListenerRulesRequest,
    ReadListenerRulesRequestFromJSON,
    ReadListenerRulesRequestToJSON,
    ReadListenerRulesResponse,
    ReadListenerRulesResponseFromJSON,
    ReadListenerRulesResponseToJSON,
    UpdateListenerRuleRequest,
    UpdateListenerRuleRequestFromJSON,
    UpdateListenerRuleRequestToJSON,
    UpdateListenerRuleResponse,
    UpdateListenerRuleResponseFromJSON,
    UpdateListenerRuleResponseToJSON,
} from '../models';

export interface CreateListenerRuleOperationRequest {
    createListenerRuleRequest?: CreateListenerRuleRequest;
}

export interface CreateLoadBalancerListenersOperationRequest {
    createLoadBalancerListenersRequest?: CreateLoadBalancerListenersRequest;
}

export interface DeleteListenerRuleOperationRequest {
    deleteListenerRuleRequest?: DeleteListenerRuleRequest;
}

export interface DeleteLoadBalancerListenersOperationRequest {
    deleteLoadBalancerListenersRequest?: DeleteLoadBalancerListenersRequest;
}

export interface ReadListenerRulesOperationRequest {
    readListenerRulesRequest?: ReadListenerRulesRequest;
}

export interface UpdateListenerRuleOperationRequest {
    updateListenerRuleRequest?: UpdateListenerRuleRequest;
}

/**
 * ListenerApi - interface
 * 
 * @export
 * @interface ListenerApiInterface
 */
export interface ListenerApiInterface {
    /**
     * 
     * @param {CreateListenerRuleRequest} [createListenerRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApiInterface
     */
    createListenerRuleRaw(requestParameters: CreateListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateListenerRuleResponse>>;

    /**
     */
    createListenerRule(requestParameters: CreateListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateListenerRuleResponse>;

    /**
     * 
     * @param {CreateLoadBalancerListenersRequest} [createLoadBalancerListenersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApiInterface
     */
    createLoadBalancerListenersRaw(requestParameters: CreateLoadBalancerListenersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateLoadBalancerListenersResponse>>;

    /**
     */
    createLoadBalancerListeners(requestParameters: CreateLoadBalancerListenersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateLoadBalancerListenersResponse>;

    /**
     * 
     * @param {DeleteListenerRuleRequest} [deleteListenerRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApiInterface
     */
    deleteListenerRuleRaw(requestParameters: DeleteListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteListenerRuleResponse>>;

    /**
     */
    deleteListenerRule(requestParameters: DeleteListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteListenerRuleResponse>;

    /**
     * 
     * @param {DeleteLoadBalancerListenersRequest} [deleteLoadBalancerListenersRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApiInterface
     */
    deleteLoadBalancerListenersRaw(requestParameters: DeleteLoadBalancerListenersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteLoadBalancerListenersResponse>>;

    /**
     */
    deleteLoadBalancerListeners(requestParameters: DeleteLoadBalancerListenersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteLoadBalancerListenersResponse>;

    /**
     * 
     * @param {ReadListenerRulesRequest} [readListenerRulesRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApiInterface
     */
    readListenerRulesRaw(requestParameters: ReadListenerRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadListenerRulesResponse>>;

    /**
     */
    readListenerRules(requestParameters: ReadListenerRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadListenerRulesResponse>;

    /**
     * 
     * @param {UpdateListenerRuleRequest} [updateListenerRuleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListenerApiInterface
     */
    updateListenerRuleRaw(requestParameters: UpdateListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateListenerRuleResponse>>;

    /**
     */
    updateListenerRule(requestParameters: UpdateListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateListenerRuleResponse>;

}

/**
 * 
 */
export class ListenerApi extends runtime.BaseAPI implements ListenerApiInterface {

    /**
     */
    async createListenerRuleRaw(requestParameters: CreateListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateListenerRuleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateListenerRuleRequestToJSON(requestParameters.createListenerRuleRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateListenerRule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateListenerRuleResponseFromJSON(jsonValue));
    }

    /**
     */
    async createListenerRule(requestParameters: CreateListenerRuleOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateListenerRuleResponse> {
        const response = await this.createListenerRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createLoadBalancerListenersRaw(requestParameters: CreateLoadBalancerListenersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateLoadBalancerListenersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateLoadBalancerListenersRequestToJSON(requestParameters.createLoadBalancerListenersRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateLoadBalancerListeners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateLoadBalancerListenersResponseFromJSON(jsonValue));
    }

    /**
     */
    async createLoadBalancerListeners(requestParameters: CreateLoadBalancerListenersOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateLoadBalancerListenersResponse> {
        const response = await this.createLoadBalancerListenersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteListenerRuleRaw(requestParameters: DeleteListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteListenerRuleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteListenerRuleRequestToJSON(requestParameters.deleteListenerRuleRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteListenerRule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteListenerRuleResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteListenerRule(requestParameters: DeleteListenerRuleOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteListenerRuleResponse> {
        const response = await this.deleteListenerRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteLoadBalancerListenersRaw(requestParameters: DeleteLoadBalancerListenersOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteLoadBalancerListenersResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteLoadBalancerListenersRequestToJSON(requestParameters.deleteLoadBalancerListenersRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteLoadBalancerListeners`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteLoadBalancerListenersResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteLoadBalancerListeners(requestParameters: DeleteLoadBalancerListenersOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteLoadBalancerListenersResponse> {
        const response = await this.deleteLoadBalancerListenersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readListenerRulesRaw(requestParameters: ReadListenerRulesOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadListenerRulesResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadListenerRulesRequestToJSON(requestParameters.readListenerRulesRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadListenerRules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadListenerRulesResponseFromJSON(jsonValue));
    }

    /**
     */
    async readListenerRules(requestParameters: ReadListenerRulesOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadListenerRulesResponse> {
        const response = await this.readListenerRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateListenerRuleRaw(requestParameters: UpdateListenerRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateListenerRuleResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UpdateListenerRuleRequestToJSON(requestParameters.updateListenerRuleRequest);

        const request: runtime.RequestOpts = {
            path: `/UpdateListenerRule`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateListenerRuleResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateListenerRule(requestParameters: UpdateListenerRuleOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateListenerRuleResponse> {
        const response = await this.updateListenerRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
