/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateVirtualGatewayRequest,
    CreateVirtualGatewayRequestFromJSON,
    CreateVirtualGatewayRequestToJSON,
    CreateVirtualGatewayResponse,
    CreateVirtualGatewayResponseFromJSON,
    CreateVirtualGatewayResponseToJSON,
    DeleteVirtualGatewayRequest,
    DeleteVirtualGatewayRequestFromJSON,
    DeleteVirtualGatewayRequestToJSON,
    DeleteVirtualGatewayResponse,
    DeleteVirtualGatewayResponseFromJSON,
    DeleteVirtualGatewayResponseToJSON,
    LinkVirtualGatewayRequest,
    LinkVirtualGatewayRequestFromJSON,
    LinkVirtualGatewayRequestToJSON,
    LinkVirtualGatewayResponse,
    LinkVirtualGatewayResponseFromJSON,
    LinkVirtualGatewayResponseToJSON,
    ReadVirtualGatewaysRequest,
    ReadVirtualGatewaysRequestFromJSON,
    ReadVirtualGatewaysRequestToJSON,
    ReadVirtualGatewaysResponse,
    ReadVirtualGatewaysResponseFromJSON,
    ReadVirtualGatewaysResponseToJSON,
    UnlinkVirtualGatewayRequest,
    UnlinkVirtualGatewayRequestFromJSON,
    UnlinkVirtualGatewayRequestToJSON,
    UnlinkVirtualGatewayResponse,
    UnlinkVirtualGatewayResponseFromJSON,
    UnlinkVirtualGatewayResponseToJSON,
    UpdateRoutePropagationRequest,
    UpdateRoutePropagationRequestFromJSON,
    UpdateRoutePropagationRequestToJSON,
    UpdateRoutePropagationResponse,
    UpdateRoutePropagationResponseFromJSON,
    UpdateRoutePropagationResponseToJSON,
} from '../models';

export interface CreateVirtualGatewayOperationRequest {
    createVirtualGatewayRequest?: CreateVirtualGatewayRequest;
}

export interface DeleteVirtualGatewayOperationRequest {
    deleteVirtualGatewayRequest?: DeleteVirtualGatewayRequest;
}

export interface LinkVirtualGatewayOperationRequest {
    linkVirtualGatewayRequest?: LinkVirtualGatewayRequest;
}

export interface ReadVirtualGatewaysOperationRequest {
    readVirtualGatewaysRequest?: ReadVirtualGatewaysRequest;
}

export interface UnlinkVirtualGatewayOperationRequest {
    unlinkVirtualGatewayRequest?: UnlinkVirtualGatewayRequest;
}

export interface UpdateRoutePropagationOperationRequest {
    updateRoutePropagationRequest?: UpdateRoutePropagationRequest;
}

/**
 * VirtualGatewayApi - interface
 * 
 * @export
 * @interface VirtualGatewayApiInterface
 */
export interface VirtualGatewayApiInterface {
    /**
     * 
     * @param {CreateVirtualGatewayRequest} [createVirtualGatewayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualGatewayApiInterface
     */
    createVirtualGatewayRaw(requestParameters: CreateVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateVirtualGatewayResponse>>;

    /**
     */
    createVirtualGateway(requestParameters: CreateVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateVirtualGatewayResponse>;

    /**
     * 
     * @param {DeleteVirtualGatewayRequest} [deleteVirtualGatewayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualGatewayApiInterface
     */
    deleteVirtualGatewayRaw(requestParameters: DeleteVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteVirtualGatewayResponse>>;

    /**
     */
    deleteVirtualGateway(requestParameters: DeleteVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteVirtualGatewayResponse>;

    /**
     * 
     * @param {LinkVirtualGatewayRequest} [linkVirtualGatewayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualGatewayApiInterface
     */
    linkVirtualGatewayRaw(requestParameters: LinkVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkVirtualGatewayResponse>>;

    /**
     */
    linkVirtualGateway(requestParameters: LinkVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkVirtualGatewayResponse>;

    /**
     * 
     * @param {ReadVirtualGatewaysRequest} [readVirtualGatewaysRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualGatewayApiInterface
     */
    readVirtualGatewaysRaw(requestParameters: ReadVirtualGatewaysOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVirtualGatewaysResponse>>;

    /**
     */
    readVirtualGateways(requestParameters: ReadVirtualGatewaysOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVirtualGatewaysResponse>;

    /**
     * 
     * @param {UnlinkVirtualGatewayRequest} [unlinkVirtualGatewayRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualGatewayApiInterface
     */
    unlinkVirtualGatewayRaw(requestParameters: UnlinkVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkVirtualGatewayResponse>>;

    /**
     */
    unlinkVirtualGateway(requestParameters: UnlinkVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkVirtualGatewayResponse>;

    /**
     * 
     * @param {UpdateRoutePropagationRequest} [updateRoutePropagationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VirtualGatewayApiInterface
     */
    updateRoutePropagationRaw(requestParameters: UpdateRoutePropagationOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateRoutePropagationResponse>>;

    /**
     */
    updateRoutePropagation(requestParameters: UpdateRoutePropagationOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateRoutePropagationResponse>;

}

/**
 * 
 */
export class VirtualGatewayApi extends runtime.BaseAPI implements VirtualGatewayApiInterface {

    /**
     */
    async createVirtualGatewayRaw(requestParameters: CreateVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<CreateVirtualGatewayResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = CreateVirtualGatewayRequestToJSON(requestParameters.createVirtualGatewayRequest);

        const request: runtime.RequestOpts = {
            path: `/CreateVirtualGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateVirtualGatewayResponseFromJSON(jsonValue));
    }

    /**
     */
    async createVirtualGateway(requestParameters: CreateVirtualGatewayOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<CreateVirtualGatewayResponse> {
        const response = await this.createVirtualGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteVirtualGatewayRaw(requestParameters: DeleteVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<DeleteVirtualGatewayResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = DeleteVirtualGatewayRequestToJSON(requestParameters.deleteVirtualGatewayRequest);

        const request: runtime.RequestOpts = {
            path: `/DeleteVirtualGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteVirtualGatewayResponseFromJSON(jsonValue));
    }

    /**
     */
    async deleteVirtualGateway(requestParameters: DeleteVirtualGatewayOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<DeleteVirtualGatewayResponse> {
        const response = await this.deleteVirtualGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async linkVirtualGatewayRaw(requestParameters: LinkVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<LinkVirtualGatewayResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = LinkVirtualGatewayRequestToJSON(requestParameters.linkVirtualGatewayRequest);

        const request: runtime.RequestOpts = {
            path: `/LinkVirtualGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LinkVirtualGatewayResponseFromJSON(jsonValue));
    }

    /**
     */
    async linkVirtualGateway(requestParameters: LinkVirtualGatewayOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<LinkVirtualGatewayResponse> {
        const response = await this.linkVirtualGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async readVirtualGatewaysRaw(requestParameters: ReadVirtualGatewaysOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<ReadVirtualGatewaysResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = ReadVirtualGatewaysRequestToJSON(requestParameters.readVirtualGatewaysRequest);

        const request: runtime.RequestOpts = {
            path: `/ReadVirtualGateways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReadVirtualGatewaysResponseFromJSON(jsonValue));
    }

    /**
     */
    async readVirtualGateways(requestParameters: ReadVirtualGatewaysOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<ReadVirtualGatewaysResponse> {
        const response = await this.readVirtualGatewaysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async unlinkVirtualGatewayRaw(requestParameters: UnlinkVirtualGatewayOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UnlinkVirtualGatewayResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UnlinkVirtualGatewayRequestToJSON(requestParameters.unlinkVirtualGatewayRequest);

        const request: runtime.RequestOpts = {
            path: `/UnlinkVirtualGateway`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UnlinkVirtualGatewayResponseFromJSON(jsonValue));
    }

    /**
     */
    async unlinkVirtualGateway(requestParameters: UnlinkVirtualGatewayOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UnlinkVirtualGatewayResponse> {
        const response = await this.unlinkVirtualGatewayRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateRoutePropagationRaw(requestParameters: UpdateRoutePropagationOperationRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<UpdateRoutePropagationResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // ApiKeyAuth authentication
        }



        const body: any = UpdateRoutePropagationRequestToJSON(requestParameters.updateRoutePropagationRequest);

        const request: runtime.RequestOpts = {
            path: `/UpdateRoutePropagation`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: body,
        }
        if (this.configuration && this.configuration.awsV4SignerParameters) {
            const SignUrl = this.configuration.basePath + request.path;
            const SignBody = JSON.stringify(request.body);
            const signer = new runtime.AwsV4Signer(this.configuration.awsV4SignerParameters);
            const signResult = await signer.sign('POST', SignUrl, headerParameters, SignBody);
            //request.url = signResult.url;
            //request.method = signResult.method;
            request.headers = signResult.headers;
        }
        const response = await this.request(request, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UpdateRoutePropagationResponseFromJSON(jsonValue));
    }

    /**
     */
    async updateRoutePropagation(requestParameters: UpdateRoutePropagationOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<UpdateRoutePropagationResponse> {
        const response = await this.updateRoutePropagationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
