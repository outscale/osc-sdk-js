/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    PublicIpLight,
    PublicIpLightFromJSON,
    PublicIpLightFromJSONTyped,
    PublicIpLightToJSON,
} from './PublicIpLight';
import {
    ResourceTag,
    ResourceTagFromJSON,
    ResourceTagFromJSONTyped,
    ResourceTagToJSON,
} from './ResourceTag';

/**
 * Information about the NAT service.
 * @export
 * @interface NatService
 */
export interface NatService {
    /**
     * The ID of the NAT service.
     * @type {string}
     * @memberof NatService
     */
    natServiceId?: string;
    /**
     * The ID of the Net in which the NAT service is.
     * @type {string}
     * @memberof NatService
     */
    netId?: string;
    /**
     * Information about the public IP or IPs associated with the NAT service.
     * @type {Array<PublicIpLight>}
     * @memberof NatService
     */
    publicIps?: Array<PublicIpLight>;
    /**
     * The state of the NAT service (`pending` \| `available` \| `deleting` \| `deleted`).
     * @type {string}
     * @memberof NatService
     */
    state?: string;
    /**
     * The ID of the Subnet in which the NAT service is.
     * @type {string}
     * @memberof NatService
     */
    subnetId?: string;
    /**
     * One or more tags associated with the NAT service.
     * @type {Array<ResourceTag>}
     * @memberof NatService
     */
    tags?: Array<ResourceTag>;
}

export function NatServiceFromJSON(json: any): NatService {
    return NatServiceFromJSONTyped(json, false);
}

export function NatServiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): NatService {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'natServiceId': !exists(json, 'NatServiceId') ? undefined : json['NatServiceId'],
        'netId': !exists(json, 'NetId') ? undefined : json['NetId'],
        'publicIps': !exists(json, 'PublicIps') ? undefined : ((json['PublicIps'] as Array<any>).map(PublicIpLightFromJSON)),
        'state': !exists(json, 'State') ? undefined : json['State'],
        'subnetId': !exists(json, 'SubnetId') ? undefined : json['SubnetId'],
        'tags': !exists(json, 'Tags') ? undefined : ((json['Tags'] as Array<any>).map(ResourceTagFromJSON)),
    };
}

export function NatServiceToJSON(value?: NatService | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'NatServiceId': value.natServiceId,
        'NetId': value.netId,
        'PublicIps': value.publicIps === undefined ? undefined : ((value.publicIps as Array<any>).map(PublicIpLightToJSON)),
        'State': value.state,
        'SubnetId': value.subnetId,
        'Tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(ResourceTagToJSON)),
    };
}

