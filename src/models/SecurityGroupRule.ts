/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. >  > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html). ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages. ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html).
 *
 * The version of the OpenAPI document: 1.28.7
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    SecurityGroupsMember,
    SecurityGroupsMemberFromJSON,
    SecurityGroupsMemberFromJSONTyped,
    SecurityGroupsMemberToJSON,
} from './SecurityGroupsMember';

/**
 * Information about the security group rule.
 * @export
 * @interface SecurityGroupRule
 */
export interface SecurityGroupRule {
    /**
     * The beginning of the port range for the TCP and UDP protocols, or an ICMP type number.
     * @type {number}
     * @memberof SecurityGroupRule
     */
    fromPortRange?: number;
    /**
     * The IP protocol name (`tcp`, `udp`, `icmp`, or `-1` for all protocols). By default, `-1`. In a Net, this can also be an IP protocol number. For more information, see the [IANA.org website](https://www.iana.org/assignments/protocol-numbers/protocol-numbers.xhtml).
     * @type {string}
     * @memberof SecurityGroupRule
     */
    ipProtocol?: string;
    /**
     * One or more IP ranges for the security group rules, in CIDR notation (for example, `10.0.0.0/16`).
     * @type {Array<string>}
     * @memberof SecurityGroupRule
     */
    ipRanges?: Array<string>;
    /**
     * Information about one or more source or destination security groups.
     * @type {Array<SecurityGroupsMember>}
     * @memberof SecurityGroupRule
     */
    securityGroupsMembers?: Array<SecurityGroupsMember>;
    /**
     * One or more service IDs to allow traffic from a Net to access the corresponding OUTSCALE services. For more information, see [ReadNetAccessPointServices](#readnetaccesspointservices).
     * @type {Array<string>}
     * @memberof SecurityGroupRule
     */
    serviceIds?: Array<string>;
    /**
     * The end of the port range for the TCP and UDP protocols, or an ICMP code number.
     * @type {number}
     * @memberof SecurityGroupRule
     */
    toPortRange?: number;
}

export function SecurityGroupRuleFromJSON(json: any): SecurityGroupRule {
    return SecurityGroupRuleFromJSONTyped(json, false);
}

export function SecurityGroupRuleFromJSONTyped(json: any, ignoreDiscriminator: boolean): SecurityGroupRule {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fromPortRange': !exists(json, 'FromPortRange') ? undefined : json['FromPortRange'],
        'ipProtocol': !exists(json, 'IpProtocol') ? undefined : json['IpProtocol'],
        'ipRanges': !exists(json, 'IpRanges') ? undefined : json['IpRanges'],
        'securityGroupsMembers': !exists(json, 'SecurityGroupsMembers') ? undefined : ((json['SecurityGroupsMembers'] as Array<any>).map(SecurityGroupsMemberFromJSON)),
        'serviceIds': !exists(json, 'ServiceIds') ? undefined : json['ServiceIds'],
        'toPortRange': !exists(json, 'ToPortRange') ? undefined : json['ToPortRange'],
    };
}

export function SecurityGroupRuleToJSON(value?: SecurityGroupRule | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'FromPortRange': value.fromPortRange,
        'IpProtocol': value.ipProtocol,
        'IpRanges': value.ipRanges,
        'SecurityGroupsMembers': value.securityGroupsMembers === undefined ? undefined : ((value.securityGroupsMembers as Array<any>).map(SecurityGroupsMemberToJSON)),
        'ServiceIds': value.serviceIds,
        'ToPortRange': value.toPortRange,
    };
}

