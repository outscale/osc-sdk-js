/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the service.
 * @export
 * @interface Service
 */
export interface Service {
    /**
     * The list of network prefixes used by the service, in CIDR notation.
     * @type {Array<string>}
     * @memberof Service
     */
    ipRanges?: Array<string>;
    /**
     * The ID of the service.
     * @type {string}
     * @memberof Service
     */
    serviceId?: string;
    /**
     * The name of the service.
     * @type {string}
     * @memberof Service
     */
    serviceName?: string;
}

export function ServiceFromJSON(json: any): Service {
    return ServiceFromJSONTyped(json, false);
}

export function ServiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Service {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ipRanges': !exists(json, 'IpRanges') ? undefined : json['IpRanges'],
        'serviceId': !exists(json, 'ServiceId') ? undefined : json['ServiceId'],
        'serviceName': !exists(json, 'ServiceName') ? undefined : json['ServiceName'],
    };
}

export function ServiceToJSON(value?: Service | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'IpRanges': value.ipRanges,
        'ServiceId': value.serviceId,
        'ServiceName': value.serviceName,
    };
}

