/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.22
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateSnapshotRequest
 */
export interface CreateSnapshotRequest {
    /**
     * A description for the snapshot.
     * @type {string}
     * @memberof CreateSnapshotRequest
     */
    description?: string;
    /**
     * If true, checks whether you have the required permissions to perform the action.
     * @type {boolean}
     * @memberof CreateSnapshotRequest
     */
    dryRun?: boolean;
    /**
     * (When importing) The pre-signed URL of the snapshot you want to import, or the normal URL of the snapshot if you have permission on the OOS bucket. For more information, see [Configuring a Pre-signed URL](https://docs.outscale.com/en/userguide/Configuring-a-Pre-signed-URL.html) or [Managing Access to Your Buckets and Objects](https://docs.outscale.com/en/userguide/Managing-Access-to-Your-Buckets-and-Objects.html).
     * @type {string}
     * @memberof CreateSnapshotRequest
     */
    fileLocation?: string;
    /**
     * (When importing) The size of the snapshot you want to create in your account, in bytes. This size must be greater than or equal to the size of the original, uncompressed snapshot.
     * @type {number}
     * @memberof CreateSnapshotRequest
     */
    snapshotSize?: number;
    /**
     * (When copying) The name of the source Region, which must be the same as the Region of your account.
     * @type {string}
     * @memberof CreateSnapshotRequest
     */
    sourceRegionName?: string;
    /**
     * (When copying) The ID of the snapshot you want to copy.
     * @type {string}
     * @memberof CreateSnapshotRequest
     */
    sourceSnapshotId?: string;
    /**
     * (When creating) The ID of the volume you want to create a snapshot of.
     * @type {string}
     * @memberof CreateSnapshotRequest
     */
    volumeId?: string;
}

export function CreateSnapshotRequestFromJSON(json: any): CreateSnapshotRequest {
    return CreateSnapshotRequestFromJSONTyped(json, false);
}

export function CreateSnapshotRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateSnapshotRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'dryRun': !exists(json, 'DryRun') ? undefined : json['DryRun'],
        'fileLocation': !exists(json, 'FileLocation') ? undefined : json['FileLocation'],
        'snapshotSize': !exists(json, 'SnapshotSize') ? undefined : json['SnapshotSize'],
        'sourceRegionName': !exists(json, 'SourceRegionName') ? undefined : json['SourceRegionName'],
        'sourceSnapshotId': !exists(json, 'SourceSnapshotId') ? undefined : json['SourceSnapshotId'],
        'volumeId': !exists(json, 'VolumeId') ? undefined : json['VolumeId'],
    };
}

export function CreateSnapshotRequestToJSON(value?: CreateSnapshotRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Description': value.description,
        'DryRun': value.dryRun,
        'FileLocation': value.fileLocation,
        'SnapshotSize': value.snapshotSize,
        'SourceRegionName': value.sourceRegionName,
        'SourceSnapshotId': value.sourceSnapshotId,
        'VolumeId': value.volumeId,
    };
}

