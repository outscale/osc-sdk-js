/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.27
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateAccessKeyRequest
 */
export interface UpdateAccessKeyRequest {
    /**
     * The ID of the access key.
     * @type {string}
     * @memberof UpdateAccessKeyRequest
     */
    accessKeyId: string;
    /**
     * If true, checks whether you have the required permissions to perform the action.
     * @type {boolean}
     * @memberof UpdateAccessKeyRequest
     */
    dryRun?: boolean;
    /**
     * The date and time, or the date, at which you want the access key to expire, in ISO 8601 format (for example, `2020-06-14T00:00:00.000Z` or `2020-06-14`). If not specified, the access key is set to not expire.
     * @type {string}
     * @memberof UpdateAccessKeyRequest
     */
    expirationDate?: string;
    /**
     * The new state for the access key (`ACTIVE` \| `INACTIVE`). When set to `ACTIVE`, the access key is enabled and can be used to send requests. When set to `INACTIVE`, the access key is disabled.
     * @type {string}
     * @memberof UpdateAccessKeyRequest
     */
    state: string;
    /**
     * The name of the EIM the access key you want to modify is associated with. If you do not specify a user name, this action modifies the access key of the user who sends the request (which can be the root account).
     * @type {string}
     * @memberof UpdateAccessKeyRequest
     */
    userName?: string;
}

export function UpdateAccessKeyRequestFromJSON(json: any): UpdateAccessKeyRequest {
    return UpdateAccessKeyRequestFromJSONTyped(json, false);
}

export function UpdateAccessKeyRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateAccessKeyRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessKeyId': json['AccessKeyId'],
        'dryRun': !exists(json, 'DryRun') ? undefined : json['DryRun'],
        'expirationDate': !exists(json, 'ExpirationDate') ? undefined : json['ExpirationDate'],
        'state': json['State'],
        'userName': !exists(json, 'UserName') ? undefined : json['UserName'],
    };
}

export function UpdateAccessKeyRequestToJSON(value?: UpdateAccessKeyRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'AccessKeyId': value.accessKeyId,
        'DryRun': value.dryRun,
        'ExpirationDate': value.expirationDate,
        'State': value.state,
        'UserName': value.userName,
    };
}

