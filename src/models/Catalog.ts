/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CatalogEntry,
    CatalogEntryFromJSON,
    CatalogEntryFromJSONTyped,
    CatalogEntryToJSON,
} from './CatalogEntry';

/**
 * Information about our catalog of prices.
 * @export
 * @interface Catalog
 */
export interface Catalog {
    /**
     * One or more catalog entries.
     * @type {Array<CatalogEntry>}
     * @memberof Catalog
     */
    entries?: Array<CatalogEntry>;
}

export function CatalogFromJSON(json: any): Catalog {
    return CatalogFromJSONTyped(json, false);
}

export function CatalogFromJSONTyped(json: any, ignoreDiscriminator: boolean): Catalog {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entries': !exists(json, 'Entries') ? undefined : ((json['Entries'] as Array<any>).map(CatalogEntryFromJSON)),
    };
}

export function CatalogToJSON(value?: Catalog | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Entries': value.entries === undefined ? undefined : ((value.entries as Array<any>).map(CatalogEntryToJSON)),
    };
}

