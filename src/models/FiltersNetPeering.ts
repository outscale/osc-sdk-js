/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * One or more filters.
 * @export
 * @interface FiltersNetPeering
 */
export interface FiltersNetPeering {
    /**
     * The account IDs of the owners of the peer Nets.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    accepterNetAccountIds?: Array<string>;
    /**
     * The IP ranges of the peer Nets, in CIDR notation (for example, 10.0.0.0/24).
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    accepterNetIpRanges?: Array<string>;
    /**
     * The IDs of the peer Nets.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    accepterNetNetIds?: Array<string>;
    /**
     * The IDs of the Net peering connections.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    netPeeringIds?: Array<string>;
    /**
     * The account IDs of the owners of the peer Nets.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    sourceNetAccountIds?: Array<string>;
    /**
     * The IP ranges of the peer Nets.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    sourceNetIpRanges?: Array<string>;
    /**
     * The IDs of the peer Nets.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    sourceNetNetIds?: Array<string>;
    /**
     * Additional information about the states of the Net peering connections.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    stateMessages?: Array<string>;
    /**
     * The states of the Net peering connections (`pending-acceptance` \| `active` \| `rejected` \| `failed` \| `expired` \| `deleted`).
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    stateNames?: Array<string>;
    /**
     * The keys of the tags associated with the Net peering connections.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    tagKeys?: Array<string>;
    /**
     * The values of the tags associated with the Net peering connections.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    tagValues?: Array<string>;
    /**
     * The key/value combination of the tags associated with the Net peering connections, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
     * @type {Array<string>}
     * @memberof FiltersNetPeering
     */
    tags?: Array<string>;
}

export function FiltersNetPeeringFromJSON(json: any): FiltersNetPeering {
    return FiltersNetPeeringFromJSONTyped(json, false);
}

export function FiltersNetPeeringFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiltersNetPeering {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accepterNetAccountIds': !exists(json, 'AccepterNetAccountIds') ? undefined : json['AccepterNetAccountIds'],
        'accepterNetIpRanges': !exists(json, 'AccepterNetIpRanges') ? undefined : json['AccepterNetIpRanges'],
        'accepterNetNetIds': !exists(json, 'AccepterNetNetIds') ? undefined : json['AccepterNetNetIds'],
        'netPeeringIds': !exists(json, 'NetPeeringIds') ? undefined : json['NetPeeringIds'],
        'sourceNetAccountIds': !exists(json, 'SourceNetAccountIds') ? undefined : json['SourceNetAccountIds'],
        'sourceNetIpRanges': !exists(json, 'SourceNetIpRanges') ? undefined : json['SourceNetIpRanges'],
        'sourceNetNetIds': !exists(json, 'SourceNetNetIds') ? undefined : json['SourceNetNetIds'],
        'stateMessages': !exists(json, 'StateMessages') ? undefined : json['StateMessages'],
        'stateNames': !exists(json, 'StateNames') ? undefined : json['StateNames'],
        'tagKeys': !exists(json, 'TagKeys') ? undefined : json['TagKeys'],
        'tagValues': !exists(json, 'TagValues') ? undefined : json['TagValues'],
        'tags': !exists(json, 'Tags') ? undefined : json['Tags'],
    };
}

export function FiltersNetPeeringToJSON(value?: FiltersNetPeering | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'AccepterNetAccountIds': value.accepterNetAccountIds,
        'AccepterNetIpRanges': value.accepterNetIpRanges,
        'AccepterNetNetIds': value.accepterNetNetIds,
        'NetPeeringIds': value.netPeeringIds,
        'SourceNetAccountIds': value.sourceNetAccountIds,
        'SourceNetIpRanges': value.sourceNetIpRanges,
        'SourceNetNetIds': value.sourceNetNetIds,
        'StateMessages': value.stateMessages,
        'StateNames': value.stateNames,
        'TagKeys': value.tagKeys,
        'TagValues': value.tagValues,
        'Tags': value.tags,
    };
}

