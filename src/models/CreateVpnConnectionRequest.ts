/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CreateVpnConnectionRequest
 */
export interface CreateVpnConnectionRequest {
    /**
     * The ID of the client gateway.
     * @type {string}
     * @memberof CreateVpnConnectionRequest
     */
    clientGatewayId: string;
    /**
     * The type of VPN connection (only `ipsec.1` is supported).
     * @type {string}
     * @memberof CreateVpnConnectionRequest
     */
    connectionType: string;
    /**
     * If true, checks whether you have the required permissions to perform the action.
     * @type {boolean}
     * @memberof CreateVpnConnectionRequest
     */
    dryRun?: boolean;
    /**
     * If false, the VPN connection uses dynamic routing with Border Gateway Protocol (BGP). If true, routing is controlled using static routes. For more information about how to create and delete static routes, see [CreateVpnConnectionRoute](#createvpnconnectionroute) and [DeleteVpnConnectionRoute](#deletevpnconnectionroute).
     * @type {boolean}
     * @memberof CreateVpnConnectionRequest
     */
    staticRoutesOnly?: boolean;
    /**
     * The ID of the virtual gateway.
     * @type {string}
     * @memberof CreateVpnConnectionRequest
     */
    virtualGatewayId: string;
}

export function CreateVpnConnectionRequestFromJSON(json: any): CreateVpnConnectionRequest {
    return CreateVpnConnectionRequestFromJSONTyped(json, false);
}

export function CreateVpnConnectionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateVpnConnectionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'clientGatewayId': json['ClientGatewayId'],
        'connectionType': json['ConnectionType'],
        'dryRun': !exists(json, 'DryRun') ? undefined : json['DryRun'],
        'staticRoutesOnly': !exists(json, 'StaticRoutesOnly') ? undefined : json['StaticRoutesOnly'],
        'virtualGatewayId': json['VirtualGatewayId'],
    };
}

export function CreateVpnConnectionRequestToJSON(value?: CreateVpnConnectionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ClientGatewayId': value.clientGatewayId,
        'ConnectionType': value.connectionType,
        'DryRun': value.dryRun,
        'StaticRoutesOnly': value.staticRoutesOnly,
        'VirtualGatewayId': value.virtualGatewayId,
    };
}

