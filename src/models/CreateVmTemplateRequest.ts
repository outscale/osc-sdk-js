/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.27
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ResourceTag,
    ResourceTagFromJSON,
    ResourceTagFromJSONTyped,
    ResourceTagToJSON,
} from './ResourceTag';

/**
 * 
 * @export
 * @interface CreateVmTemplateRequest
 */
export interface CreateVmTemplateRequest {
    /**
     * The number of vCores to use for each VM.
     * @type {number}
     * @memberof CreateVmTemplateRequest
     */
    cpuCores: number;
    /**
     * The processor generation to use for each VM (for example, `v4`).
     * @type {string}
     * @memberof CreateVmTemplateRequest
     */
    cpuGeneration: string;
    /**
     * The performance of the VMs (`medium` \| `high` \|  `highest`). 
     * @type {string}
     * @memberof CreateVmTemplateRequest
     */
    cpuPerformance?: CreateVmTemplateRequestCpuPerformanceEnum;
    /**
     * A description for the VM template.
     * @type {string}
     * @memberof CreateVmTemplateRequest
     */
    description?: string;
    /**
     * If true, checks whether you have the required permissions to perform the action.
     * @type {boolean}
     * @memberof CreateVmTemplateRequest
     */
    dryRun?: boolean;
    /**
     * The ID of the OMI to use for each VM. You can find a list of OMIs by calling the [ReadImages](#readimages) method.
     * @type {string}
     * @memberof CreateVmTemplateRequest
     */
    imageId: string;
    /**
     * The name of the keypair to use for each VM.
     * @type {string}
     * @memberof CreateVmTemplateRequest
     */
    keypairName?: string;
    /**
     * The amount of RAM to use for each VM.
     * @type {number}
     * @memberof CreateVmTemplateRequest
     */
    ram: number;
    /**
     * One or more tags to add to the VM template.
     * @type {Array<ResourceTag>}
     * @memberof CreateVmTemplateRequest
     */
    tags?: Array<ResourceTag>;
    /**
     * The name of the VM template.
     * @type {string}
     * @memberof CreateVmTemplateRequest
     */
    vmTemplateName: string;
}


/**
 * @export
 */
export const CreateVmTemplateRequestCpuPerformanceEnum = {
    Medium: 'medium',
    High: 'high',
    Highest: 'highest'
} as const;
export type CreateVmTemplateRequestCpuPerformanceEnum = typeof CreateVmTemplateRequestCpuPerformanceEnum[keyof typeof CreateVmTemplateRequestCpuPerformanceEnum];


export function CreateVmTemplateRequestFromJSON(json: any): CreateVmTemplateRequest {
    return CreateVmTemplateRequestFromJSONTyped(json, false);
}

export function CreateVmTemplateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateVmTemplateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'cpuCores': json['CpuCores'],
        'cpuGeneration': json['CpuGeneration'],
        'cpuPerformance': !exists(json, 'CpuPerformance') ? undefined : json['CpuPerformance'],
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'dryRun': !exists(json, 'DryRun') ? undefined : json['DryRun'],
        'imageId': json['ImageId'],
        'keypairName': !exists(json, 'KeypairName') ? undefined : json['KeypairName'],
        'ram': json['Ram'],
        'tags': !exists(json, 'Tags') ? undefined : ((json['Tags'] as Array<any>).map(ResourceTagFromJSON)),
        'vmTemplateName': json['VmTemplateName'],
    };
}

export function CreateVmTemplateRequestToJSON(value?: CreateVmTemplateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'CpuCores': value.cpuCores,
        'CpuGeneration': value.cpuGeneration,
        'CpuPerformance': value.cpuPerformance,
        'Description': value.description,
        'DryRun': value.dryRun,
        'ImageId': value.imageId,
        'KeypairName': value.keypairName,
        'Ram': value.ram,
        'Tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(ResourceTagToJSON)),
        'VmTemplateName': value.vmTemplateName,
    };
}

