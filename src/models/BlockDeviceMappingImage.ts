/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.26
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BsuToCreate,
    BsuToCreateFromJSON,
    BsuToCreateFromJSONTyped,
    BsuToCreateToJSON,
} from './BsuToCreate';

/**
 * One or more parameters used to automatically set up volumes when the VM is created.
 * @export
 * @interface BlockDeviceMappingImage
 */
export interface BlockDeviceMappingImage {
    /**
     * 
     * @type {BsuToCreate}
     * @memberof BlockDeviceMappingImage
     */
    bsu?: BsuToCreate;
    /**
     * The device name for the volume. For a root device, you must use `/dev/sda1`. For other volumes, you must use `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX` (where the first `X` is a letter between `b` and `z`, and the second `X` is a letter between `a` and `z`).
     * @type {string}
     * @memberof BlockDeviceMappingImage
     */
    deviceName?: string;
    /**
     * The name of the virtual device (`ephemeralN`).
     * @type {string}
     * @memberof BlockDeviceMappingImage
     */
    virtualDeviceName?: string;
}

export function BlockDeviceMappingImageFromJSON(json: any): BlockDeviceMappingImage {
    return BlockDeviceMappingImageFromJSONTyped(json, false);
}

export function BlockDeviceMappingImageFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockDeviceMappingImage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bsu': !exists(json, 'Bsu') ? undefined : BsuToCreateFromJSON(json['Bsu']),
        'deviceName': !exists(json, 'DeviceName') ? undefined : json['DeviceName'],
        'virtualDeviceName': !exists(json, 'VirtualDeviceName') ? undefined : json['VirtualDeviceName'],
    };
}

export function BlockDeviceMappingImageToJSON(value?: BlockDeviceMappingImage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Bsu': BsuToCreateToJSON(value.bsu),
        'DeviceName': value.deviceName,
        'VirtualDeviceName': value.virtualDeviceName,
    };
}

