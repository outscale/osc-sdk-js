/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the VM type.
 * @export
 * @interface VmType
 */
export interface VmType {
    /**
     * This parameter is not available. It is present in our API for the sake of historical compatibility with AWS.
     * @type {boolean}
     * @memberof VmType
     */
    bsuOptimized?: boolean;
    /**
     * The maximum number of private IPs per network interface card (NIC).
     * @type {number}
     * @memberof VmType
     */
    maxPrivateIps?: number;
    /**
     * The amount of memory, in gibibytes.
     * @type {number}
     * @memberof VmType
     */
    memorySize?: number;
    /**
     * The number of vCores.
     * @type {number}
     * @memberof VmType
     */
    vcoreCount?: number;
    /**
     * The name of the VM type.
     * @type {string}
     * @memberof VmType
     */
    vmTypeName?: string;
    /**
     * The maximum number of ephemeral storage disks.
     * @type {number}
     * @memberof VmType
     */
    volumeCount?: number;
    /**
     * The size of one ephemeral storage disk, in gibibytes (GiB).
     * @type {number}
     * @memberof VmType
     */
    volumeSize?: number;
}

export function VmTypeFromJSON(json: any): VmType {
    return VmTypeFromJSONTyped(json, false);
}

export function VmTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): VmType {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'bsuOptimized': !exists(json, 'BsuOptimized') ? undefined : json['BsuOptimized'],
        'maxPrivateIps': !exists(json, 'MaxPrivateIps') ? undefined : json['MaxPrivateIps'],
        'memorySize': !exists(json, 'MemorySize') ? undefined : json['MemorySize'],
        'vcoreCount': !exists(json, 'VcoreCount') ? undefined : json['VcoreCount'],
        'vmTypeName': !exists(json, 'VmTypeName') ? undefined : json['VmTypeName'],
        'volumeCount': !exists(json, 'VolumeCount') ? undefined : json['VolumeCount'],
        'volumeSize': !exists(json, 'VolumeSize') ? undefined : json['VolumeSize'],
    };
}

export function VmTypeToJSON(value?: VmType | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'BsuOptimized': value.bsuOptimized,
        'MaxPrivateIps': value.maxPrivateIps,
        'MemorySize': value.memorySize,
        'VcoreCount': value.vcoreCount,
        'VmTypeName': value.vmTypeName,
        'VolumeCount': value.volumeCount,
        'VolumeSize': value.volumeSize,
    };
}

