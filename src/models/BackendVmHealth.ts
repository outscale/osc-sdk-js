/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).
 *
 * The version of the OpenAPI document: 1.22
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the health of a back-end VM.
 * @export
 * @interface BackendVmHealth
 */
export interface BackendVmHealth {
    /**
     * The description of the state of the back-end VM.
     * @type {string}
     * @memberof BackendVmHealth
     */
    description?: string;
    /**
     * The state of the back-end VM (`InService` \| `OutOfService` \| `Unknown`).
     * @type {string}
     * @memberof BackendVmHealth
     */
    state?: string;
    /**
     * Information about the cause of `OutOfService` VMs.<br />
     * Specifically, whether the cause is Elastic Load Balancing or the VM (`ELB` \| `Instance` \| `N/A`).
     * @type {string}
     * @memberof BackendVmHealth
     */
    stateReason?: string;
    /**
     * The ID of the back-end VM.
     * @type {string}
     * @memberof BackendVmHealth
     */
    vmId?: string;
}

export function BackendVmHealthFromJSON(json: any): BackendVmHealth {
    return BackendVmHealthFromJSONTyped(json, false);
}

export function BackendVmHealthFromJSONTyped(json: any, ignoreDiscriminator: boolean): BackendVmHealth {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'state': !exists(json, 'State') ? undefined : json['State'],
        'stateReason': !exists(json, 'StateReason') ? undefined : json['StateReason'],
        'vmId': !exists(json, 'VmId') ? undefined : json['VmId'],
    };
}

export function BackendVmHealthToJSON(value?: BackendVmHealth | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'Description': value.description,
        'State': value.state,
        'StateReason': value.stateReason,
        'VmId': value.vmId,
    };
}

