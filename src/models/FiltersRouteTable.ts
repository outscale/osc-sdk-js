/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * One or more filters.
 * @export
 * @interface FiltersRouteTable
 */
export interface FiltersRouteTable {
    /**
     * The IDs of the route tables involved in the associations.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    linkRouteTableIds?: Array<string>;
    /**
     * The IDs of the associations between the route tables and the Subnets.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    linkRouteTableLinkRouteTableIds?: Array<string>;
    /**
     * If true, the route tables are the main ones for their Nets.
     * @type {boolean}
     * @memberof FiltersRouteTable
     */
    linkRouteTableMain?: boolean;
    /**
     * The IDs of the Subnets involved in the associations.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    linkSubnetIds?: Array<string>;
    /**
     * The IDs of the Nets for the route tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    netIds?: Array<string>;
    /**
     * The methods used to create a route.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeCreationMethods?: Array<string>;
    /**
     * The IP ranges specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeDestinationIpRanges?: Array<string>;
    /**
     * The service IDs specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeDestinationServiceIds?: Array<string>;
    /**
     * The IDs of the gateways specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeGatewayIds?: Array<string>;
    /**
     * The IDs of the NAT services specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeNatServiceIds?: Array<string>;
    /**
     * The IDs of the Net peering connections specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeNetPeeringIds?: Array<string>;
    /**
     * The states of routes in the route tables (`active` \| `blackhole`). The `blackhole` state indicates that the target of the route is not available.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeStates?: Array<string>;
    /**
     * The IDs of the route tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeTableIds?: Array<string>;
    /**
     * The IDs of the VMs specified in routes in the tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    routeVmIds?: Array<string>;
    /**
     * The keys of the tags associated with the route tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    tagKeys?: Array<string>;
    /**
     * The values of the tags associated with the route tables.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    tagValues?: Array<string>;
    /**
     * The key/value combination of the tags associated with the route tables, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
     * @type {Array<string>}
     * @memberof FiltersRouteTable
     */
    tags?: Array<string>;
}

export function FiltersRouteTableFromJSON(json: any): FiltersRouteTable {
    return FiltersRouteTableFromJSONTyped(json, false);
}

export function FiltersRouteTableFromJSONTyped(json: any, ignoreDiscriminator: boolean): FiltersRouteTable {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'linkRouteTableIds': !exists(json, 'LinkRouteTableIds') ? undefined : json['LinkRouteTableIds'],
        'linkRouteTableLinkRouteTableIds': !exists(json, 'LinkRouteTableLinkRouteTableIds') ? undefined : json['LinkRouteTableLinkRouteTableIds'],
        'linkRouteTableMain': !exists(json, 'LinkRouteTableMain') ? undefined : json['LinkRouteTableMain'],
        'linkSubnetIds': !exists(json, 'LinkSubnetIds') ? undefined : json['LinkSubnetIds'],
        'netIds': !exists(json, 'NetIds') ? undefined : json['NetIds'],
        'routeCreationMethods': !exists(json, 'RouteCreationMethods') ? undefined : json['RouteCreationMethods'],
        'routeDestinationIpRanges': !exists(json, 'RouteDestinationIpRanges') ? undefined : json['RouteDestinationIpRanges'],
        'routeDestinationServiceIds': !exists(json, 'RouteDestinationServiceIds') ? undefined : json['RouteDestinationServiceIds'],
        'routeGatewayIds': !exists(json, 'RouteGatewayIds') ? undefined : json['RouteGatewayIds'],
        'routeNatServiceIds': !exists(json, 'RouteNatServiceIds') ? undefined : json['RouteNatServiceIds'],
        'routeNetPeeringIds': !exists(json, 'RouteNetPeeringIds') ? undefined : json['RouteNetPeeringIds'],
        'routeStates': !exists(json, 'RouteStates') ? undefined : json['RouteStates'],
        'routeTableIds': !exists(json, 'RouteTableIds') ? undefined : json['RouteTableIds'],
        'routeVmIds': !exists(json, 'RouteVmIds') ? undefined : json['RouteVmIds'],
        'tagKeys': !exists(json, 'TagKeys') ? undefined : json['TagKeys'],
        'tagValues': !exists(json, 'TagValues') ? undefined : json['TagValues'],
        'tags': !exists(json, 'Tags') ? undefined : json['Tags'],
    };
}

export function FiltersRouteTableToJSON(value?: FiltersRouteTable | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'LinkRouteTableIds': value.linkRouteTableIds,
        'LinkRouteTableLinkRouteTableIds': value.linkRouteTableLinkRouteTableIds,
        'LinkRouteTableMain': value.linkRouteTableMain,
        'LinkSubnetIds': value.linkSubnetIds,
        'NetIds': value.netIds,
        'RouteCreationMethods': value.routeCreationMethods,
        'RouteDestinationIpRanges': value.routeDestinationIpRanges,
        'RouteDestinationServiceIds': value.routeDestinationServiceIds,
        'RouteGatewayIds': value.routeGatewayIds,
        'RouteNatServiceIds': value.routeNatServiceIds,
        'RouteNetPeeringIds': value.routeNetPeeringIds,
        'RouteStates': value.routeStates,
        'RouteTableIds': value.routeTableIds,
        'RouteVmIds': value.routeVmIds,
        'TagKeys': value.tagKeys,
        'TagValues': value.tagValues,
        'Tags': value.tags,
    };
}

