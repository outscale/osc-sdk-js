/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UpdateServerCertificateRequest
 */
export interface UpdateServerCertificateRequest {
    /**
     * If true, checks whether you have the required permissions to perform the action.
     * @type {boolean}
     * @memberof UpdateServerCertificateRequest
     */
    dryRun?: boolean;
    /**
     * The name of the server certificate you want to modify.
     * @type {string}
     * @memberof UpdateServerCertificateRequest
     */
    name: string;
    /**
     * A new name for the server certificate.
     * @type {string}
     * @memberof UpdateServerCertificateRequest
     */
    newName?: string;
    /**
     * A new path for the server certificate.
     * @type {string}
     * @memberof UpdateServerCertificateRequest
     */
    newPath?: string;
}

export function UpdateServerCertificateRequestFromJSON(json: any): UpdateServerCertificateRequest {
    return UpdateServerCertificateRequestFromJSONTyped(json, false);
}

export function UpdateServerCertificateRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpdateServerCertificateRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dryRun': !exists(json, 'DryRun') ? undefined : json['DryRun'],
        'name': json['Name'],
        'newName': !exists(json, 'NewName') ? undefined : json['NewName'],
        'newPath': !exists(json, 'NewPath') ? undefined : json['NewPath'],
    };
}

export function UpdateServerCertificateRequestToJSON(value?: UpdateServerCertificateRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'DryRun': value.dryRun,
        'Name': value.name,
        'NewName': value.newName,
        'NewPath': value.newPath,
    };
}

