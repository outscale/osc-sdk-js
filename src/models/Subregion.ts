/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> You can learn more about errors returned by the API in the dedicated [errors page](api/errors).<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.20
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the Subregion.
 * @export
 * @interface Subregion
 */
export interface Subregion {
    /**
     * The location code of the Subregion.
     * @type {string}
     * @memberof Subregion
     */
    locationCode?: string;
    /**
     * The name of the Region containing the Subregion.
     * @type {string}
     * @memberof Subregion
     */
    regionName?: string;
    /**
     * The state of the Subregion (`available` \| `information` \| `impaired` \| `unavailable`).
     * @type {string}
     * @memberof Subregion
     */
    state?: string;
    /**
     * The name of the Subregion.
     * @type {string}
     * @memberof Subregion
     */
    subregionName?: string;
}

export function SubregionFromJSON(json: any): Subregion {
    return SubregionFromJSONTyped(json, false);
}

export function SubregionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Subregion {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'locationCode': !exists(json, 'LocationCode') ? undefined : json['LocationCode'],
        'regionName': !exists(json, 'RegionName') ? undefined : json['RegionName'],
        'state': !exists(json, 'State') ? undefined : json['State'],
        'subregionName': !exists(json, 'SubregionName') ? undefined : json['SubregionName'],
    };
}

export function SubregionToJSON(value?: Subregion | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'LocationCode': value.locationCode,
        'RegionName': value.regionName,
        'State': value.state,
        'SubregionName': value.subregionName,
    };
}

