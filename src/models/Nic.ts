/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    LinkNic,
    LinkNicFromJSON,
    LinkNicFromJSONTyped,
    LinkNicToJSON,
} from './LinkNic';
import {
    LinkPublicIp,
    LinkPublicIpFromJSON,
    LinkPublicIpFromJSONTyped,
    LinkPublicIpToJSON,
} from './LinkPublicIp';
import {
    PrivateIp,
    PrivateIpFromJSON,
    PrivateIpFromJSONTyped,
    PrivateIpToJSON,
} from './PrivateIp';
import {
    ResourceTag,
    ResourceTagFromJSON,
    ResourceTagFromJSONTyped,
    ResourceTagToJSON,
} from './ResourceTag';
import {
    SecurityGroupLight,
    SecurityGroupLightFromJSON,
    SecurityGroupLightFromJSONTyped,
    SecurityGroupLightToJSON,
} from './SecurityGroupLight';

/**
 * Information about the NIC.
 * @export
 * @interface Nic
 */
export interface Nic {
    /**
     * The account ID of the owner of the NIC.
     * @type {string}
     * @memberof Nic
     */
    accountId?: string;
    /**
     * The description of the NIC.
     * @type {string}
     * @memberof Nic
     */
    description?: string;
    /**
     * (Net only) If true, the source/destination check is enabled. If false, it is disabled. This value must be false for a NAT VM to perform network address translation (NAT) in a Net.
     * @type {boolean}
     * @memberof Nic
     */
    isSourceDestChecked?: boolean;
    /**
     * 
     * @type {LinkNic}
     * @memberof Nic
     */
    linkNic?: LinkNic;
    /**
     * 
     * @type {LinkPublicIp}
     * @memberof Nic
     */
    linkPublicIp?: LinkPublicIp;
    /**
     * The Media Access Control (MAC) address of the NIC.
     * @type {string}
     * @memberof Nic
     */
    macAddress?: string;
    /**
     * The ID of the Net for the NIC.
     * @type {string}
     * @memberof Nic
     */
    netId?: string;
    /**
     * The ID of the NIC.
     * @type {string}
     * @memberof Nic
     */
    nicId?: string;
    /**
     * The name of the private DNS.
     * @type {string}
     * @memberof Nic
     */
    privateDnsName?: string;
    /**
     * The private IPs of the NIC.
     * @type {Array<PrivateIp>}
     * @memberof Nic
     */
    privateIps?: Array<PrivateIp>;
    /**
     * One or more IDs of security groups for the NIC.
     * @type {Array<SecurityGroupLight>}
     * @memberof Nic
     */
    securityGroups?: Array<SecurityGroupLight>;
    /**
     * The state of the NIC (`available` \| `attaching` \| `in-use` \| `detaching`).
     * @type {string}
     * @memberof Nic
     */
    state?: string;
    /**
     * The ID of the Subnet.
     * @type {string}
     * @memberof Nic
     */
    subnetId?: string;
    /**
     * The Subregion in which the NIC is located.
     * @type {string}
     * @memberof Nic
     */
    subregionName?: string;
    /**
     * One or more tags associated with the NIC.
     * @type {Array<ResourceTag>}
     * @memberof Nic
     */
    tags?: Array<ResourceTag>;
}

export function NicFromJSON(json: any): Nic {
    return NicFromJSONTyped(json, false);
}

export function NicFromJSONTyped(json: any, ignoreDiscriminator: boolean): Nic {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accountId': !exists(json, 'AccountId') ? undefined : json['AccountId'],
        'description': !exists(json, 'Description') ? undefined : json['Description'],
        'isSourceDestChecked': !exists(json, 'IsSourceDestChecked') ? undefined : json['IsSourceDestChecked'],
        'linkNic': !exists(json, 'LinkNic') ? undefined : LinkNicFromJSON(json['LinkNic']),
        'linkPublicIp': !exists(json, 'LinkPublicIp') ? undefined : LinkPublicIpFromJSON(json['LinkPublicIp']),
        'macAddress': !exists(json, 'MacAddress') ? undefined : json['MacAddress'],
        'netId': !exists(json, 'NetId') ? undefined : json['NetId'],
        'nicId': !exists(json, 'NicId') ? undefined : json['NicId'],
        'privateDnsName': !exists(json, 'PrivateDnsName') ? undefined : json['PrivateDnsName'],
        'privateIps': !exists(json, 'PrivateIps') ? undefined : ((json['PrivateIps'] as Array<any>).map(PrivateIpFromJSON)),
        'securityGroups': !exists(json, 'SecurityGroups') ? undefined : ((json['SecurityGroups'] as Array<any>).map(SecurityGroupLightFromJSON)),
        'state': !exists(json, 'State') ? undefined : json['State'],
        'subnetId': !exists(json, 'SubnetId') ? undefined : json['SubnetId'],
        'subregionName': !exists(json, 'SubregionName') ? undefined : json['SubregionName'],
        'tags': !exists(json, 'Tags') ? undefined : ((json['Tags'] as Array<any>).map(ResourceTagFromJSON)),
    };
}

export function NicToJSON(value?: Nic | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'AccountId': value.accountId,
        'Description': value.description,
        'IsSourceDestChecked': value.isSourceDestChecked,
        'LinkNic': LinkNicToJSON(value.linkNic),
        'LinkPublicIp': LinkPublicIpToJSON(value.linkPublicIp),
        'MacAddress': value.macAddress,
        'NetId': value.netId,
        'NicId': value.nicId,
        'PrivateDnsName': value.privateDnsName,
        'PrivateIps': value.privateIps === undefined ? undefined : ((value.privateIps as Array<any>).map(PrivateIpToJSON)),
        'SecurityGroups': value.securityGroups === undefined ? undefined : ((value.securityGroups as Array<any>).map(SecurityGroupLightToJSON)),
        'State': value.state,
        'SubnetId': value.subnetId,
        'SubregionName': value.subregionName,
        'Tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(ResourceTagToJSON)),
    };
}

