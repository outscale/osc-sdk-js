/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the server certificate.
 * @export
 * @interface ServerCertificate
 */
export interface ServerCertificate {
    /**
     * The date at which the server certificate expires.
     * @type {Date}
     * @memberof ServerCertificate
     */
    expirationDate?: Date;
    /**
     * The ID of the server certificate.
     * @type {string}
     * @memberof ServerCertificate
     */
    id?: string;
    /**
     * The name of the server certificate.
     * @type {string}
     * @memberof ServerCertificate
     */
    name?: string;
    /**
     * The path to the server certificate.
     * @type {string}
     * @memberof ServerCertificate
     */
    path?: string;
    /**
     * The date at which the server certificate has been uploaded.
     * @type {Date}
     * @memberof ServerCertificate
     */
    uploadDate?: Date;
}

export function ServerCertificateFromJSON(json: any): ServerCertificate {
    return ServerCertificateFromJSONTyped(json, false);
}

export function ServerCertificateFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServerCertificate {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'expirationDate': !exists(json, 'ExpirationDate') ? undefined : (new Date(json['ExpirationDate'])),
        'id': !exists(json, 'Id') ? undefined : json['Id'],
        'name': !exists(json, 'Name') ? undefined : json['Name'],
        'path': !exists(json, 'Path') ? undefined : json['Path'],
        'uploadDate': !exists(json, 'UploadDate') ? undefined : (new Date(json['UploadDate'])),
    };
}

export function ServerCertificateToJSON(value?: ServerCertificate | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ExpirationDate': value.expirationDate === undefined ? undefined : (value.expirationDate.toISOString().substr(0,10)),
        'Id': value.id,
        'Name': value.name,
        'Path': value.path,
        'UploadDate': value.uploadDate === undefined ? undefined : (value.uploadDate.toISOString().substr(0,10)),
    };
}

