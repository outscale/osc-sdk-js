/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Information about the route.
 * @export
 * @interface RouteLight
 */
export interface RouteLight {
    /**
     * The IP range used for the destination match, in CIDR notation (for example, 10.0.0.0/24).
     * @type {string}
     * @memberof RouteLight
     */
    destinationIpRange?: string;
    /**
     * The type of route (always `static`).
     * @type {string}
     * @memberof RouteLight
     */
    routeType?: string;
    /**
     * The current state of the static route (`pending` \| `available` \| `deleting` \| `deleted`).
     * @type {string}
     * @memberof RouteLight
     */
    state?: string;
}

export function RouteLightFromJSON(json: any): RouteLight {
    return RouteLightFromJSONTyped(json, false);
}

export function RouteLightFromJSONTyped(json: any, ignoreDiscriminator: boolean): RouteLight {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'destinationIpRange': !exists(json, 'DestinationIpRange') ? undefined : json['DestinationIpRange'],
        'routeType': !exists(json, 'RouteType') ? undefined : json['RouteType'],
        'state': !exists(json, 'State') ? undefined : json['State'],
    };
}

export function RouteLightToJSON(value?: RouteLight | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'DestinationIpRange': value.destinationIpRange,
        'RouteType': value.routeType,
        'State': value.state,
    };
}

