/* tslint:disable */
/* eslint-disable */
/**
 * 3DS OUTSCALE API
 * Welcome to the OUTSCALE API documentation.<br /><br />  The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br />  Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but some resources have different names in AWS than in the OUTSCALE API. You can find a list of the differences [here](https://docs.outscale.com/en/userguide/OUTSCALE-APIs-Reference.html).<br /><br />  You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.
 *
 * The version of the OpenAPI document: 1.19
 * Contact: support@outscale.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ListenerForCreation,
    ListenerForCreationFromJSON,
    ListenerForCreationFromJSONTyped,
    ListenerForCreationToJSON,
} from './ListenerForCreation';
import {
    ResourceTag,
    ResourceTagFromJSON,
    ResourceTagFromJSONTyped,
    ResourceTagToJSON,
} from './ResourceTag';

/**
 * 
 * @export
 * @interface CreateLoadBalancerRequest
 */
export interface CreateLoadBalancerRequest {
    /**
     * If true, checks whether you have the required permissions to perform the action.
     * @type {boolean}
     * @memberof CreateLoadBalancerRequest
     */
    dryRun?: boolean;
    /**
     * One or more listeners to create.
     * @type {Array<ListenerForCreation>}
     * @memberof CreateLoadBalancerRequest
     */
    listeners: Array<ListenerForCreation>;
    /**
     * The unique name of the load balancer (32 alphanumeric or hyphen characters maximum, but cannot start or end with a hyphen).
     * @type {string}
     * @memberof CreateLoadBalancerRequest
     */
    loadBalancerName: string;
    /**
     * The type of load balancer: `internet-facing` or `internal`. Use this parameter only for load balancers in a Net.
     * @type {string}
     * @memberof CreateLoadBalancerRequest
     */
    loadBalancerType?: string;
    /**
     * (internet-facing only) The public IP you want to associate with the load balancer. If not specified, a public IP owned by 3DS OUTSCALE is associated.
     * @type {string}
     * @memberof CreateLoadBalancerRequest
     */
    publicIp?: string;
    /**
     * (Net only) One or more IDs of security groups you want to assign to the load balancer. If not specified, the default security group of the Net is assigned to the load balancer.
     * @type {Array<string>}
     * @memberof CreateLoadBalancerRequest
     */
    securityGroups?: Array<string>;
    /**
     * (Net only) The ID of the Subnet in which you want to create the load balancer. Regardless of this Subnet, the load balancer can distribute traffic to all Subnets. This parameter is required in a Net.
     * @type {Array<string>}
     * @memberof CreateLoadBalancerRequest
     */
    subnets?: Array<string>;
    /**
     * (public Cloud only) The Subregion in which you want to create the load balancer. Regardless of this Subregion, the load balancer can distribute traffic to all Subregions. This parameter is required in the public Cloud.
     * @type {Array<string>}
     * @memberof CreateLoadBalancerRequest
     */
    subregionNames?: Array<string>;
    /**
     * One or more tags assigned to the load balancer.
     * @type {Array<ResourceTag>}
     * @memberof CreateLoadBalancerRequest
     */
    tags?: Array<ResourceTag>;
}

export function CreateLoadBalancerRequestFromJSON(json: any): CreateLoadBalancerRequest {
    return CreateLoadBalancerRequestFromJSONTyped(json, false);
}

export function CreateLoadBalancerRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): CreateLoadBalancerRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dryRun': !exists(json, 'DryRun') ? undefined : json['DryRun'],
        'listeners': ((json['Listeners'] as Array<any>).map(ListenerForCreationFromJSON)),
        'loadBalancerName': json['LoadBalancerName'],
        'loadBalancerType': !exists(json, 'LoadBalancerType') ? undefined : json['LoadBalancerType'],
        'publicIp': !exists(json, 'PublicIp') ? undefined : json['PublicIp'],
        'securityGroups': !exists(json, 'SecurityGroups') ? undefined : json['SecurityGroups'],
        'subnets': !exists(json, 'Subnets') ? undefined : json['Subnets'],
        'subregionNames': !exists(json, 'SubregionNames') ? undefined : json['SubregionNames'],
        'tags': !exists(json, 'Tags') ? undefined : ((json['Tags'] as Array<any>).map(ResourceTagFromJSON)),
    };
}

export function CreateLoadBalancerRequestToJSON(value?: CreateLoadBalancerRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'DryRun': value.dryRun,
        'Listeners': ((value.listeners as Array<any>).map(ListenerForCreationToJSON)),
        'LoadBalancerName': value.loadBalancerName,
        'LoadBalancerType': value.loadBalancerType,
        'PublicIp': value.publicIp,
        'SecurityGroups': value.securityGroups,
        'Subnets': value.subnets,
        'SubregionNames': value.subregionNames,
        'Tags': value.tags === undefined ? undefined : ((value.tags as Array<any>).map(ResourceTagToJSON)),
    };
}

